Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    FALSE
    THEN
    TRUE

Grammar

Rule 0     S' -> main_block_sequence
Rule 1     main_block_sequence -> main_block main_block_sequence
Rule 2     main_block_sequence -> main_block
Rule 3     main_block -> constant_declaration
Rule 4     main_block -> variable_declaration
Rule 5     main_block -> var_const_update
Rule 6     main_block -> function_declaration
Rule 7     main_block -> <empty>
Rule 8     constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON
Rule 9     variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON
Rule 10    var_const_update -> ID ASSIGN expression SEMICOLON
Rule 11    function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON
Rule 12    function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE
Rule 13    function_param_list -> parameter COMMA function_param_list
Rule 14    function_param_list -> parameter
Rule 15    parameter -> VAL ID COLON types
Rule 16    parameter -> VAR ID COLON types
Rule 17    function_call -> ID LPAREN function_param_list_call RPAREN
Rule 18    function_param_list_call -> expression COMMA function_param_list_call
Rule 19    function_param_list_call -> expression
Rule 20    function_body -> block_sequence
Rule 21    block_sequence -> block block_sequence
Rule 22    block_sequence -> block
Rule 23    block -> constant_declaration
Rule 24    block -> variable_declaration
Rule 25    block -> var_const_update
Rule 26    block -> if_block
Rule 27    block -> while_block
Rule 28    block -> function_call SEMICOLON
Rule 29    if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
Rule 30    if_block -> IF expression LBRACE block_sequence RBRACE
Rule 31    while_block -> WHILE expression LBRACE block_sequence RBRACE
Rule 32    types -> defaulttype
Rule 33    types -> arraytype
Rule 34    defaulttype -> INT_TYPE
Rule 35    defaulttype -> FLOAT_TYPE
Rule 36    defaulttype -> STRING_TYPE
Rule 37    defaulttype -> BOOL_TYPE
Rule 38    defaulttype -> VOID_TYPE
Rule 39    arraytype -> LSQUARE arraytype RSQUARE
Rule 40    arraytype -> defaulttype
Rule 41    typeliterals -> INTEGER_LITERAL
Rule 42    typeliterals -> FLOAT_LITERAL
Rule 43    typeliterals -> STRING_LITERAL
Rule 44    typeliterals -> BOOL_LITERAL
Rule 45    arrayliterals -> LSQUARE array_values RSQUARE
Rule 46    array_values -> array_values COMMA expression
Rule 47    array_values -> expression
Rule 48    expression -> expression PLUS expression
Rule 49    expression -> expression MINUS expression
Rule 50    expression -> expression TIMES expression
Rule 51    expression -> expression DIVIDE expression
Rule 52    expression -> expression MOD expression
Rule 53    expression -> expression POWER expression
Rule 54    expression -> expression EQUAL expression
Rule 55    expression -> expression NOT_EQUAL expression
Rule 56    expression -> expression GREATER_THAN expression
Rule 57    expression -> expression GREATER_THAN_EQUAL expression
Rule 58    expression -> expression LESS_THAN expression
Rule 59    expression -> expression LESS_THAN_EQUAL expression
Rule 60    expression -> expression AND expression
Rule 61    expression -> expression OR expression
Rule 62    expression -> NOT expression
Rule 63    expression -> typeliterals
Rule 64    expression -> arrayliterals
Rule 65    expression -> function_call
Rule 66    expression -> ID
Rule 67    expression -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 60
ASSIGN               : 8 9 10
BOOL_LITERAL         : 44
BOOL_TYPE            : 37
COLON                : 8 9 11 12 15 16
COMMA                : 13 18 46
COMMENT              : 
DIVIDE               : 51
ELSE                 : 29
EQUAL                : 54
FALSE                : 
FLOAT_LITERAL        : 42
FLOAT_TYPE           : 35
FUNCTION             : 11 12
GREATER_THAN         : 56
GREATER_THAN_EQUAL   : 57
ID                   : 8 9 10 11 12 15 16 17 66
IF                   : 29 30
INTEGER_LITERAL      : 41
INT_TYPE             : 34
LBRACE               : 12 29 29 30 31
LESS_THAN            : 58
LESS_THAN_EQUAL      : 59
LPAREN               : 11 12 17 67
LSQUARE              : 39 45
MINUS                : 49
MOD                  : 52
NOT                  : 62
NOT_EQUAL            : 55
OR                   : 61
PLUS                 : 48
POWER                : 53
RBRACE               : 12 29 29 30 31
RPAREN               : 11 12 17 67
RSQUARE              : 39 45
SEMICOLON            : 8 9 10 11 28
STRING_LITERAL       : 43
STRING_TYPE          : 36
THEN                 : 
TIMES                : 50
TRUE                 : 
VAL                  : 8 15
VAR                  : 9 16
VOID_TYPE            : 38
WHILE                : 31
error                : 

Nonterminals, with rules where they appear

array_values         : 45 46
arrayliterals        : 64
arraytype            : 33 39
block                : 21 22
block_sequence       : 20 21 29 29 30 31
constant_declaration : 3 23
defaulttype          : 32 40
expression           : 8 9 10 18 19 29 30 31 46 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 67
function_body        : 12
function_call        : 28 65
function_declaration : 6
function_param_list  : 11 12 13
function_param_list_call : 17 18
if_block             : 26
main_block           : 1 2
main_block_sequence  : 1 0
parameter            : 13 14
typeliterals         : 63
types                : 8 9 11 12 15 16
var_const_update     : 5 25
variable_declaration : 4 24
while_block          : 27

Parsing method: LALR

state 0

    (0) S' -> . main_block_sequence
    (1) main_block_sequence -> . main_block main_block_sequence
    (2) main_block_sequence -> . main_block
    (3) main_block -> . constant_declaration
    (4) main_block -> . variable_declaration
    (5) main_block -> . var_const_update
    (6) main_block -> . function_declaration
    (7) main_block -> .
    (8) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (9) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (10) var_const_update -> . ID ASSIGN expression SEMICOLON
    (11) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON
    (12) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE

  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
    $end            reduce using rule 7 (main_block -> .)
    VAL             shift and go to state 7
    VAR             shift and go to state 9
    ID              shift and go to state 8
    FUNCTION        shift and go to state 10

  ! VAL             [ reduce using rule 7 (main_block -> .) ]
  ! VAR             [ reduce using rule 7 (main_block -> .) ]
  ! ID              [ reduce using rule 7 (main_block -> .) ]
  ! FUNCTION        [ reduce using rule 7 (main_block -> .) ]

    main_block_sequence            shift and go to state 1
    main_block                     shift and go to state 2
    constant_declaration           shift and go to state 3
    variable_declaration           shift and go to state 4
    var_const_update               shift and go to state 5
    function_declaration           shift and go to state 6

state 1

    (0) S' -> main_block_sequence .



state 2

    (1) main_block_sequence -> main_block . main_block_sequence
    (2) main_block_sequence -> main_block .
    (1) main_block_sequence -> . main_block main_block_sequence
    (2) main_block_sequence -> . main_block
    (3) main_block -> . constant_declaration
    (4) main_block -> . variable_declaration
    (5) main_block -> . var_const_update
    (6) main_block -> . function_declaration
    (7) main_block -> .
    (8) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (9) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (10) var_const_update -> . ID ASSIGN expression SEMICOLON
    (11) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON
    (12) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE

  ! reduce/reduce conflict for $end resolved using rule 2 (main_block_sequence -> main_block .)
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
    $end            reduce using rule 2 (main_block_sequence -> main_block .)
    VAL             shift and go to state 7
    VAR             shift and go to state 9
    ID              shift and go to state 8
    FUNCTION        shift and go to state 10

  ! VAL             [ reduce using rule 7 (main_block -> .) ]
  ! VAR             [ reduce using rule 7 (main_block -> .) ]
  ! ID              [ reduce using rule 7 (main_block -> .) ]
  ! FUNCTION        [ reduce using rule 7 (main_block -> .) ]
  ! $end            [ reduce using rule 7 (main_block -> .) ]

    main_block                     shift and go to state 2
    main_block_sequence            shift and go to state 11
    constant_declaration           shift and go to state 3
    variable_declaration           shift and go to state 4
    var_const_update               shift and go to state 5
    function_declaration           shift and go to state 6

state 3

    (3) main_block -> constant_declaration .

    VAL             reduce using rule 3 (main_block -> constant_declaration .)
    VAR             reduce using rule 3 (main_block -> constant_declaration .)
    ID              reduce using rule 3 (main_block -> constant_declaration .)
    FUNCTION        reduce using rule 3 (main_block -> constant_declaration .)
    $end            reduce using rule 3 (main_block -> constant_declaration .)


state 4

    (4) main_block -> variable_declaration .

    VAL             reduce using rule 4 (main_block -> variable_declaration .)
    VAR             reduce using rule 4 (main_block -> variable_declaration .)
    ID              reduce using rule 4 (main_block -> variable_declaration .)
    FUNCTION        reduce using rule 4 (main_block -> variable_declaration .)
    $end            reduce using rule 4 (main_block -> variable_declaration .)


state 5

    (5) main_block -> var_const_update .

    VAL             reduce using rule 5 (main_block -> var_const_update .)
    VAR             reduce using rule 5 (main_block -> var_const_update .)
    ID              reduce using rule 5 (main_block -> var_const_update .)
    FUNCTION        reduce using rule 5 (main_block -> var_const_update .)
    $end            reduce using rule 5 (main_block -> var_const_update .)


state 6

    (6) main_block -> function_declaration .

    VAL             reduce using rule 6 (main_block -> function_declaration .)
    VAR             reduce using rule 6 (main_block -> function_declaration .)
    ID              reduce using rule 6 (main_block -> function_declaration .)
    FUNCTION        reduce using rule 6 (main_block -> function_declaration .)
    $end            reduce using rule 6 (main_block -> function_declaration .)


state 7

    (8) constant_declaration -> VAL . ID COLON types ASSIGN expression SEMICOLON

    ID              shift and go to state 12


state 8

    (10) var_const_update -> ID . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 13


state 9

    (9) variable_declaration -> VAR . ID COLON types ASSIGN expression SEMICOLON

    ID              shift and go to state 14


state 10

    (11) function_declaration -> FUNCTION . ID LPAREN function_param_list RPAREN COLON types SEMICOLON
    (12) function_declaration -> FUNCTION . ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE

    ID              shift and go to state 15


state 11

    (1) main_block_sequence -> main_block main_block_sequence .

    $end            reduce using rule 1 (main_block_sequence -> main_block main_block_sequence .)


state 12

    (8) constant_declaration -> VAL ID . COLON types ASSIGN expression SEMICOLON

    COLON           shift and go to state 16


state 13

    (10) var_const_update -> ID ASSIGN . expression SEMICOLON
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 18
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 14

    (9) variable_declaration -> VAR ID . COLON types ASSIGN expression SEMICOLON

    COLON           shift and go to state 29


state 15

    (11) function_declaration -> FUNCTION ID . LPAREN function_param_list RPAREN COLON types SEMICOLON
    (12) function_declaration -> FUNCTION ID . LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE

    LPAREN          shift and go to state 30


state 16

    (8) constant_declaration -> VAL ID COLON . types ASSIGN expression SEMICOLON
    (32) types -> . defaulttype
    (33) types -> . arraytype
    (34) defaulttype -> . INT_TYPE
    (35) defaulttype -> . FLOAT_TYPE
    (36) defaulttype -> . STRING_TYPE
    (37) defaulttype -> . BOOL_TYPE
    (38) defaulttype -> . VOID_TYPE
    (39) arraytype -> . LSQUARE arraytype RSQUARE
    (40) arraytype -> . defaulttype

    INT_TYPE        shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    BOOL_TYPE       shift and go to state 37
    VOID_TYPE       shift and go to state 38
    LSQUARE         shift and go to state 39

    types                          shift and go to state 31
    defaulttype                    shift and go to state 32
    arraytype                      shift and go to state 33

state 17

    (66) expression -> ID .
    (17) function_call -> ID . LPAREN function_param_list_call RPAREN

    SEMICOLON       reduce using rule 66 (expression -> ID .)
    PLUS            reduce using rule 66 (expression -> ID .)
    MINUS           reduce using rule 66 (expression -> ID .)
    TIMES           reduce using rule 66 (expression -> ID .)
    DIVIDE          reduce using rule 66 (expression -> ID .)
    MOD             reduce using rule 66 (expression -> ID .)
    POWER           reduce using rule 66 (expression -> ID .)
    EQUAL           reduce using rule 66 (expression -> ID .)
    NOT_EQUAL       reduce using rule 66 (expression -> ID .)
    GREATER_THAN    reduce using rule 66 (expression -> ID .)
    GREATER_THAN_EQUAL reduce using rule 66 (expression -> ID .)
    LESS_THAN       reduce using rule 66 (expression -> ID .)
    LESS_THAN_EQUAL reduce using rule 66 (expression -> ID .)
    AND             reduce using rule 66 (expression -> ID .)
    OR              reduce using rule 66 (expression -> ID .)
    RPAREN          reduce using rule 66 (expression -> ID .)
    RSQUARE         reduce using rule 66 (expression -> ID .)
    COMMA           reduce using rule 66 (expression -> ID .)
    LBRACE          reduce using rule 66 (expression -> ID .)
    LPAREN          shift and go to state 40


state 18

    (10) var_const_update -> ID ASSIGN expression . SEMICOLON
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47
    EQUAL           shift and go to state 48
    NOT_EQUAL       shift and go to state 49
    GREATER_THAN    shift and go to state 50
    GREATER_THAN_EQUAL shift and go to state 51
    LESS_THAN       shift and go to state 52
    LESS_THAN_EQUAL shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 19

    (62) expression -> NOT . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 56
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 20

    (63) expression -> typeliterals .

    SEMICOLON       reduce using rule 63 (expression -> typeliterals .)
    PLUS            reduce using rule 63 (expression -> typeliterals .)
    MINUS           reduce using rule 63 (expression -> typeliterals .)
    TIMES           reduce using rule 63 (expression -> typeliterals .)
    DIVIDE          reduce using rule 63 (expression -> typeliterals .)
    MOD             reduce using rule 63 (expression -> typeliterals .)
    POWER           reduce using rule 63 (expression -> typeliterals .)
    EQUAL           reduce using rule 63 (expression -> typeliterals .)
    NOT_EQUAL       reduce using rule 63 (expression -> typeliterals .)
    GREATER_THAN    reduce using rule 63 (expression -> typeliterals .)
    GREATER_THAN_EQUAL reduce using rule 63 (expression -> typeliterals .)
    LESS_THAN       reduce using rule 63 (expression -> typeliterals .)
    LESS_THAN_EQUAL reduce using rule 63 (expression -> typeliterals .)
    AND             reduce using rule 63 (expression -> typeliterals .)
    OR              reduce using rule 63 (expression -> typeliterals .)
    RPAREN          reduce using rule 63 (expression -> typeliterals .)
    RSQUARE         reduce using rule 63 (expression -> typeliterals .)
    COMMA           reduce using rule 63 (expression -> typeliterals .)
    LBRACE          reduce using rule 63 (expression -> typeliterals .)


state 21

    (64) expression -> arrayliterals .

    SEMICOLON       reduce using rule 64 (expression -> arrayliterals .)
    PLUS            reduce using rule 64 (expression -> arrayliterals .)
    MINUS           reduce using rule 64 (expression -> arrayliterals .)
    TIMES           reduce using rule 64 (expression -> arrayliterals .)
    DIVIDE          reduce using rule 64 (expression -> arrayliterals .)
    MOD             reduce using rule 64 (expression -> arrayliterals .)
    POWER           reduce using rule 64 (expression -> arrayliterals .)
    EQUAL           reduce using rule 64 (expression -> arrayliterals .)
    NOT_EQUAL       reduce using rule 64 (expression -> arrayliterals .)
    GREATER_THAN    reduce using rule 64 (expression -> arrayliterals .)
    GREATER_THAN_EQUAL reduce using rule 64 (expression -> arrayliterals .)
    LESS_THAN       reduce using rule 64 (expression -> arrayliterals .)
    LESS_THAN_EQUAL reduce using rule 64 (expression -> arrayliterals .)
    AND             reduce using rule 64 (expression -> arrayliterals .)
    OR              reduce using rule 64 (expression -> arrayliterals .)
    RPAREN          reduce using rule 64 (expression -> arrayliterals .)
    RSQUARE         reduce using rule 64 (expression -> arrayliterals .)
    COMMA           reduce using rule 64 (expression -> arrayliterals .)
    LBRACE          reduce using rule 64 (expression -> arrayliterals .)


state 22

    (65) expression -> function_call .

    SEMICOLON       reduce using rule 65 (expression -> function_call .)
    PLUS            reduce using rule 65 (expression -> function_call .)
    MINUS           reduce using rule 65 (expression -> function_call .)
    TIMES           reduce using rule 65 (expression -> function_call .)
    DIVIDE          reduce using rule 65 (expression -> function_call .)
    MOD             reduce using rule 65 (expression -> function_call .)
    POWER           reduce using rule 65 (expression -> function_call .)
    EQUAL           reduce using rule 65 (expression -> function_call .)
    NOT_EQUAL       reduce using rule 65 (expression -> function_call .)
    GREATER_THAN    reduce using rule 65 (expression -> function_call .)
    GREATER_THAN_EQUAL reduce using rule 65 (expression -> function_call .)
    LESS_THAN       reduce using rule 65 (expression -> function_call .)
    LESS_THAN_EQUAL reduce using rule 65 (expression -> function_call .)
    AND             reduce using rule 65 (expression -> function_call .)
    OR              reduce using rule 65 (expression -> function_call .)
    RPAREN          reduce using rule 65 (expression -> function_call .)
    RSQUARE         reduce using rule 65 (expression -> function_call .)
    COMMA           reduce using rule 65 (expression -> function_call .)
    LBRACE          reduce using rule 65 (expression -> function_call .)


state 23

    (67) expression -> LPAREN . expression RPAREN
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 57
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 24

    (41) typeliterals -> INTEGER_LITERAL .

    SEMICOLON       reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    PLUS            reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    MINUS           reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    TIMES           reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    DIVIDE          reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    MOD             reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    POWER           reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    EQUAL           reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    NOT_EQUAL       reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    GREATER_THAN    reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    LESS_THAN       reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    AND             reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    OR              reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    RPAREN          reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    RSQUARE         reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    COMMA           reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)
    LBRACE          reduce using rule 41 (typeliterals -> INTEGER_LITERAL .)


state 25

    (42) typeliterals -> FLOAT_LITERAL .

    SEMICOLON       reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    PLUS            reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    MINUS           reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    TIMES           reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    DIVIDE          reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    MOD             reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    POWER           reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    EQUAL           reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    NOT_EQUAL       reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    GREATER_THAN    reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    LESS_THAN       reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    AND             reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    OR              reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    RPAREN          reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    RSQUARE         reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    COMMA           reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)
    LBRACE          reduce using rule 42 (typeliterals -> FLOAT_LITERAL .)


state 26

    (43) typeliterals -> STRING_LITERAL .

    SEMICOLON       reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    PLUS            reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    MINUS           reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    TIMES           reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    DIVIDE          reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    MOD             reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    POWER           reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    EQUAL           reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    NOT_EQUAL       reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    GREATER_THAN    reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    LESS_THAN       reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    AND             reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    OR              reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    RPAREN          reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    RSQUARE         reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    COMMA           reduce using rule 43 (typeliterals -> STRING_LITERAL .)
    LBRACE          reduce using rule 43 (typeliterals -> STRING_LITERAL .)


state 27

    (44) typeliterals -> BOOL_LITERAL .

    SEMICOLON       reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    PLUS            reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    MINUS           reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    TIMES           reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    DIVIDE          reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    MOD             reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    POWER           reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    EQUAL           reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    NOT_EQUAL       reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    GREATER_THAN    reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    LESS_THAN       reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    AND             reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    OR              reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    RPAREN          reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    RSQUARE         reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    COMMA           reduce using rule 44 (typeliterals -> BOOL_LITERAL .)
    LBRACE          reduce using rule 44 (typeliterals -> BOOL_LITERAL .)


state 28

    (45) arrayliterals -> LSQUARE . array_values RSQUARE
    (46) array_values -> . array_values COMMA expression
    (47) array_values -> . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    array_values                   shift and go to state 58
    expression                     shift and go to state 59
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 29

    (9) variable_declaration -> VAR ID COLON . types ASSIGN expression SEMICOLON
    (32) types -> . defaulttype
    (33) types -> . arraytype
    (34) defaulttype -> . INT_TYPE
    (35) defaulttype -> . FLOAT_TYPE
    (36) defaulttype -> . STRING_TYPE
    (37) defaulttype -> . BOOL_TYPE
    (38) defaulttype -> . VOID_TYPE
    (39) arraytype -> . LSQUARE arraytype RSQUARE
    (40) arraytype -> . defaulttype

    INT_TYPE        shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    BOOL_TYPE       shift and go to state 37
    VOID_TYPE       shift and go to state 38
    LSQUARE         shift and go to state 39

    types                          shift and go to state 60
    defaulttype                    shift and go to state 32
    arraytype                      shift and go to state 33

state 30

    (11) function_declaration -> FUNCTION ID LPAREN . function_param_list RPAREN COLON types SEMICOLON
    (12) function_declaration -> FUNCTION ID LPAREN . function_param_list RPAREN COLON types LBRACE function_body RBRACE
    (13) function_param_list -> . parameter COMMA function_param_list
    (14) function_param_list -> . parameter
    (15) parameter -> . VAL ID COLON types
    (16) parameter -> . VAR ID COLON types

    VAL             shift and go to state 63
    VAR             shift and go to state 64

    function_param_list            shift and go to state 61
    parameter                      shift and go to state 62

state 31

    (8) constant_declaration -> VAL ID COLON types . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 65


state 32

    (32) types -> defaulttype .
    (40) arraytype -> defaulttype .

  ! reduce/reduce conflict for ASSIGN resolved using rule 32 (types -> defaulttype .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 32 (types -> defaulttype .)
  ! reduce/reduce conflict for LBRACE resolved using rule 32 (types -> defaulttype .)
  ! reduce/reduce conflict for COMMA resolved using rule 32 (types -> defaulttype .)
  ! reduce/reduce conflict for RPAREN resolved using rule 32 (types -> defaulttype .)
    ASSIGN          reduce using rule 32 (types -> defaulttype .)
    SEMICOLON       reduce using rule 32 (types -> defaulttype .)
    LBRACE          reduce using rule 32 (types -> defaulttype .)
    COMMA           reduce using rule 32 (types -> defaulttype .)
    RPAREN          reduce using rule 32 (types -> defaulttype .)

  ! ASSIGN          [ reduce using rule 40 (arraytype -> defaulttype .) ]
  ! SEMICOLON       [ reduce using rule 40 (arraytype -> defaulttype .) ]
  ! LBRACE          [ reduce using rule 40 (arraytype -> defaulttype .) ]
  ! COMMA           [ reduce using rule 40 (arraytype -> defaulttype .) ]
  ! RPAREN          [ reduce using rule 40 (arraytype -> defaulttype .) ]


state 33

    (33) types -> arraytype .

    ASSIGN          reduce using rule 33 (types -> arraytype .)
    SEMICOLON       reduce using rule 33 (types -> arraytype .)
    LBRACE          reduce using rule 33 (types -> arraytype .)
    COMMA           reduce using rule 33 (types -> arraytype .)
    RPAREN          reduce using rule 33 (types -> arraytype .)


state 34

    (34) defaulttype -> INT_TYPE .

    ASSIGN          reduce using rule 34 (defaulttype -> INT_TYPE .)
    RSQUARE         reduce using rule 34 (defaulttype -> INT_TYPE .)
    SEMICOLON       reduce using rule 34 (defaulttype -> INT_TYPE .)
    LBRACE          reduce using rule 34 (defaulttype -> INT_TYPE .)
    COMMA           reduce using rule 34 (defaulttype -> INT_TYPE .)
    RPAREN          reduce using rule 34 (defaulttype -> INT_TYPE .)


state 35

    (35) defaulttype -> FLOAT_TYPE .

    ASSIGN          reduce using rule 35 (defaulttype -> FLOAT_TYPE .)
    RSQUARE         reduce using rule 35 (defaulttype -> FLOAT_TYPE .)
    SEMICOLON       reduce using rule 35 (defaulttype -> FLOAT_TYPE .)
    LBRACE          reduce using rule 35 (defaulttype -> FLOAT_TYPE .)
    COMMA           reduce using rule 35 (defaulttype -> FLOAT_TYPE .)
    RPAREN          reduce using rule 35 (defaulttype -> FLOAT_TYPE .)


state 36

    (36) defaulttype -> STRING_TYPE .

    ASSIGN          reduce using rule 36 (defaulttype -> STRING_TYPE .)
    RSQUARE         reduce using rule 36 (defaulttype -> STRING_TYPE .)
    SEMICOLON       reduce using rule 36 (defaulttype -> STRING_TYPE .)
    LBRACE          reduce using rule 36 (defaulttype -> STRING_TYPE .)
    COMMA           reduce using rule 36 (defaulttype -> STRING_TYPE .)
    RPAREN          reduce using rule 36 (defaulttype -> STRING_TYPE .)


state 37

    (37) defaulttype -> BOOL_TYPE .

    ASSIGN          reduce using rule 37 (defaulttype -> BOOL_TYPE .)
    RSQUARE         reduce using rule 37 (defaulttype -> BOOL_TYPE .)
    SEMICOLON       reduce using rule 37 (defaulttype -> BOOL_TYPE .)
    LBRACE          reduce using rule 37 (defaulttype -> BOOL_TYPE .)
    COMMA           reduce using rule 37 (defaulttype -> BOOL_TYPE .)
    RPAREN          reduce using rule 37 (defaulttype -> BOOL_TYPE .)


state 38

    (38) defaulttype -> VOID_TYPE .

    ASSIGN          reduce using rule 38 (defaulttype -> VOID_TYPE .)
    RSQUARE         reduce using rule 38 (defaulttype -> VOID_TYPE .)
    SEMICOLON       reduce using rule 38 (defaulttype -> VOID_TYPE .)
    LBRACE          reduce using rule 38 (defaulttype -> VOID_TYPE .)
    COMMA           reduce using rule 38 (defaulttype -> VOID_TYPE .)
    RPAREN          reduce using rule 38 (defaulttype -> VOID_TYPE .)


state 39

    (39) arraytype -> LSQUARE . arraytype RSQUARE
    (39) arraytype -> . LSQUARE arraytype RSQUARE
    (40) arraytype -> . defaulttype
    (34) defaulttype -> . INT_TYPE
    (35) defaulttype -> . FLOAT_TYPE
    (36) defaulttype -> . STRING_TYPE
    (37) defaulttype -> . BOOL_TYPE
    (38) defaulttype -> . VOID_TYPE

    LSQUARE         shift and go to state 39
    INT_TYPE        shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    BOOL_TYPE       shift and go to state 37
    VOID_TYPE       shift and go to state 38

    arraytype                      shift and go to state 66
    defaulttype                    shift and go to state 67

state 40

    (17) function_call -> ID LPAREN . function_param_list_call RPAREN
    (18) function_param_list_call -> . expression COMMA function_param_list_call
    (19) function_param_list_call -> . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    function_param_list_call       shift and go to state 68
    expression                     shift and go to state 69
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 41

    (10) var_const_update -> ID ASSIGN expression SEMICOLON .

    VAL             reduce using rule 10 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 10 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 10 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 10 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 10 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 10 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 10 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 10 (var_const_update -> ID ASSIGN expression SEMICOLON .)


state 42

    (48) expression -> expression PLUS . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 70
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 43

    (49) expression -> expression MINUS . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 71
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 44

    (50) expression -> expression TIMES . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 72
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 45

    (51) expression -> expression DIVIDE . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 73
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 46

    (52) expression -> expression MOD . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 74
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 47

    (53) expression -> expression POWER . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 75
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 48

    (54) expression -> expression EQUAL . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 76
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 49

    (55) expression -> expression NOT_EQUAL . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 77
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 50

    (56) expression -> expression GREATER_THAN . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 78
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 51

    (57) expression -> expression GREATER_THAN_EQUAL . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 79
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 52

    (58) expression -> expression LESS_THAN . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 80
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 53

    (59) expression -> expression LESS_THAN_EQUAL . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 81
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 54

    (60) expression -> expression AND . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 82
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 55

    (61) expression -> expression OR . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 83
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 56

    (62) expression -> NOT expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 62 (expression -> NOT expression .)
    PLUS            reduce using rule 62 (expression -> NOT expression .)
    MINUS           reduce using rule 62 (expression -> NOT expression .)
    TIMES           reduce using rule 62 (expression -> NOT expression .)
    DIVIDE          reduce using rule 62 (expression -> NOT expression .)
    MOD             reduce using rule 62 (expression -> NOT expression .)
    POWER           reduce using rule 62 (expression -> NOT expression .)
    EQUAL           reduce using rule 62 (expression -> NOT expression .)
    NOT_EQUAL       reduce using rule 62 (expression -> NOT expression .)
    GREATER_THAN    reduce using rule 62 (expression -> NOT expression .)
    GREATER_THAN_EQUAL reduce using rule 62 (expression -> NOT expression .)
    LESS_THAN       reduce using rule 62 (expression -> NOT expression .)
    LESS_THAN_EQUAL reduce using rule 62 (expression -> NOT expression .)
    AND             reduce using rule 62 (expression -> NOT expression .)
    OR              reduce using rule 62 (expression -> NOT expression .)
    RPAREN          reduce using rule 62 (expression -> NOT expression .)
    RSQUARE         reduce using rule 62 (expression -> NOT expression .)
    COMMA           reduce using rule 62 (expression -> NOT expression .)
    LBRACE          reduce using rule 62 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! TIMES           [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! MOD             [ shift and go to state 46 ]
  ! POWER           [ shift and go to state 47 ]
  ! EQUAL           [ shift and go to state 48 ]
  ! NOT_EQUAL       [ shift and go to state 49 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! LESS_THAN_EQUAL [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 57

    (67) expression -> LPAREN expression . RPAREN
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    RPAREN          shift and go to state 84
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47
    EQUAL           shift and go to state 48
    NOT_EQUAL       shift and go to state 49
    GREATER_THAN    shift and go to state 50
    GREATER_THAN_EQUAL shift and go to state 51
    LESS_THAN       shift and go to state 52
    LESS_THAN_EQUAL shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 58

    (45) arrayliterals -> LSQUARE array_values . RSQUARE
    (46) array_values -> array_values . COMMA expression

    RSQUARE         shift and go to state 85
    COMMA           shift and go to state 86


state 59

    (47) array_values -> expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    RSQUARE         reduce using rule 47 (array_values -> expression .)
    COMMA           reduce using rule 47 (array_values -> expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47
    EQUAL           shift and go to state 48
    NOT_EQUAL       shift and go to state 49
    GREATER_THAN    shift and go to state 50
    GREATER_THAN_EQUAL shift and go to state 51
    LESS_THAN       shift and go to state 52
    LESS_THAN_EQUAL shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 60

    (9) variable_declaration -> VAR ID COLON types . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 87


state 61

    (11) function_declaration -> FUNCTION ID LPAREN function_param_list . RPAREN COLON types SEMICOLON
    (12) function_declaration -> FUNCTION ID LPAREN function_param_list . RPAREN COLON types LBRACE function_body RBRACE

    RPAREN          shift and go to state 88


state 62

    (13) function_param_list -> parameter . COMMA function_param_list
    (14) function_param_list -> parameter .

    COMMA           shift and go to state 89
    RPAREN          reduce using rule 14 (function_param_list -> parameter .)


state 63

    (15) parameter -> VAL . ID COLON types

    ID              shift and go to state 90


state 64

    (16) parameter -> VAR . ID COLON types

    ID              shift and go to state 91


state 65

    (8) constant_declaration -> VAL ID COLON types ASSIGN . expression SEMICOLON
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 92
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 66

    (39) arraytype -> LSQUARE arraytype . RSQUARE

    RSQUARE         shift and go to state 93


state 67

    (40) arraytype -> defaulttype .

    RSQUARE         reduce using rule 40 (arraytype -> defaulttype .)


state 68

    (17) function_call -> ID LPAREN function_param_list_call . RPAREN

    RPAREN          shift and go to state 94


state 69

    (18) function_param_list_call -> expression . COMMA function_param_list_call
    (19) function_param_list_call -> expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    COMMA           shift and go to state 95
    RPAREN          reduce using rule 19 (function_param_list_call -> expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47
    EQUAL           shift and go to state 48
    NOT_EQUAL       shift and go to state 49
    GREATER_THAN    shift and go to state 50
    GREATER_THAN_EQUAL shift and go to state 51
    LESS_THAN       shift and go to state 52
    LESS_THAN_EQUAL shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 70

    (48) expression -> expression PLUS expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 48 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 48 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 48 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 48 (expression -> expression PLUS expression .)
    NOT_EQUAL       reduce using rule 48 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 48 (expression -> expression PLUS expression .)
    GREATER_THAN_EQUAL reduce using rule 48 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 48 (expression -> expression PLUS expression .)
    LESS_THAN_EQUAL reduce using rule 48 (expression -> expression PLUS expression .)
    AND             reduce using rule 48 (expression -> expression PLUS expression .)
    OR              reduce using rule 48 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 48 (expression -> expression PLUS expression .)
    RSQUARE         reduce using rule 48 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 48 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 48 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47

  ! TIMES           [ reduce using rule 48 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 48 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 48 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! EQUAL           [ shift and go to state 48 ]
  ! NOT_EQUAL       [ shift and go to state 49 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! LESS_THAN_EQUAL [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 71

    (49) expression -> expression MINUS expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 49 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 49 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 49 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 49 (expression -> expression MINUS expression .)
    NOT_EQUAL       reduce using rule 49 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 49 (expression -> expression MINUS expression .)
    GREATER_THAN_EQUAL reduce using rule 49 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 49 (expression -> expression MINUS expression .)
    LESS_THAN_EQUAL reduce using rule 49 (expression -> expression MINUS expression .)
    AND             reduce using rule 49 (expression -> expression MINUS expression .)
    OR              reduce using rule 49 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 49 (expression -> expression MINUS expression .)
    RSQUARE         reduce using rule 49 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 49 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 49 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47

  ! TIMES           [ reduce using rule 49 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 49 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 49 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! EQUAL           [ shift and go to state 48 ]
  ! NOT_EQUAL       [ shift and go to state 49 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! LESS_THAN_EQUAL [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 72

    (50) expression -> expression TIMES expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 50 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 50 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 50 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 50 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 50 (expression -> expression TIMES expression .)
    MOD             reduce using rule 50 (expression -> expression TIMES expression .)
    EQUAL           reduce using rule 50 (expression -> expression TIMES expression .)
    NOT_EQUAL       reduce using rule 50 (expression -> expression TIMES expression .)
    GREATER_THAN    reduce using rule 50 (expression -> expression TIMES expression .)
    GREATER_THAN_EQUAL reduce using rule 50 (expression -> expression TIMES expression .)
    LESS_THAN       reduce using rule 50 (expression -> expression TIMES expression .)
    LESS_THAN_EQUAL reduce using rule 50 (expression -> expression TIMES expression .)
    AND             reduce using rule 50 (expression -> expression TIMES expression .)
    OR              reduce using rule 50 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 50 (expression -> expression TIMES expression .)
    RSQUARE         reduce using rule 50 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 50 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 50 (expression -> expression TIMES expression .)
    POWER           shift and go to state 47

  ! POWER           [ reduce using rule 50 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! TIMES           [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! MOD             [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 48 ]
  ! NOT_EQUAL       [ shift and go to state 49 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! LESS_THAN_EQUAL [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 73

    (51) expression -> expression DIVIDE expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 51 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 51 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 51 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 51 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 51 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 51 (expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 51 (expression -> expression DIVIDE expression .)
    NOT_EQUAL       reduce using rule 51 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 51 (expression -> expression DIVIDE expression .)
    GREATER_THAN_EQUAL reduce using rule 51 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 51 (expression -> expression DIVIDE expression .)
    LESS_THAN_EQUAL reduce using rule 51 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 51 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 51 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 51 (expression -> expression DIVIDE expression .)
    RSQUARE         reduce using rule 51 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 51 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 51 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 47

  ! POWER           [ reduce using rule 51 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! TIMES           [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! MOD             [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 48 ]
  ! NOT_EQUAL       [ shift and go to state 49 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! LESS_THAN_EQUAL [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 74

    (52) expression -> expression MOD expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 52 (expression -> expression MOD expression .)
    PLUS            reduce using rule 52 (expression -> expression MOD expression .)
    MINUS           reduce using rule 52 (expression -> expression MOD expression .)
    TIMES           reduce using rule 52 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 52 (expression -> expression MOD expression .)
    MOD             reduce using rule 52 (expression -> expression MOD expression .)
    EQUAL           reduce using rule 52 (expression -> expression MOD expression .)
    NOT_EQUAL       reduce using rule 52 (expression -> expression MOD expression .)
    GREATER_THAN    reduce using rule 52 (expression -> expression MOD expression .)
    GREATER_THAN_EQUAL reduce using rule 52 (expression -> expression MOD expression .)
    LESS_THAN       reduce using rule 52 (expression -> expression MOD expression .)
    LESS_THAN_EQUAL reduce using rule 52 (expression -> expression MOD expression .)
    AND             reduce using rule 52 (expression -> expression MOD expression .)
    OR              reduce using rule 52 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 52 (expression -> expression MOD expression .)
    RSQUARE         reduce using rule 52 (expression -> expression MOD expression .)
    COMMA           reduce using rule 52 (expression -> expression MOD expression .)
    LBRACE          reduce using rule 52 (expression -> expression MOD expression .)
    POWER           shift and go to state 47

  ! POWER           [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! TIMES           [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! MOD             [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 48 ]
  ! NOT_EQUAL       [ shift and go to state 49 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! LESS_THAN_EQUAL [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 75

    (53) expression -> expression POWER expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 53 (expression -> expression POWER expression .)
    PLUS            reduce using rule 53 (expression -> expression POWER expression .)
    MINUS           reduce using rule 53 (expression -> expression POWER expression .)
    TIMES           reduce using rule 53 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 53 (expression -> expression POWER expression .)
    MOD             reduce using rule 53 (expression -> expression POWER expression .)
    EQUAL           reduce using rule 53 (expression -> expression POWER expression .)
    NOT_EQUAL       reduce using rule 53 (expression -> expression POWER expression .)
    GREATER_THAN    reduce using rule 53 (expression -> expression POWER expression .)
    GREATER_THAN_EQUAL reduce using rule 53 (expression -> expression POWER expression .)
    LESS_THAN       reduce using rule 53 (expression -> expression POWER expression .)
    LESS_THAN_EQUAL reduce using rule 53 (expression -> expression POWER expression .)
    AND             reduce using rule 53 (expression -> expression POWER expression .)
    OR              reduce using rule 53 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 53 (expression -> expression POWER expression .)
    RSQUARE         reduce using rule 53 (expression -> expression POWER expression .)
    COMMA           reduce using rule 53 (expression -> expression POWER expression .)
    LBRACE          reduce using rule 53 (expression -> expression POWER expression .)
    POWER           shift and go to state 47

  ! POWER           [ reduce using rule 53 (expression -> expression POWER expression .) ]
  ! PLUS            [ shift and go to state 42 ]
  ! MINUS           [ shift and go to state 43 ]
  ! TIMES           [ shift and go to state 44 ]
  ! DIVIDE          [ shift and go to state 45 ]
  ! MOD             [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 48 ]
  ! NOT_EQUAL       [ shift and go to state 49 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! LESS_THAN_EQUAL [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 76

    (54) expression -> expression EQUAL expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 54 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 54 (expression -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 54 (expression -> expression EQUAL expression .)
    AND             reduce using rule 54 (expression -> expression EQUAL expression .)
    OR              reduce using rule 54 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 54 (expression -> expression EQUAL expression .)
    RSQUARE         reduce using rule 54 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 54 (expression -> expression EQUAL expression .)
    LBRACE          reduce using rule 54 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47
    GREATER_THAN    shift and go to state 50
    GREATER_THAN_EQUAL shift and go to state 51
    LESS_THAN       shift and go to state 52
    LESS_THAN_EQUAL shift and go to state 53

  ! PLUS            [ reduce using rule 54 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 54 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> expression EQUAL expression .) ]
  ! MOD             [ reduce using rule 54 (expression -> expression EQUAL expression .) ]
  ! POWER           [ reduce using rule 54 (expression -> expression EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 54 (expression -> expression EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 54 (expression -> expression EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 54 (expression -> expression EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 54 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 48 ]
  ! NOT_EQUAL       [ shift and go to state 49 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 77

    (55) expression -> expression NOT_EQUAL expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    AND             reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    OR              reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    RPAREN          reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    RSQUARE         reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    COMMA           reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    LBRACE          reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47
    GREATER_THAN    shift and go to state 50
    GREATER_THAN_EQUAL shift and go to state 51
    LESS_THAN       shift and go to state 52
    LESS_THAN_EQUAL shift and go to state 53

  ! PLUS            [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! MOD             [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! POWER           [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 48 ]
  ! NOT_EQUAL       [ shift and go to state 49 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 78

    (56) expression -> expression GREATER_THAN expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 56 (expression -> expression GREATER_THAN expression .)
    EQUAL           reduce using rule 56 (expression -> expression GREATER_THAN expression .)
    NOT_EQUAL       reduce using rule 56 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 56 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 56 (expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 56 (expression -> expression GREATER_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 56 (expression -> expression GREATER_THAN expression .)
    AND             reduce using rule 56 (expression -> expression GREATER_THAN expression .)
    OR              reduce using rule 56 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 56 (expression -> expression GREATER_THAN expression .)
    RSQUARE         reduce using rule 56 (expression -> expression GREATER_THAN expression .)
    COMMA           reduce using rule 56 (expression -> expression GREATER_THAN expression .)
    LBRACE          reduce using rule 56 (expression -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47

  ! PLUS            [ reduce using rule 56 (expression -> expression GREATER_THAN expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression GREATER_THAN expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression GREATER_THAN expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression GREATER_THAN expression .) ]
  ! POWER           [ reduce using rule 56 (expression -> expression GREATER_THAN expression .) ]
  ! EQUAL           [ shift and go to state 48 ]
  ! NOT_EQUAL       [ shift and go to state 49 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! LESS_THAN_EQUAL [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 79

    (57) expression -> expression GREATER_THAN_EQUAL expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .)
    EQUAL           reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .)
    NOT_EQUAL       reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .)
    AND             reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .)
    OR              reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .)
    RPAREN          reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .)
    RSQUARE         reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .)
    COMMA           reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .)
    LBRACE          reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47

  ! PLUS            [ reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MOD             [ reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! POWER           [ reduce using rule 57 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 48 ]
  ! NOT_EQUAL       [ shift and go to state 49 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! LESS_THAN_EQUAL [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 80

    (58) expression -> expression LESS_THAN expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 58 (expression -> expression LESS_THAN expression .)
    EQUAL           reduce using rule 58 (expression -> expression LESS_THAN expression .)
    NOT_EQUAL       reduce using rule 58 (expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 58 (expression -> expression LESS_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 58 (expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 58 (expression -> expression LESS_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 58 (expression -> expression LESS_THAN expression .)
    AND             reduce using rule 58 (expression -> expression LESS_THAN expression .)
    OR              reduce using rule 58 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 58 (expression -> expression LESS_THAN expression .)
    RSQUARE         reduce using rule 58 (expression -> expression LESS_THAN expression .)
    COMMA           reduce using rule 58 (expression -> expression LESS_THAN expression .)
    LBRACE          reduce using rule 58 (expression -> expression LESS_THAN expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47

  ! PLUS            [ reduce using rule 58 (expression -> expression LESS_THAN expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression LESS_THAN expression .) ]
  ! TIMES           [ reduce using rule 58 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> expression LESS_THAN expression .) ]
  ! MOD             [ reduce using rule 58 (expression -> expression LESS_THAN expression .) ]
  ! POWER           [ reduce using rule 58 (expression -> expression LESS_THAN expression .) ]
  ! EQUAL           [ shift and go to state 48 ]
  ! NOT_EQUAL       [ shift and go to state 49 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! LESS_THAN_EQUAL [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 81

    (59) expression -> expression LESS_THAN_EQUAL expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .)
    EQUAL           reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .)
    NOT_EQUAL       reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .)
    AND             reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .)
    OR              reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .)
    RPAREN          reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .)
    RSQUARE         reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .)
    COMMA           reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .)
    LBRACE          reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47

  ! PLUS            [ reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MOD             [ reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! POWER           [ reduce using rule 59 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 48 ]
  ! NOT_EQUAL       [ shift and go to state 49 ]
  ! GREATER_THAN    [ shift and go to state 50 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 51 ]
  ! LESS_THAN       [ shift and go to state 52 ]
  ! LESS_THAN_EQUAL [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 82

    (60) expression -> expression AND expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 60 (expression -> expression AND expression .)
    AND             reduce using rule 60 (expression -> expression AND expression .)
    OR              reduce using rule 60 (expression -> expression AND expression .)
    RPAREN          reduce using rule 60 (expression -> expression AND expression .)
    RSQUARE         reduce using rule 60 (expression -> expression AND expression .)
    COMMA           reduce using rule 60 (expression -> expression AND expression .)
    LBRACE          reduce using rule 60 (expression -> expression AND expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47
    EQUAL           shift and go to state 48
    NOT_EQUAL       shift and go to state 49
    GREATER_THAN    shift and go to state 50
    GREATER_THAN_EQUAL shift and go to state 51
    LESS_THAN       shift and go to state 52
    LESS_THAN_EQUAL shift and go to state 53

  ! PLUS            [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! POWER           [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! NOT_EQUAL       [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! LESS_THAN       [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 83

    (61) expression -> expression OR expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       reduce using rule 61 (expression -> expression OR expression .)
    OR              reduce using rule 61 (expression -> expression OR expression .)
    RPAREN          reduce using rule 61 (expression -> expression OR expression .)
    RSQUARE         reduce using rule 61 (expression -> expression OR expression .)
    COMMA           reduce using rule 61 (expression -> expression OR expression .)
    LBRACE          reduce using rule 61 (expression -> expression OR expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47
    EQUAL           shift and go to state 48
    NOT_EQUAL       shift and go to state 49
    GREATER_THAN    shift and go to state 50
    GREATER_THAN_EQUAL shift and go to state 51
    LESS_THAN       shift and go to state 52
    LESS_THAN_EQUAL shift and go to state 53
    AND             shift and go to state 54

  ! PLUS            [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! POWER           [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! NOT_EQUAL       [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! LESS_THAN       [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 55 ]


state 84

    (67) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    LESS_THAN_EQUAL reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    RSQUARE         reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 67 (expression -> LPAREN expression RPAREN .)


state 85

    (45) arrayliterals -> LSQUARE array_values RSQUARE .

    SEMICOLON       reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    PLUS            reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    MINUS           reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    TIMES           reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    DIVIDE          reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    MOD             reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    POWER           reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    EQUAL           reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    NOT_EQUAL       reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    GREATER_THAN    reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    GREATER_THAN_EQUAL reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    LESS_THAN       reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    LESS_THAN_EQUAL reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    AND             reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    OR              reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    RPAREN          reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    RSQUARE         reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    COMMA           reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)
    LBRACE          reduce using rule 45 (arrayliterals -> LSQUARE array_values RSQUARE .)


state 86

    (46) array_values -> array_values COMMA . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 96
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 87

    (9) variable_declaration -> VAR ID COLON types ASSIGN . expression SEMICOLON
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 97
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 88

    (11) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN . COLON types SEMICOLON
    (12) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN . COLON types LBRACE function_body RBRACE

    COLON           shift and go to state 98


state 89

    (13) function_param_list -> parameter COMMA . function_param_list
    (13) function_param_list -> . parameter COMMA function_param_list
    (14) function_param_list -> . parameter
    (15) parameter -> . VAL ID COLON types
    (16) parameter -> . VAR ID COLON types

    VAL             shift and go to state 63
    VAR             shift and go to state 64

    parameter                      shift and go to state 62
    function_param_list            shift and go to state 99

state 90

    (15) parameter -> VAL ID . COLON types

    COLON           shift and go to state 100


state 91

    (16) parameter -> VAR ID . COLON types

    COLON           shift and go to state 101


state 92

    (8) constant_declaration -> VAL ID COLON types ASSIGN expression . SEMICOLON
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       shift and go to state 102
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47
    EQUAL           shift and go to state 48
    NOT_EQUAL       shift and go to state 49
    GREATER_THAN    shift and go to state 50
    GREATER_THAN_EQUAL shift and go to state 51
    LESS_THAN       shift and go to state 52
    LESS_THAN_EQUAL shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 93

    (39) arraytype -> LSQUARE arraytype RSQUARE .

    ASSIGN          reduce using rule 39 (arraytype -> LSQUARE arraytype RSQUARE .)
    RSQUARE         reduce using rule 39 (arraytype -> LSQUARE arraytype RSQUARE .)
    SEMICOLON       reduce using rule 39 (arraytype -> LSQUARE arraytype RSQUARE .)
    LBRACE          reduce using rule 39 (arraytype -> LSQUARE arraytype RSQUARE .)
    COMMA           reduce using rule 39 (arraytype -> LSQUARE arraytype RSQUARE .)
    RPAREN          reduce using rule 39 (arraytype -> LSQUARE arraytype RSQUARE .)


state 94

    (17) function_call -> ID LPAREN function_param_list_call RPAREN .

    SEMICOLON       reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    PLUS            reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    MINUS           reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    TIMES           reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    DIVIDE          reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    MOD             reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    POWER           reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    EQUAL           reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    NOT_EQUAL       reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    GREATER_THAN    reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    LESS_THAN       reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    LESS_THAN_EQUAL reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    AND             reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    OR              reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    RPAREN          reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    RSQUARE         reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    COMMA           reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    LBRACE          reduce using rule 17 (function_call -> ID LPAREN function_param_list_call RPAREN .)


state 95

    (18) function_param_list_call -> expression COMMA . function_param_list_call
    (18) function_param_list_call -> . expression COMMA function_param_list_call
    (19) function_param_list_call -> . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 69
    function_param_list_call       shift and go to state 103
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 96

    (46) array_values -> array_values COMMA expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    RSQUARE         reduce using rule 46 (array_values -> array_values COMMA expression .)
    COMMA           reduce using rule 46 (array_values -> array_values COMMA expression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47
    EQUAL           shift and go to state 48
    NOT_EQUAL       shift and go to state 49
    GREATER_THAN    shift and go to state 50
    GREATER_THAN_EQUAL shift and go to state 51
    LESS_THAN       shift and go to state 52
    LESS_THAN_EQUAL shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 97

    (9) variable_declaration -> VAR ID COLON types ASSIGN expression . SEMICOLON
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    SEMICOLON       shift and go to state 104
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47
    EQUAL           shift and go to state 48
    NOT_EQUAL       shift and go to state 49
    GREATER_THAN    shift and go to state 50
    GREATER_THAN_EQUAL shift and go to state 51
    LESS_THAN       shift and go to state 52
    LESS_THAN_EQUAL shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 98

    (11) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON . types SEMICOLON
    (12) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON . types LBRACE function_body RBRACE
    (32) types -> . defaulttype
    (33) types -> . arraytype
    (34) defaulttype -> . INT_TYPE
    (35) defaulttype -> . FLOAT_TYPE
    (36) defaulttype -> . STRING_TYPE
    (37) defaulttype -> . BOOL_TYPE
    (38) defaulttype -> . VOID_TYPE
    (39) arraytype -> . LSQUARE arraytype RSQUARE
    (40) arraytype -> . defaulttype

    INT_TYPE        shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    BOOL_TYPE       shift and go to state 37
    VOID_TYPE       shift and go to state 38
    LSQUARE         shift and go to state 39

    types                          shift and go to state 105
    defaulttype                    shift and go to state 32
    arraytype                      shift and go to state 33

state 99

    (13) function_param_list -> parameter COMMA function_param_list .

    RPAREN          reduce using rule 13 (function_param_list -> parameter COMMA function_param_list .)


state 100

    (15) parameter -> VAL ID COLON . types
    (32) types -> . defaulttype
    (33) types -> . arraytype
    (34) defaulttype -> . INT_TYPE
    (35) defaulttype -> . FLOAT_TYPE
    (36) defaulttype -> . STRING_TYPE
    (37) defaulttype -> . BOOL_TYPE
    (38) defaulttype -> . VOID_TYPE
    (39) arraytype -> . LSQUARE arraytype RSQUARE
    (40) arraytype -> . defaulttype

    INT_TYPE        shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    BOOL_TYPE       shift and go to state 37
    VOID_TYPE       shift and go to state 38
    LSQUARE         shift and go to state 39

    types                          shift and go to state 106
    defaulttype                    shift and go to state 32
    arraytype                      shift and go to state 33

state 101

    (16) parameter -> VAR ID COLON . types
    (32) types -> . defaulttype
    (33) types -> . arraytype
    (34) defaulttype -> . INT_TYPE
    (35) defaulttype -> . FLOAT_TYPE
    (36) defaulttype -> . STRING_TYPE
    (37) defaulttype -> . BOOL_TYPE
    (38) defaulttype -> . VOID_TYPE
    (39) arraytype -> . LSQUARE arraytype RSQUARE
    (40) arraytype -> . defaulttype

    INT_TYPE        shift and go to state 34
    FLOAT_TYPE      shift and go to state 35
    STRING_TYPE     shift and go to state 36
    BOOL_TYPE       shift and go to state 37
    VOID_TYPE       shift and go to state 38
    LSQUARE         shift and go to state 39

    types                          shift and go to state 107
    defaulttype                    shift and go to state 32
    arraytype                      shift and go to state 33

state 102

    (8) constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .

    VAL             reduce using rule 8 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 8 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    ID              reduce using rule 8 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 8 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    $end            reduce using rule 8 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    IF              reduce using rule 8 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 8 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 8 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)


state 103

    (18) function_param_list_call -> expression COMMA function_param_list_call .

    RPAREN          reduce using rule 18 (function_param_list_call -> expression COMMA function_param_list_call .)


state 104

    (9) variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .

    VAL             reduce using rule 9 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 9 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    ID              reduce using rule 9 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 9 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    $end            reduce using rule 9 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    IF              reduce using rule 9 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 9 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 9 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)


state 105

    (11) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types . SEMICOLON
    (12) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types . LBRACE function_body RBRACE

    SEMICOLON       shift and go to state 108
    LBRACE          shift and go to state 109


state 106

    (15) parameter -> VAL ID COLON types .

    COMMA           reduce using rule 15 (parameter -> VAL ID COLON types .)
    RPAREN          reduce using rule 15 (parameter -> VAL ID COLON types .)


state 107

    (16) parameter -> VAR ID COLON types .

    COMMA           reduce using rule 16 (parameter -> VAR ID COLON types .)
    RPAREN          reduce using rule 16 (parameter -> VAR ID COLON types .)


state 108

    (11) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .

    VAL             reduce using rule 11 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    VAR             reduce using rule 11 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    ID              reduce using rule 11 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    FUNCTION        reduce using rule 11 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    $end            reduce using rule 11 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)


state 109

    (12) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE . function_body RBRACE
    (20) function_body -> . block_sequence
    (21) block_sequence -> . block block_sequence
    (22) block_sequence -> . block
    (23) block -> . constant_declaration
    (24) block -> . variable_declaration
    (25) block -> . var_const_update
    (26) block -> . if_block
    (27) block -> . while_block
    (28) block -> . function_call SEMICOLON
    (8) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (9) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (10) var_const_update -> . ID ASSIGN expression SEMICOLON
    (29) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (30) if_block -> . IF expression LBRACE block_sequence RBRACE
    (31) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    VAL             shift and go to state 7
    VAR             shift and go to state 9
    ID              shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121

    function_body                  shift and go to state 111
    block_sequence                 shift and go to state 112
    block                          shift and go to state 113
    constant_declaration           shift and go to state 114
    variable_declaration           shift and go to state 115
    var_const_update               shift and go to state 116
    if_block                       shift and go to state 117
    while_block                    shift and go to state 118
    function_call                  shift and go to state 119

state 110

    (10) var_const_update -> ID . ASSIGN expression SEMICOLON
    (17) function_call -> ID . LPAREN function_param_list_call RPAREN

    ASSIGN          shift and go to state 13
    LPAREN          shift and go to state 40


state 111

    (12) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body . RBRACE

    RBRACE          shift and go to state 122


state 112

    (20) function_body -> block_sequence .

    RBRACE          reduce using rule 20 (function_body -> block_sequence .)


state 113

    (21) block_sequence -> block . block_sequence
    (22) block_sequence -> block .
    (21) block_sequence -> . block block_sequence
    (22) block_sequence -> . block
    (23) block -> . constant_declaration
    (24) block -> . variable_declaration
    (25) block -> . var_const_update
    (26) block -> . if_block
    (27) block -> . while_block
    (28) block -> . function_call SEMICOLON
    (8) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (9) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (10) var_const_update -> . ID ASSIGN expression SEMICOLON
    (29) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (30) if_block -> . IF expression LBRACE block_sequence RBRACE
    (31) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    RBRACE          reduce using rule 22 (block_sequence -> block .)
    VAL             shift and go to state 7
    VAR             shift and go to state 9
    ID              shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121

    block                          shift and go to state 113
    block_sequence                 shift and go to state 123
    constant_declaration           shift and go to state 114
    variable_declaration           shift and go to state 115
    var_const_update               shift and go to state 116
    if_block                       shift and go to state 117
    while_block                    shift and go to state 118
    function_call                  shift and go to state 119

state 114

    (23) block -> constant_declaration .

    VAL             reduce using rule 23 (block -> constant_declaration .)
    VAR             reduce using rule 23 (block -> constant_declaration .)
    ID              reduce using rule 23 (block -> constant_declaration .)
    IF              reduce using rule 23 (block -> constant_declaration .)
    WHILE           reduce using rule 23 (block -> constant_declaration .)
    RBRACE          reduce using rule 23 (block -> constant_declaration .)


state 115

    (24) block -> variable_declaration .

    VAL             reduce using rule 24 (block -> variable_declaration .)
    VAR             reduce using rule 24 (block -> variable_declaration .)
    ID              reduce using rule 24 (block -> variable_declaration .)
    IF              reduce using rule 24 (block -> variable_declaration .)
    WHILE           reduce using rule 24 (block -> variable_declaration .)
    RBRACE          reduce using rule 24 (block -> variable_declaration .)


state 116

    (25) block -> var_const_update .

    VAL             reduce using rule 25 (block -> var_const_update .)
    VAR             reduce using rule 25 (block -> var_const_update .)
    ID              reduce using rule 25 (block -> var_const_update .)
    IF              reduce using rule 25 (block -> var_const_update .)
    WHILE           reduce using rule 25 (block -> var_const_update .)
    RBRACE          reduce using rule 25 (block -> var_const_update .)


state 117

    (26) block -> if_block .

    VAL             reduce using rule 26 (block -> if_block .)
    VAR             reduce using rule 26 (block -> if_block .)
    ID              reduce using rule 26 (block -> if_block .)
    IF              reduce using rule 26 (block -> if_block .)
    WHILE           reduce using rule 26 (block -> if_block .)
    RBRACE          reduce using rule 26 (block -> if_block .)


state 118

    (27) block -> while_block .

    VAL             reduce using rule 27 (block -> while_block .)
    VAR             reduce using rule 27 (block -> while_block .)
    ID              reduce using rule 27 (block -> while_block .)
    IF              reduce using rule 27 (block -> while_block .)
    WHILE           reduce using rule 27 (block -> while_block .)
    RBRACE          reduce using rule 27 (block -> while_block .)


state 119

    (28) block -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 124


state 120

    (29) if_block -> IF . expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (30) if_block -> IF . expression LBRACE block_sequence RBRACE
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 125
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 121

    (31) while_block -> WHILE . expression LBRACE block_sequence RBRACE
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIVIDE expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression POWER expression
    (54) expression -> . expression EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression GREATER_THAN expression
    (57) expression -> . expression GREATER_THAN_EQUAL expression
    (58) expression -> . expression LESS_THAN expression
    (59) expression -> . expression LESS_THAN_EQUAL expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . NOT expression
    (63) expression -> . typeliterals
    (64) expression -> . arrayliterals
    (65) expression -> . function_call
    (66) expression -> . ID
    (67) expression -> . LPAREN expression RPAREN
    (41) typeliterals -> . INTEGER_LITERAL
    (42) typeliterals -> . FLOAT_LITERAL
    (43) typeliterals -> . STRING_LITERAL
    (44) typeliterals -> . BOOL_LITERAL
    (45) arrayliterals -> . LSQUARE array_values RSQUARE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 19
    ID              shift and go to state 17
    LPAREN          shift and go to state 23
    INTEGER_LITERAL shift and go to state 24
    FLOAT_LITERAL   shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    BOOL_LITERAL    shift and go to state 27
    LSQUARE         shift and go to state 28

    expression                     shift and go to state 126
    typeliterals                   shift and go to state 20
    arrayliterals                  shift and go to state 21
    function_call                  shift and go to state 22

state 122

    (12) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .

    VAL             reduce using rule 12 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    VAR             reduce using rule 12 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    ID              reduce using rule 12 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    FUNCTION        reduce using rule 12 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    $end            reduce using rule 12 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)


state 123

    (21) block_sequence -> block block_sequence .

    RBRACE          reduce using rule 21 (block_sequence -> block block_sequence .)


state 124

    (28) block -> function_call SEMICOLON .

    VAL             reduce using rule 28 (block -> function_call SEMICOLON .)
    VAR             reduce using rule 28 (block -> function_call SEMICOLON .)
    ID              reduce using rule 28 (block -> function_call SEMICOLON .)
    IF              reduce using rule 28 (block -> function_call SEMICOLON .)
    WHILE           reduce using rule 28 (block -> function_call SEMICOLON .)
    RBRACE          reduce using rule 28 (block -> function_call SEMICOLON .)


state 125

    (29) if_block -> IF expression . LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (30) if_block -> IF expression . LBRACE block_sequence RBRACE
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    LBRACE          shift and go to state 127
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47
    EQUAL           shift and go to state 48
    NOT_EQUAL       shift and go to state 49
    GREATER_THAN    shift and go to state 50
    GREATER_THAN_EQUAL shift and go to state 51
    LESS_THAN       shift and go to state 52
    LESS_THAN_EQUAL shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 126

    (31) while_block -> WHILE expression . LBRACE block_sequence RBRACE
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIVIDE expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . POWER expression
    (54) expression -> expression . EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . GREATER_THAN expression
    (57) expression -> expression . GREATER_THAN_EQUAL expression
    (58) expression -> expression . LESS_THAN expression
    (59) expression -> expression . LESS_THAN_EQUAL expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression

    LBRACE          shift and go to state 128
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    POWER           shift and go to state 47
    EQUAL           shift and go to state 48
    NOT_EQUAL       shift and go to state 49
    GREATER_THAN    shift and go to state 50
    GREATER_THAN_EQUAL shift and go to state 51
    LESS_THAN       shift and go to state 52
    LESS_THAN_EQUAL shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 127

    (29) if_block -> IF expression LBRACE . block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (30) if_block -> IF expression LBRACE . block_sequence RBRACE
    (21) block_sequence -> . block block_sequence
    (22) block_sequence -> . block
    (23) block -> . constant_declaration
    (24) block -> . variable_declaration
    (25) block -> . var_const_update
    (26) block -> . if_block
    (27) block -> . while_block
    (28) block -> . function_call SEMICOLON
    (8) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (9) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (10) var_const_update -> . ID ASSIGN expression SEMICOLON
    (29) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (30) if_block -> . IF expression LBRACE block_sequence RBRACE
    (31) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    VAL             shift and go to state 7
    VAR             shift and go to state 9
    ID              shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121

    block_sequence                 shift and go to state 129
    block                          shift and go to state 113
    constant_declaration           shift and go to state 114
    variable_declaration           shift and go to state 115
    var_const_update               shift and go to state 116
    if_block                       shift and go to state 117
    while_block                    shift and go to state 118
    function_call                  shift and go to state 119

state 128

    (31) while_block -> WHILE expression LBRACE . block_sequence RBRACE
    (21) block_sequence -> . block block_sequence
    (22) block_sequence -> . block
    (23) block -> . constant_declaration
    (24) block -> . variable_declaration
    (25) block -> . var_const_update
    (26) block -> . if_block
    (27) block -> . while_block
    (28) block -> . function_call SEMICOLON
    (8) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (9) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (10) var_const_update -> . ID ASSIGN expression SEMICOLON
    (29) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (30) if_block -> . IF expression LBRACE block_sequence RBRACE
    (31) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    VAL             shift and go to state 7
    VAR             shift and go to state 9
    ID              shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121

    block_sequence                 shift and go to state 130
    block                          shift and go to state 113
    constant_declaration           shift and go to state 114
    variable_declaration           shift and go to state 115
    var_const_update               shift and go to state 116
    if_block                       shift and go to state 117
    while_block                    shift and go to state 118
    function_call                  shift and go to state 119

state 129

    (29) if_block -> IF expression LBRACE block_sequence . RBRACE ELSE LBRACE block_sequence RBRACE
    (30) if_block -> IF expression LBRACE block_sequence . RBRACE

    RBRACE          shift and go to state 131


state 130

    (31) while_block -> WHILE expression LBRACE block_sequence . RBRACE

    RBRACE          shift and go to state 132


state 131

    (29) if_block -> IF expression LBRACE block_sequence RBRACE . ELSE LBRACE block_sequence RBRACE
    (30) if_block -> IF expression LBRACE block_sequence RBRACE .

    ELSE            shift and go to state 133
    VAL             reduce using rule 30 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    VAR             reduce using rule 30 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    ID              reduce using rule 30 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    IF              reduce using rule 30 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    WHILE           reduce using rule 30 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    RBRACE          reduce using rule 30 (if_block -> IF expression LBRACE block_sequence RBRACE .)


state 132

    (31) while_block -> WHILE expression LBRACE block_sequence RBRACE .

    VAL             reduce using rule 31 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    VAR             reduce using rule 31 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    ID              reduce using rule 31 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    IF              reduce using rule 31 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    WHILE           reduce using rule 31 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    RBRACE          reduce using rule 31 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)


state 133

    (29) if_block -> IF expression LBRACE block_sequence RBRACE ELSE . LBRACE block_sequence RBRACE

    LBRACE          shift and go to state 134


state 134

    (29) if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE . block_sequence RBRACE
    (21) block_sequence -> . block block_sequence
    (22) block_sequence -> . block
    (23) block -> . constant_declaration
    (24) block -> . variable_declaration
    (25) block -> . var_const_update
    (26) block -> . if_block
    (27) block -> . while_block
    (28) block -> . function_call SEMICOLON
    (8) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (9) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (10) var_const_update -> . ID ASSIGN expression SEMICOLON
    (29) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (30) if_block -> . IF expression LBRACE block_sequence RBRACE
    (31) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (17) function_call -> . ID LPAREN function_param_list_call RPAREN

    VAL             shift and go to state 7
    VAR             shift and go to state 9
    ID              shift and go to state 110
    IF              shift and go to state 120
    WHILE           shift and go to state 121

    block_sequence                 shift and go to state 135
    block                          shift and go to state 113
    constant_declaration           shift and go to state 114
    variable_declaration           shift and go to state 115
    var_const_update               shift and go to state 116
    if_block                       shift and go to state 117
    while_block                    shift and go to state 118
    function_call                  shift and go to state 119

state 135

    (29) if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence . RBRACE

    RBRACE          shift and go to state 136


state 136

    (29) if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .

    VAL             reduce using rule 29 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    VAR             reduce using rule 29 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    ID              reduce using rule 29 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    IF              reduce using rule 29 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    WHILE           reduce using rule 29 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    RBRACE          reduce using rule 29 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAL in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for VAL in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (main_block_sequence -> main_block)
WARNING: rejected rule (main_block -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 32 resolved using rule (types -> defaulttype)
WARNING: rejected rule (arraytype -> defaulttype) in state 32
