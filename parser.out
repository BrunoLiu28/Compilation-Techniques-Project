Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> main_block_sequence
Rule 1     main_block_sequence -> main_block main_block_sequence
Rule 2     main_block_sequence -> main_block
Rule 3     comment -> COMMENT STRING_LITERAL
Rule 4     main_block -> constant_declaration
Rule 5     main_block -> variable_declaration
Rule 6     main_block -> var_const_update
Rule 7     main_block -> function_declaration
Rule 8     main_block -> main_function
Rule 9     main_block -> comment
Rule 10    constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON
Rule 11    variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON
Rule 12    var_const_update -> ID ASSIGN expression SEMICOLON
Rule 13    var_const_update -> arrayaccess ASSIGN expression SEMICOLON
Rule 14    function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON
Rule 15    function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE
Rule 16    main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE
Rule 17    function_param_list -> parameter COMMA function_param_list
Rule 18    function_param_list -> parameter
Rule 19    parameter -> VAL ID COLON types
Rule 20    parameter -> VAR ID COLON types
Rule 21    function_call -> ID LPAREN function_param_list_call RPAREN
Rule 22    function_param_list_call -> expression COMMA function_param_list_call
Rule 23    function_param_list_call -> expression
Rule 24    function_body -> block_sequence
Rule 25    block_sequence -> block block_sequence
Rule 26    block_sequence -> block
Rule 27    block -> constant_declaration
Rule 28    block -> variable_declaration
Rule 29    block -> var_const_update
Rule 30    block -> if_block
Rule 31    block -> while_block
Rule 32    block -> function_call SEMICOLON
Rule 33    block -> comment
Rule 34    if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
Rule 35    if_block -> IF expression LBRACE block_sequence RBRACE
Rule 36    while_block -> WHILE expression LBRACE block_sequence RBRACE
Rule 37    types -> defaulttype
Rule 38    types -> arraytype
Rule 39    defaulttype -> INT_TYPE
Rule 40    defaulttype -> FLOAT_TYPE
Rule 41    defaulttype -> STRING_TYPE
Rule 42    defaulttype -> BOOL_TYPE
Rule 43    defaulttype -> VOID_TYPE
Rule 44    arraytype -> LSQUARE arraytype RSQUARE
Rule 45    arraytype -> defaulttype
Rule 46    typeliterals -> INTEGER_LITERAL
Rule 47    typeliterals -> FLOAT_LITERAL
Rule 48    typeliterals -> STRING_LITERAL
Rule 49    typeliterals -> BOOL_LITERAL
Rule 50    arrayliterals -> LSQUARE array_values RSQUARE
Rule 51    array_values -> array_values COMMA expression
Rule 52    array_values -> expression
Rule 53    arrayaccess -> ID LSQUARE expression RSQUARE
Rule 54    arrayaccess -> function_call LSQUARE expression RSQUARE
Rule 55    expression -> expression PLUS expression
Rule 56    expression -> expression MINUS expression
Rule 57    expression -> expression TIMES expression
Rule 58    expression -> expression DIVIDE expression
Rule 59    expression -> expression MOD expression
Rule 60    expression -> expression POWER expression
Rule 61    expression -> expression EQUAL expression
Rule 62    expression -> expression NOT_EQUAL expression
Rule 63    expression -> expression GREATER_THAN expression
Rule 64    expression -> expression GREATER_THAN_EQUAL expression
Rule 65    expression -> expression LESS_THAN expression
Rule 66    expression -> expression LESS_THAN_EQUAL expression
Rule 67    expression -> expression AND expression
Rule 68    expression -> expression OR expression
Rule 69    expression -> NOT expression
Rule 70    expression -> MINUS expression
Rule 71    expression -> typeliterals
Rule 72    expression -> arrayliterals
Rule 73    expression -> arrayaccess
Rule 74    expression -> function_call
Rule 75    expression -> ID
Rule 76    expression -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 67
ASSIGN               : 10 11 12 13
BOOL_LITERAL         : 49
BOOL_TYPE            : 42
COLON                : 10 11 14 15 19 20
COMMA                : 17 22 51
COMMENT              : 3
DIVIDE               : 58
ELSE                 : 34
EQUAL                : 61
FLOAT_LITERAL        : 47
FLOAT_TYPE           : 40
FUNCTION             : 14 15 16
GREATER_THAN         : 63
GREATER_THAN_EQUAL   : 64
ID                   : 10 11 12 14 15 19 20 21 53 75
IF                   : 34 35
INTEGER_LITERAL      : 46
INT_TYPE             : 39
LBRACE               : 15 16 34 34 35 36
LESS_THAN            : 65
LESS_THAN_EQUAL      : 66
LPAREN               : 14 15 16 21 76
LSQUARE              : 44 50 53 54
MAIN                 : 16
MINUS                : 56 70
MOD                  : 59
NOT                  : 69
NOT_EQUAL            : 62
OR                   : 68
PLUS                 : 55
POWER                : 60
RBRACE               : 15 16 34 34 35 36
RPAREN               : 14 15 16 21 76
RSQUARE              : 44 50 53 54
SEMICOLON            : 10 11 12 13 14 32
STRING_LITERAL       : 3 48
STRING_TYPE          : 41
TIMES                : 57
VAL                  : 10 19
VAR                  : 11 20
VOID_TYPE            : 43
WHILE                : 36
error                : 

Nonterminals, with rules where they appear

array_values         : 50 51
arrayaccess          : 13 73
arrayliterals        : 72
arraytype            : 38 44
block                : 25 26
block_sequence       : 24 25 34 34 35 36
comment              : 9 33
constant_declaration : 4 27
defaulttype          : 37 45
expression           : 10 11 12 13 22 23 34 35 36 51 52 53 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 70 76
function_body        : 15 16
function_call        : 32 54 74
function_declaration : 7
function_param_list  : 14 15 16 17
function_param_list_call : 21 22
if_block             : 30
main_block           : 1 2
main_block_sequence  : 1 0
main_function        : 8
parameter            : 17 18
typeliterals         : 71
types                : 10 11 14 15 19 20
var_const_update     : 6 29
variable_declaration : 5 28
while_block          : 31

Parsing method: LALR

state 0

    (0) S' -> . main_block_sequence
    (1) main_block_sequence -> . main_block main_block_sequence
    (2) main_block_sequence -> . main_block
    (4) main_block -> . constant_declaration
    (5) main_block -> . variable_declaration
    (6) main_block -> . var_const_update
    (7) main_block -> . function_declaration
    (8) main_block -> . main_function
    (9) main_block -> . comment
    (10) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (11) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (12) var_const_update -> . ID ASSIGN expression SEMICOLON
    (13) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (14) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON
    (15) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE
    (16) main_function -> . FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE
    (3) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    VAL             shift and go to state 9
    VAR             shift and go to state 11
    ID              shift and go to state 10
    FUNCTION        shift and go to state 13
    COMMENT         shift and go to state 14

    main_block_sequence            shift and go to state 1
    main_block                     shift and go to state 2
    constant_declaration           shift and go to state 3
    variable_declaration           shift and go to state 4
    var_const_update               shift and go to state 5
    function_declaration           shift and go to state 6
    main_function                  shift and go to state 7
    comment                        shift and go to state 8
    arrayaccess                    shift and go to state 12
    function_call                  shift and go to state 15

state 1

    (0) S' -> main_block_sequence .



state 2

    (1) main_block_sequence -> main_block . main_block_sequence
    (2) main_block_sequence -> main_block .
    (1) main_block_sequence -> . main_block main_block_sequence
    (2) main_block_sequence -> . main_block
    (4) main_block -> . constant_declaration
    (5) main_block -> . variable_declaration
    (6) main_block -> . var_const_update
    (7) main_block -> . function_declaration
    (8) main_block -> . main_function
    (9) main_block -> . comment
    (10) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (11) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (12) var_const_update -> . ID ASSIGN expression SEMICOLON
    (13) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (14) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON
    (15) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE
    (16) main_function -> . FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE
    (3) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    $end            reduce using rule 2 (main_block_sequence -> main_block .)
    VAL             shift and go to state 9
    VAR             shift and go to state 11
    ID              shift and go to state 10
    FUNCTION        shift and go to state 13
    COMMENT         shift and go to state 14

    main_block                     shift and go to state 2
    main_block_sequence            shift and go to state 16
    constant_declaration           shift and go to state 3
    variable_declaration           shift and go to state 4
    var_const_update               shift and go to state 5
    function_declaration           shift and go to state 6
    main_function                  shift and go to state 7
    comment                        shift and go to state 8
    arrayaccess                    shift and go to state 12
    function_call                  shift and go to state 15

state 3

    (4) main_block -> constant_declaration .

    VAL             reduce using rule 4 (main_block -> constant_declaration .)
    VAR             reduce using rule 4 (main_block -> constant_declaration .)
    ID              reduce using rule 4 (main_block -> constant_declaration .)
    FUNCTION        reduce using rule 4 (main_block -> constant_declaration .)
    COMMENT         reduce using rule 4 (main_block -> constant_declaration .)
    $end            reduce using rule 4 (main_block -> constant_declaration .)


state 4

    (5) main_block -> variable_declaration .

    VAL             reduce using rule 5 (main_block -> variable_declaration .)
    VAR             reduce using rule 5 (main_block -> variable_declaration .)
    ID              reduce using rule 5 (main_block -> variable_declaration .)
    FUNCTION        reduce using rule 5 (main_block -> variable_declaration .)
    COMMENT         reduce using rule 5 (main_block -> variable_declaration .)
    $end            reduce using rule 5 (main_block -> variable_declaration .)


state 5

    (6) main_block -> var_const_update .

    VAL             reduce using rule 6 (main_block -> var_const_update .)
    VAR             reduce using rule 6 (main_block -> var_const_update .)
    ID              reduce using rule 6 (main_block -> var_const_update .)
    FUNCTION        reduce using rule 6 (main_block -> var_const_update .)
    COMMENT         reduce using rule 6 (main_block -> var_const_update .)
    $end            reduce using rule 6 (main_block -> var_const_update .)


state 6

    (7) main_block -> function_declaration .

    VAL             reduce using rule 7 (main_block -> function_declaration .)
    VAR             reduce using rule 7 (main_block -> function_declaration .)
    ID              reduce using rule 7 (main_block -> function_declaration .)
    FUNCTION        reduce using rule 7 (main_block -> function_declaration .)
    COMMENT         reduce using rule 7 (main_block -> function_declaration .)
    $end            reduce using rule 7 (main_block -> function_declaration .)


state 7

    (8) main_block -> main_function .

    VAL             reduce using rule 8 (main_block -> main_function .)
    VAR             reduce using rule 8 (main_block -> main_function .)
    ID              reduce using rule 8 (main_block -> main_function .)
    FUNCTION        reduce using rule 8 (main_block -> main_function .)
    COMMENT         reduce using rule 8 (main_block -> main_function .)
    $end            reduce using rule 8 (main_block -> main_function .)


state 8

    (9) main_block -> comment .

    VAL             reduce using rule 9 (main_block -> comment .)
    VAR             reduce using rule 9 (main_block -> comment .)
    ID              reduce using rule 9 (main_block -> comment .)
    FUNCTION        reduce using rule 9 (main_block -> comment .)
    COMMENT         reduce using rule 9 (main_block -> comment .)
    $end            reduce using rule 9 (main_block -> comment .)


state 9

    (10) constant_declaration -> VAL . ID COLON types ASSIGN expression SEMICOLON

    ID              shift and go to state 17


state 10

    (12) var_const_update -> ID . ASSIGN expression SEMICOLON
    (53) arrayaccess -> ID . LSQUARE expression RSQUARE
    (21) function_call -> ID . LPAREN function_param_list_call RPAREN

    ASSIGN          shift and go to state 18
    LSQUARE         shift and go to state 19
    LPAREN          shift and go to state 20


state 11

    (11) variable_declaration -> VAR . ID COLON types ASSIGN expression SEMICOLON

    ID              shift and go to state 21


state 12

    (13) var_const_update -> arrayaccess . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 22


state 13

    (14) function_declaration -> FUNCTION . ID LPAREN function_param_list RPAREN COLON types SEMICOLON
    (15) function_declaration -> FUNCTION . ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE
    (16) main_function -> FUNCTION . MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE

    ID              shift and go to state 23
    MAIN            shift and go to state 24


state 14

    (3) comment -> COMMENT . STRING_LITERAL

    STRING_LITERAL  shift and go to state 25


state 15

    (54) arrayaccess -> function_call . LSQUARE expression RSQUARE

    LSQUARE         shift and go to state 26


state 16

    (1) main_block_sequence -> main_block main_block_sequence .

    $end            reduce using rule 1 (main_block_sequence -> main_block main_block_sequence .)


state 17

    (10) constant_declaration -> VAL ID . COLON types ASSIGN expression SEMICOLON

    COLON           shift and go to state 27


state 18

    (12) var_const_update -> ID ASSIGN . expression SEMICOLON
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 29
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 19

    (53) arrayaccess -> ID LSQUARE . expression RSQUARE
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 42
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 20

    (21) function_call -> ID LPAREN . function_param_list_call RPAREN
    (22) function_param_list_call -> . expression COMMA function_param_list_call
    (23) function_param_list_call -> . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    function_param_list_call       shift and go to state 43
    expression                     shift and go to state 44
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 21

    (11) variable_declaration -> VAR ID . COLON types ASSIGN expression SEMICOLON

    COLON           shift and go to state 45


state 22

    (13) var_const_update -> arrayaccess ASSIGN . expression SEMICOLON
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    arrayaccess                    shift and go to state 34
    expression                     shift and go to state 46
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    function_call                  shift and go to state 35

state 23

    (14) function_declaration -> FUNCTION ID . LPAREN function_param_list RPAREN COLON types SEMICOLON
    (15) function_declaration -> FUNCTION ID . LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE

    LPAREN          shift and go to state 47


state 24

    (16) main_function -> FUNCTION MAIN . LPAREN function_param_list RPAREN LBRACE function_body RBRACE

    LPAREN          shift and go to state 48


state 25

    (3) comment -> COMMENT STRING_LITERAL .

    VAL             reduce using rule 3 (comment -> COMMENT STRING_LITERAL .)
    VAR             reduce using rule 3 (comment -> COMMENT STRING_LITERAL .)
    ID              reduce using rule 3 (comment -> COMMENT STRING_LITERAL .)
    FUNCTION        reduce using rule 3 (comment -> COMMENT STRING_LITERAL .)
    COMMENT         reduce using rule 3 (comment -> COMMENT STRING_LITERAL .)
    $end            reduce using rule 3 (comment -> COMMENT STRING_LITERAL .)
    IF              reduce using rule 3 (comment -> COMMENT STRING_LITERAL .)
    WHILE           reduce using rule 3 (comment -> COMMENT STRING_LITERAL .)
    RBRACE          reduce using rule 3 (comment -> COMMENT STRING_LITERAL .)


state 26

    (54) arrayaccess -> function_call LSQUARE . expression RSQUARE
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    function_call                  shift and go to state 35
    expression                     shift and go to state 49
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34

state 27

    (10) constant_declaration -> VAL ID COLON . types ASSIGN expression SEMICOLON
    (37) types -> . defaulttype
    (38) types -> . arraytype
    (39) defaulttype -> . INT_TYPE
    (40) defaulttype -> . FLOAT_TYPE
    (41) defaulttype -> . STRING_TYPE
    (42) defaulttype -> . BOOL_TYPE
    (43) defaulttype -> . VOID_TYPE
    (44) arraytype -> . LSQUARE arraytype RSQUARE
    (45) arraytype -> . defaulttype

    INT_TYPE        shift and go to state 53
    FLOAT_TYPE      shift and go to state 54
    STRING_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VOID_TYPE       shift and go to state 57
    LSQUARE         shift and go to state 58

    types                          shift and go to state 50
    defaulttype                    shift and go to state 51
    arraytype                      shift and go to state 52

state 28

    (75) expression -> ID .
    (53) arrayaccess -> ID . LSQUARE expression RSQUARE
    (21) function_call -> ID . LPAREN function_param_list_call RPAREN

    SEMICOLON       reduce using rule 75 (expression -> ID .)
    PLUS            reduce using rule 75 (expression -> ID .)
    MINUS           reduce using rule 75 (expression -> ID .)
    TIMES           reduce using rule 75 (expression -> ID .)
    DIVIDE          reduce using rule 75 (expression -> ID .)
    MOD             reduce using rule 75 (expression -> ID .)
    POWER           reduce using rule 75 (expression -> ID .)
    EQUAL           reduce using rule 75 (expression -> ID .)
    NOT_EQUAL       reduce using rule 75 (expression -> ID .)
    GREATER_THAN    reduce using rule 75 (expression -> ID .)
    GREATER_THAN_EQUAL reduce using rule 75 (expression -> ID .)
    LESS_THAN       reduce using rule 75 (expression -> ID .)
    LESS_THAN_EQUAL reduce using rule 75 (expression -> ID .)
    AND             reduce using rule 75 (expression -> ID .)
    OR              reduce using rule 75 (expression -> ID .)
    RSQUARE         reduce using rule 75 (expression -> ID .)
    COMMA           reduce using rule 75 (expression -> ID .)
    RPAREN          reduce using rule 75 (expression -> ID .)
    LBRACE          reduce using rule 75 (expression -> ID .)
    LSQUARE         shift and go to state 19
    LPAREN          shift and go to state 20


state 29

    (12) var_const_update -> ID ASSIGN expression . SEMICOLON
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 30

    (70) expression -> MINUS . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 74
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 31

    (69) expression -> NOT . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 75
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 32

    (71) expression -> typeliterals .

    SEMICOLON       reduce using rule 71 (expression -> typeliterals .)
    PLUS            reduce using rule 71 (expression -> typeliterals .)
    MINUS           reduce using rule 71 (expression -> typeliterals .)
    TIMES           reduce using rule 71 (expression -> typeliterals .)
    DIVIDE          reduce using rule 71 (expression -> typeliterals .)
    MOD             reduce using rule 71 (expression -> typeliterals .)
    POWER           reduce using rule 71 (expression -> typeliterals .)
    EQUAL           reduce using rule 71 (expression -> typeliterals .)
    NOT_EQUAL       reduce using rule 71 (expression -> typeliterals .)
    GREATER_THAN    reduce using rule 71 (expression -> typeliterals .)
    GREATER_THAN_EQUAL reduce using rule 71 (expression -> typeliterals .)
    LESS_THAN       reduce using rule 71 (expression -> typeliterals .)
    LESS_THAN_EQUAL reduce using rule 71 (expression -> typeliterals .)
    AND             reduce using rule 71 (expression -> typeliterals .)
    OR              reduce using rule 71 (expression -> typeliterals .)
    RSQUARE         reduce using rule 71 (expression -> typeliterals .)
    COMMA           reduce using rule 71 (expression -> typeliterals .)
    RPAREN          reduce using rule 71 (expression -> typeliterals .)
    LBRACE          reduce using rule 71 (expression -> typeliterals .)


state 33

    (72) expression -> arrayliterals .

    SEMICOLON       reduce using rule 72 (expression -> arrayliterals .)
    PLUS            reduce using rule 72 (expression -> arrayliterals .)
    MINUS           reduce using rule 72 (expression -> arrayliterals .)
    TIMES           reduce using rule 72 (expression -> arrayliterals .)
    DIVIDE          reduce using rule 72 (expression -> arrayliterals .)
    MOD             reduce using rule 72 (expression -> arrayliterals .)
    POWER           reduce using rule 72 (expression -> arrayliterals .)
    EQUAL           reduce using rule 72 (expression -> arrayliterals .)
    NOT_EQUAL       reduce using rule 72 (expression -> arrayliterals .)
    GREATER_THAN    reduce using rule 72 (expression -> arrayliterals .)
    GREATER_THAN_EQUAL reduce using rule 72 (expression -> arrayliterals .)
    LESS_THAN       reduce using rule 72 (expression -> arrayliterals .)
    LESS_THAN_EQUAL reduce using rule 72 (expression -> arrayliterals .)
    AND             reduce using rule 72 (expression -> arrayliterals .)
    OR              reduce using rule 72 (expression -> arrayliterals .)
    RSQUARE         reduce using rule 72 (expression -> arrayliterals .)
    COMMA           reduce using rule 72 (expression -> arrayliterals .)
    RPAREN          reduce using rule 72 (expression -> arrayliterals .)
    LBRACE          reduce using rule 72 (expression -> arrayliterals .)


state 34

    (73) expression -> arrayaccess .

    SEMICOLON       reduce using rule 73 (expression -> arrayaccess .)
    PLUS            reduce using rule 73 (expression -> arrayaccess .)
    MINUS           reduce using rule 73 (expression -> arrayaccess .)
    TIMES           reduce using rule 73 (expression -> arrayaccess .)
    DIVIDE          reduce using rule 73 (expression -> arrayaccess .)
    MOD             reduce using rule 73 (expression -> arrayaccess .)
    POWER           reduce using rule 73 (expression -> arrayaccess .)
    EQUAL           reduce using rule 73 (expression -> arrayaccess .)
    NOT_EQUAL       reduce using rule 73 (expression -> arrayaccess .)
    GREATER_THAN    reduce using rule 73 (expression -> arrayaccess .)
    GREATER_THAN_EQUAL reduce using rule 73 (expression -> arrayaccess .)
    LESS_THAN       reduce using rule 73 (expression -> arrayaccess .)
    LESS_THAN_EQUAL reduce using rule 73 (expression -> arrayaccess .)
    AND             reduce using rule 73 (expression -> arrayaccess .)
    OR              reduce using rule 73 (expression -> arrayaccess .)
    RSQUARE         reduce using rule 73 (expression -> arrayaccess .)
    COMMA           reduce using rule 73 (expression -> arrayaccess .)
    RPAREN          reduce using rule 73 (expression -> arrayaccess .)
    LBRACE          reduce using rule 73 (expression -> arrayaccess .)


state 35

    (74) expression -> function_call .
    (54) arrayaccess -> function_call . LSQUARE expression RSQUARE

    SEMICOLON       reduce using rule 74 (expression -> function_call .)
    PLUS            reduce using rule 74 (expression -> function_call .)
    MINUS           reduce using rule 74 (expression -> function_call .)
    TIMES           reduce using rule 74 (expression -> function_call .)
    DIVIDE          reduce using rule 74 (expression -> function_call .)
    MOD             reduce using rule 74 (expression -> function_call .)
    POWER           reduce using rule 74 (expression -> function_call .)
    EQUAL           reduce using rule 74 (expression -> function_call .)
    NOT_EQUAL       reduce using rule 74 (expression -> function_call .)
    GREATER_THAN    reduce using rule 74 (expression -> function_call .)
    GREATER_THAN_EQUAL reduce using rule 74 (expression -> function_call .)
    LESS_THAN       reduce using rule 74 (expression -> function_call .)
    LESS_THAN_EQUAL reduce using rule 74 (expression -> function_call .)
    AND             reduce using rule 74 (expression -> function_call .)
    OR              reduce using rule 74 (expression -> function_call .)
    RSQUARE         reduce using rule 74 (expression -> function_call .)
    COMMA           reduce using rule 74 (expression -> function_call .)
    RPAREN          reduce using rule 74 (expression -> function_call .)
    LBRACE          reduce using rule 74 (expression -> function_call .)
    LSQUARE         shift and go to state 26


state 36

    (76) expression -> LPAREN . expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 76
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 37

    (46) typeliterals -> INTEGER_LITERAL .

    SEMICOLON       reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    PLUS            reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    MINUS           reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    TIMES           reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    DIVIDE          reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    MOD             reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    POWER           reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    EQUAL           reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    NOT_EQUAL       reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    GREATER_THAN    reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    LESS_THAN       reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    AND             reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    OR              reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    RSQUARE         reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    COMMA           reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    RPAREN          reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)
    LBRACE          reduce using rule 46 (typeliterals -> INTEGER_LITERAL .)


state 38

    (47) typeliterals -> FLOAT_LITERAL .

    SEMICOLON       reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    PLUS            reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    MINUS           reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    TIMES           reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    DIVIDE          reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    MOD             reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    POWER           reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    EQUAL           reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    NOT_EQUAL       reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    GREATER_THAN    reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    LESS_THAN       reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    AND             reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    OR              reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    RSQUARE         reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    COMMA           reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    RPAREN          reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)
    LBRACE          reduce using rule 47 (typeliterals -> FLOAT_LITERAL .)


state 39

    (48) typeliterals -> STRING_LITERAL .

    SEMICOLON       reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    PLUS            reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    MINUS           reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    TIMES           reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    DIVIDE          reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    MOD             reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    POWER           reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    EQUAL           reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    NOT_EQUAL       reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    GREATER_THAN    reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    LESS_THAN       reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    AND             reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    OR              reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    RSQUARE         reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    COMMA           reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    RPAREN          reduce using rule 48 (typeliterals -> STRING_LITERAL .)
    LBRACE          reduce using rule 48 (typeliterals -> STRING_LITERAL .)


state 40

    (49) typeliterals -> BOOL_LITERAL .

    SEMICOLON       reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    PLUS            reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    MINUS           reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    TIMES           reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    DIVIDE          reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    MOD             reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    POWER           reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    EQUAL           reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    NOT_EQUAL       reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    GREATER_THAN    reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    LESS_THAN       reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    AND             reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    OR              reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    RSQUARE         reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    COMMA           reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    RPAREN          reduce using rule 49 (typeliterals -> BOOL_LITERAL .)
    LBRACE          reduce using rule 49 (typeliterals -> BOOL_LITERAL .)


state 41

    (50) arrayliterals -> LSQUARE . array_values RSQUARE
    (51) array_values -> . array_values COMMA expression
    (52) array_values -> . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    array_values                   shift and go to state 77
    expression                     shift and go to state 78
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 42

    (53) arrayaccess -> ID LSQUARE expression . RSQUARE
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    RSQUARE         shift and go to state 79
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 43

    (21) function_call -> ID LPAREN function_param_list_call . RPAREN

    RPAREN          shift and go to state 80


state 44

    (22) function_param_list_call -> expression . COMMA function_param_list_call
    (23) function_param_list_call -> expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    COMMA           shift and go to state 81
    RPAREN          reduce using rule 23 (function_param_list_call -> expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 45

    (11) variable_declaration -> VAR ID COLON . types ASSIGN expression SEMICOLON
    (37) types -> . defaulttype
    (38) types -> . arraytype
    (39) defaulttype -> . INT_TYPE
    (40) defaulttype -> . FLOAT_TYPE
    (41) defaulttype -> . STRING_TYPE
    (42) defaulttype -> . BOOL_TYPE
    (43) defaulttype -> . VOID_TYPE
    (44) arraytype -> . LSQUARE arraytype RSQUARE
    (45) arraytype -> . defaulttype

    INT_TYPE        shift and go to state 53
    FLOAT_TYPE      shift and go to state 54
    STRING_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VOID_TYPE       shift and go to state 57
    LSQUARE         shift and go to state 58

    types                          shift and go to state 82
    defaulttype                    shift and go to state 51
    arraytype                      shift and go to state 52

state 46

    (13) var_const_update -> arrayaccess ASSIGN expression . SEMICOLON
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       shift and go to state 83
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 47

    (14) function_declaration -> FUNCTION ID LPAREN . function_param_list RPAREN COLON types SEMICOLON
    (15) function_declaration -> FUNCTION ID LPAREN . function_param_list RPAREN COLON types LBRACE function_body RBRACE
    (17) function_param_list -> . parameter COMMA function_param_list
    (18) function_param_list -> . parameter
    (19) parameter -> . VAL ID COLON types
    (20) parameter -> . VAR ID COLON types

    VAL             shift and go to state 86
    VAR             shift and go to state 87

    function_param_list            shift and go to state 84
    parameter                      shift and go to state 85

state 48

    (16) main_function -> FUNCTION MAIN LPAREN . function_param_list RPAREN LBRACE function_body RBRACE
    (17) function_param_list -> . parameter COMMA function_param_list
    (18) function_param_list -> . parameter
    (19) parameter -> . VAL ID COLON types
    (20) parameter -> . VAR ID COLON types

    VAL             shift and go to state 86
    VAR             shift and go to state 87

    function_param_list            shift and go to state 88
    parameter                      shift and go to state 85

state 49

    (54) arrayaccess -> function_call LSQUARE expression . RSQUARE
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    RSQUARE         shift and go to state 89
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 50

    (10) constant_declaration -> VAL ID COLON types . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 90


state 51

    (37) types -> defaulttype .
    (45) arraytype -> defaulttype .

  ! reduce/reduce conflict for ASSIGN resolved using rule 37 (types -> defaulttype .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 37 (types -> defaulttype .)
  ! reduce/reduce conflict for LBRACE resolved using rule 37 (types -> defaulttype .)
  ! reduce/reduce conflict for COMMA resolved using rule 37 (types -> defaulttype .)
  ! reduce/reduce conflict for RPAREN resolved using rule 37 (types -> defaulttype .)
    ASSIGN          reduce using rule 37 (types -> defaulttype .)
    SEMICOLON       reduce using rule 37 (types -> defaulttype .)
    LBRACE          reduce using rule 37 (types -> defaulttype .)
    COMMA           reduce using rule 37 (types -> defaulttype .)
    RPAREN          reduce using rule 37 (types -> defaulttype .)

  ! ASSIGN          [ reduce using rule 45 (arraytype -> defaulttype .) ]
  ! SEMICOLON       [ reduce using rule 45 (arraytype -> defaulttype .) ]
  ! LBRACE          [ reduce using rule 45 (arraytype -> defaulttype .) ]
  ! COMMA           [ reduce using rule 45 (arraytype -> defaulttype .) ]
  ! RPAREN          [ reduce using rule 45 (arraytype -> defaulttype .) ]


state 52

    (38) types -> arraytype .

    ASSIGN          reduce using rule 38 (types -> arraytype .)
    SEMICOLON       reduce using rule 38 (types -> arraytype .)
    LBRACE          reduce using rule 38 (types -> arraytype .)
    COMMA           reduce using rule 38 (types -> arraytype .)
    RPAREN          reduce using rule 38 (types -> arraytype .)


state 53

    (39) defaulttype -> INT_TYPE .

    ASSIGN          reduce using rule 39 (defaulttype -> INT_TYPE .)
    RSQUARE         reduce using rule 39 (defaulttype -> INT_TYPE .)
    SEMICOLON       reduce using rule 39 (defaulttype -> INT_TYPE .)
    LBRACE          reduce using rule 39 (defaulttype -> INT_TYPE .)
    COMMA           reduce using rule 39 (defaulttype -> INT_TYPE .)
    RPAREN          reduce using rule 39 (defaulttype -> INT_TYPE .)


state 54

    (40) defaulttype -> FLOAT_TYPE .

    ASSIGN          reduce using rule 40 (defaulttype -> FLOAT_TYPE .)
    RSQUARE         reduce using rule 40 (defaulttype -> FLOAT_TYPE .)
    SEMICOLON       reduce using rule 40 (defaulttype -> FLOAT_TYPE .)
    LBRACE          reduce using rule 40 (defaulttype -> FLOAT_TYPE .)
    COMMA           reduce using rule 40 (defaulttype -> FLOAT_TYPE .)
    RPAREN          reduce using rule 40 (defaulttype -> FLOAT_TYPE .)


state 55

    (41) defaulttype -> STRING_TYPE .

    ASSIGN          reduce using rule 41 (defaulttype -> STRING_TYPE .)
    RSQUARE         reduce using rule 41 (defaulttype -> STRING_TYPE .)
    SEMICOLON       reduce using rule 41 (defaulttype -> STRING_TYPE .)
    LBRACE          reduce using rule 41 (defaulttype -> STRING_TYPE .)
    COMMA           reduce using rule 41 (defaulttype -> STRING_TYPE .)
    RPAREN          reduce using rule 41 (defaulttype -> STRING_TYPE .)


state 56

    (42) defaulttype -> BOOL_TYPE .

    ASSIGN          reduce using rule 42 (defaulttype -> BOOL_TYPE .)
    RSQUARE         reduce using rule 42 (defaulttype -> BOOL_TYPE .)
    SEMICOLON       reduce using rule 42 (defaulttype -> BOOL_TYPE .)
    LBRACE          reduce using rule 42 (defaulttype -> BOOL_TYPE .)
    COMMA           reduce using rule 42 (defaulttype -> BOOL_TYPE .)
    RPAREN          reduce using rule 42 (defaulttype -> BOOL_TYPE .)


state 57

    (43) defaulttype -> VOID_TYPE .

    ASSIGN          reduce using rule 43 (defaulttype -> VOID_TYPE .)
    RSQUARE         reduce using rule 43 (defaulttype -> VOID_TYPE .)
    SEMICOLON       reduce using rule 43 (defaulttype -> VOID_TYPE .)
    LBRACE          reduce using rule 43 (defaulttype -> VOID_TYPE .)
    COMMA           reduce using rule 43 (defaulttype -> VOID_TYPE .)
    RPAREN          reduce using rule 43 (defaulttype -> VOID_TYPE .)


state 58

    (44) arraytype -> LSQUARE . arraytype RSQUARE
    (44) arraytype -> . LSQUARE arraytype RSQUARE
    (45) arraytype -> . defaulttype
    (39) defaulttype -> . INT_TYPE
    (40) defaulttype -> . FLOAT_TYPE
    (41) defaulttype -> . STRING_TYPE
    (42) defaulttype -> . BOOL_TYPE
    (43) defaulttype -> . VOID_TYPE

    LSQUARE         shift and go to state 58
    INT_TYPE        shift and go to state 53
    FLOAT_TYPE      shift and go to state 54
    STRING_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VOID_TYPE       shift and go to state 57

    arraytype                      shift and go to state 91
    defaulttype                    shift and go to state 92

state 59

    (12) var_const_update -> ID ASSIGN expression SEMICOLON .

    VAL             reduce using rule 12 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 12 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 12 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 12 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 12 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 12 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 12 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 12 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 12 (var_const_update -> ID ASSIGN expression SEMICOLON .)


state 60

    (55) expression -> expression PLUS . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 93
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 61

    (56) expression -> expression MINUS . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 94
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 62

    (57) expression -> expression TIMES . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 95
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 63

    (58) expression -> expression DIVIDE . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 96
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 64

    (59) expression -> expression MOD . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 97
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 65

    (60) expression -> expression POWER . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 98
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 66

    (61) expression -> expression EQUAL . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 99
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 67

    (62) expression -> expression NOT_EQUAL . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 100
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 68

    (63) expression -> expression GREATER_THAN . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 101
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 69

    (64) expression -> expression GREATER_THAN_EQUAL . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 102
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 70

    (65) expression -> expression LESS_THAN . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 103
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 71

    (66) expression -> expression LESS_THAN_EQUAL . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 104
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 72

    (67) expression -> expression AND . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 105
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 73

    (68) expression -> expression OR . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 106
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 74

    (70) expression -> MINUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 70 (expression -> MINUS expression .)
    PLUS            reduce using rule 70 (expression -> MINUS expression .)
    MINUS           reduce using rule 70 (expression -> MINUS expression .)
    EQUAL           reduce using rule 70 (expression -> MINUS expression .)
    NOT_EQUAL       reduce using rule 70 (expression -> MINUS expression .)
    GREATER_THAN    reduce using rule 70 (expression -> MINUS expression .)
    GREATER_THAN_EQUAL reduce using rule 70 (expression -> MINUS expression .)
    LESS_THAN       reduce using rule 70 (expression -> MINUS expression .)
    LESS_THAN_EQUAL reduce using rule 70 (expression -> MINUS expression .)
    AND             reduce using rule 70 (expression -> MINUS expression .)
    OR              reduce using rule 70 (expression -> MINUS expression .)
    RSQUARE         reduce using rule 70 (expression -> MINUS expression .)
    COMMA           reduce using rule 70 (expression -> MINUS expression .)
    RPAREN          reduce using rule 70 (expression -> MINUS expression .)
    LBRACE          reduce using rule 70 (expression -> MINUS expression .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65

  ! TIMES           [ reduce using rule 70 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> MINUS expression .) ]
  ! MOD             [ reduce using rule 70 (expression -> MINUS expression .) ]
  ! POWER           [ reduce using rule 70 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 75

    (69) expression -> NOT expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 69 (expression -> NOT expression .)
    PLUS            reduce using rule 69 (expression -> NOT expression .)
    MINUS           reduce using rule 69 (expression -> NOT expression .)
    TIMES           reduce using rule 69 (expression -> NOT expression .)
    DIVIDE          reduce using rule 69 (expression -> NOT expression .)
    MOD             reduce using rule 69 (expression -> NOT expression .)
    POWER           reduce using rule 69 (expression -> NOT expression .)
    EQUAL           reduce using rule 69 (expression -> NOT expression .)
    NOT_EQUAL       reduce using rule 69 (expression -> NOT expression .)
    GREATER_THAN    reduce using rule 69 (expression -> NOT expression .)
    GREATER_THAN_EQUAL reduce using rule 69 (expression -> NOT expression .)
    LESS_THAN       reduce using rule 69 (expression -> NOT expression .)
    LESS_THAN_EQUAL reduce using rule 69 (expression -> NOT expression .)
    AND             reduce using rule 69 (expression -> NOT expression .)
    OR              reduce using rule 69 (expression -> NOT expression .)
    RSQUARE         reduce using rule 69 (expression -> NOT expression .)
    COMMA           reduce using rule 69 (expression -> NOT expression .)
    RPAREN          reduce using rule 69 (expression -> NOT expression .)
    LBRACE          reduce using rule 69 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! MOD             [ shift and go to state 64 ]
  ! POWER           [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 76

    (76) expression -> LPAREN expression . RPAREN
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    RPAREN          shift and go to state 107
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 77

    (50) arrayliterals -> LSQUARE array_values . RSQUARE
    (51) array_values -> array_values . COMMA expression

    RSQUARE         shift and go to state 108
    COMMA           shift and go to state 109


state 78

    (52) array_values -> expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    RSQUARE         reduce using rule 52 (array_values -> expression .)
    COMMA           reduce using rule 52 (array_values -> expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 79

    (53) arrayaccess -> ID LSQUARE expression RSQUARE .

    ASSIGN          reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    SEMICOLON       reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    PLUS            reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    MINUS           reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    TIMES           reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    DIVIDE          reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    MOD             reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    POWER           reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    EQUAL           reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    NOT_EQUAL       reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    GREATER_THAN    reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    GREATER_THAN_EQUAL reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    LESS_THAN       reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    LESS_THAN_EQUAL reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    AND             reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    OR              reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    RSQUARE         reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    COMMA           reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    RPAREN          reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    LBRACE          reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)


state 80

    (21) function_call -> ID LPAREN function_param_list_call RPAREN .

    LSQUARE         reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    SEMICOLON       reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    PLUS            reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    MINUS           reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    TIMES           reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    DIVIDE          reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    MOD             reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    POWER           reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    EQUAL           reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    NOT_EQUAL       reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    GREATER_THAN    reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    LESS_THAN       reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    LESS_THAN_EQUAL reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    AND             reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    OR              reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    RSQUARE         reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    COMMA           reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    RPAREN          reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    LBRACE          reduce using rule 21 (function_call -> ID LPAREN function_param_list_call RPAREN .)


state 81

    (22) function_param_list_call -> expression COMMA . function_param_list_call
    (22) function_param_list_call -> . expression COMMA function_param_list_call
    (23) function_param_list_call -> . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 44
    function_param_list_call       shift and go to state 110
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 82

    (11) variable_declaration -> VAR ID COLON types . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 111


state 83

    (13) var_const_update -> arrayaccess ASSIGN expression SEMICOLON .

    VAL             reduce using rule 13 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 13 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    ID              reduce using rule 13 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 13 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 13 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    $end            reduce using rule 13 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    IF              reduce using rule 13 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 13 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 13 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)


state 84

    (14) function_declaration -> FUNCTION ID LPAREN function_param_list . RPAREN COLON types SEMICOLON
    (15) function_declaration -> FUNCTION ID LPAREN function_param_list . RPAREN COLON types LBRACE function_body RBRACE

    RPAREN          shift and go to state 112


state 85

    (17) function_param_list -> parameter . COMMA function_param_list
    (18) function_param_list -> parameter .

    COMMA           shift and go to state 113
    RPAREN          reduce using rule 18 (function_param_list -> parameter .)


state 86

    (19) parameter -> VAL . ID COLON types

    ID              shift and go to state 114


state 87

    (20) parameter -> VAR . ID COLON types

    ID              shift and go to state 115


state 88

    (16) main_function -> FUNCTION MAIN LPAREN function_param_list . RPAREN LBRACE function_body RBRACE

    RPAREN          shift and go to state 116


state 89

    (54) arrayaccess -> function_call LSQUARE expression RSQUARE .

    ASSIGN          reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    SEMICOLON       reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    PLUS            reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    MINUS           reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    TIMES           reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    DIVIDE          reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    MOD             reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    POWER           reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    EQUAL           reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    NOT_EQUAL       reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    GREATER_THAN    reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    GREATER_THAN_EQUAL reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    LESS_THAN       reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    LESS_THAN_EQUAL reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    AND             reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    OR              reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    RSQUARE         reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    COMMA           reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    RPAREN          reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    LBRACE          reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)


state 90

    (10) constant_declaration -> VAL ID COLON types ASSIGN . expression SEMICOLON
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 117
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 91

    (44) arraytype -> LSQUARE arraytype . RSQUARE

    RSQUARE         shift and go to state 118


state 92

    (45) arraytype -> defaulttype .

    RSQUARE         reduce using rule 45 (arraytype -> defaulttype .)


state 93

    (55) expression -> expression PLUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 55 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 55 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 55 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 55 (expression -> expression PLUS expression .)
    NOT_EQUAL       reduce using rule 55 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 55 (expression -> expression PLUS expression .)
    GREATER_THAN_EQUAL reduce using rule 55 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 55 (expression -> expression PLUS expression .)
    LESS_THAN_EQUAL reduce using rule 55 (expression -> expression PLUS expression .)
    AND             reduce using rule 55 (expression -> expression PLUS expression .)
    OR              reduce using rule 55 (expression -> expression PLUS expression .)
    RSQUARE         reduce using rule 55 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 55 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 55 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 55 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65

  ! TIMES           [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 94

    (56) expression -> expression MINUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 56 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 56 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 56 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 56 (expression -> expression MINUS expression .)
    NOT_EQUAL       reduce using rule 56 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 56 (expression -> expression MINUS expression .)
    GREATER_THAN_EQUAL reduce using rule 56 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 56 (expression -> expression MINUS expression .)
    LESS_THAN_EQUAL reduce using rule 56 (expression -> expression MINUS expression .)
    AND             reduce using rule 56 (expression -> expression MINUS expression .)
    OR              reduce using rule 56 (expression -> expression MINUS expression .)
    RSQUARE         reduce using rule 56 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 56 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 56 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 56 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65

  ! TIMES           [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 95

    (57) expression -> expression TIMES expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 57 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 57 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 57 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 57 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 57 (expression -> expression TIMES expression .)
    MOD             reduce using rule 57 (expression -> expression TIMES expression .)
    EQUAL           reduce using rule 57 (expression -> expression TIMES expression .)
    NOT_EQUAL       reduce using rule 57 (expression -> expression TIMES expression .)
    GREATER_THAN    reduce using rule 57 (expression -> expression TIMES expression .)
    GREATER_THAN_EQUAL reduce using rule 57 (expression -> expression TIMES expression .)
    LESS_THAN       reduce using rule 57 (expression -> expression TIMES expression .)
    LESS_THAN_EQUAL reduce using rule 57 (expression -> expression TIMES expression .)
    AND             reduce using rule 57 (expression -> expression TIMES expression .)
    OR              reduce using rule 57 (expression -> expression TIMES expression .)
    RSQUARE         reduce using rule 57 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 57 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 57 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 57 (expression -> expression TIMES expression .)
    POWER           shift and go to state 65

  ! POWER           [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! MOD             [ shift and go to state 64 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 96

    (58) expression -> expression DIVIDE expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 58 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 58 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 58 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 58 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 58 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 58 (expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 58 (expression -> expression DIVIDE expression .)
    NOT_EQUAL       reduce using rule 58 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 58 (expression -> expression DIVIDE expression .)
    GREATER_THAN_EQUAL reduce using rule 58 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 58 (expression -> expression DIVIDE expression .)
    LESS_THAN_EQUAL reduce using rule 58 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 58 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 58 (expression -> expression DIVIDE expression .)
    RSQUARE         reduce using rule 58 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 58 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 58 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 58 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 65

  ! POWER           [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! MOD             [ shift and go to state 64 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 97

    (59) expression -> expression MOD expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 59 (expression -> expression MOD expression .)
    PLUS            reduce using rule 59 (expression -> expression MOD expression .)
    MINUS           reduce using rule 59 (expression -> expression MOD expression .)
    TIMES           reduce using rule 59 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 59 (expression -> expression MOD expression .)
    MOD             reduce using rule 59 (expression -> expression MOD expression .)
    EQUAL           reduce using rule 59 (expression -> expression MOD expression .)
    NOT_EQUAL       reduce using rule 59 (expression -> expression MOD expression .)
    GREATER_THAN    reduce using rule 59 (expression -> expression MOD expression .)
    GREATER_THAN_EQUAL reduce using rule 59 (expression -> expression MOD expression .)
    LESS_THAN       reduce using rule 59 (expression -> expression MOD expression .)
    LESS_THAN_EQUAL reduce using rule 59 (expression -> expression MOD expression .)
    AND             reduce using rule 59 (expression -> expression MOD expression .)
    OR              reduce using rule 59 (expression -> expression MOD expression .)
    RSQUARE         reduce using rule 59 (expression -> expression MOD expression .)
    COMMA           reduce using rule 59 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 59 (expression -> expression MOD expression .)
    LBRACE          reduce using rule 59 (expression -> expression MOD expression .)
    POWER           shift and go to state 65

  ! POWER           [ reduce using rule 59 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! MOD             [ shift and go to state 64 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 98

    (60) expression -> expression POWER expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 60 (expression -> expression POWER expression .)
    PLUS            reduce using rule 60 (expression -> expression POWER expression .)
    MINUS           reduce using rule 60 (expression -> expression POWER expression .)
    TIMES           reduce using rule 60 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 60 (expression -> expression POWER expression .)
    MOD             reduce using rule 60 (expression -> expression POWER expression .)
    EQUAL           reduce using rule 60 (expression -> expression POWER expression .)
    NOT_EQUAL       reduce using rule 60 (expression -> expression POWER expression .)
    GREATER_THAN    reduce using rule 60 (expression -> expression POWER expression .)
    GREATER_THAN_EQUAL reduce using rule 60 (expression -> expression POWER expression .)
    LESS_THAN       reduce using rule 60 (expression -> expression POWER expression .)
    LESS_THAN_EQUAL reduce using rule 60 (expression -> expression POWER expression .)
    AND             reduce using rule 60 (expression -> expression POWER expression .)
    OR              reduce using rule 60 (expression -> expression POWER expression .)
    RSQUARE         reduce using rule 60 (expression -> expression POWER expression .)
    COMMA           reduce using rule 60 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 60 (expression -> expression POWER expression .)
    LBRACE          reduce using rule 60 (expression -> expression POWER expression .)
    POWER           shift and go to state 65

  ! POWER           [ reduce using rule 60 (expression -> expression POWER expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! MOD             [ shift and go to state 64 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 99

    (61) expression -> expression EQUAL expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 61 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 61 (expression -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 61 (expression -> expression EQUAL expression .)
    AND             reduce using rule 61 (expression -> expression EQUAL expression .)
    OR              reduce using rule 61 (expression -> expression EQUAL expression .)
    RSQUARE         reduce using rule 61 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 61 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 61 (expression -> expression EQUAL expression .)
    LBRACE          reduce using rule 61 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71

  ! PLUS            [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! MOD             [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! POWER           [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 61 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 100

    (62) expression -> expression NOT_EQUAL expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 62 (expression -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 62 (expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 62 (expression -> expression NOT_EQUAL expression .)
    AND             reduce using rule 62 (expression -> expression NOT_EQUAL expression .)
    OR              reduce using rule 62 (expression -> expression NOT_EQUAL expression .)
    RSQUARE         reduce using rule 62 (expression -> expression NOT_EQUAL expression .)
    COMMA           reduce using rule 62 (expression -> expression NOT_EQUAL expression .)
    RPAREN          reduce using rule 62 (expression -> expression NOT_EQUAL expression .)
    LBRACE          reduce using rule 62 (expression -> expression NOT_EQUAL expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71

  ! PLUS            [ reduce using rule 62 (expression -> expression NOT_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression NOT_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 62 (expression -> expression NOT_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression -> expression NOT_EQUAL expression .) ]
  ! MOD             [ reduce using rule 62 (expression -> expression NOT_EQUAL expression .) ]
  ! POWER           [ reduce using rule 62 (expression -> expression NOT_EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 62 (expression -> expression NOT_EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 62 (expression -> expression NOT_EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 62 (expression -> expression NOT_EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 62 (expression -> expression NOT_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 101

    (63) expression -> expression GREATER_THAN expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 63 (expression -> expression GREATER_THAN expression .)
    EQUAL           reduce using rule 63 (expression -> expression GREATER_THAN expression .)
    NOT_EQUAL       reduce using rule 63 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 63 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 63 (expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 63 (expression -> expression GREATER_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 63 (expression -> expression GREATER_THAN expression .)
    AND             reduce using rule 63 (expression -> expression GREATER_THAN expression .)
    OR              reduce using rule 63 (expression -> expression GREATER_THAN expression .)
    RSQUARE         reduce using rule 63 (expression -> expression GREATER_THAN expression .)
    COMMA           reduce using rule 63 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 63 (expression -> expression GREATER_THAN expression .)
    LBRACE          reduce using rule 63 (expression -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65

  ! PLUS            [ reduce using rule 63 (expression -> expression GREATER_THAN expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> expression GREATER_THAN expression .) ]
  ! TIMES           [ reduce using rule 63 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 63 (expression -> expression GREATER_THAN expression .) ]
  ! MOD             [ reduce using rule 63 (expression -> expression GREATER_THAN expression .) ]
  ! POWER           [ reduce using rule 63 (expression -> expression GREATER_THAN expression .) ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 102

    (64) expression -> expression GREATER_THAN_EQUAL expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .)
    EQUAL           reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .)
    NOT_EQUAL       reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .)
    AND             reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .)
    OR              reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .)
    RSQUARE         reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .)
    COMMA           reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .)
    RPAREN          reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .)
    LBRACE          reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65

  ! PLUS            [ reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MOD             [ reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! POWER           [ reduce using rule 64 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 103

    (65) expression -> expression LESS_THAN expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 65 (expression -> expression LESS_THAN expression .)
    EQUAL           reduce using rule 65 (expression -> expression LESS_THAN expression .)
    NOT_EQUAL       reduce using rule 65 (expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 65 (expression -> expression LESS_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 65 (expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 65 (expression -> expression LESS_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 65 (expression -> expression LESS_THAN expression .)
    AND             reduce using rule 65 (expression -> expression LESS_THAN expression .)
    OR              reduce using rule 65 (expression -> expression LESS_THAN expression .)
    RSQUARE         reduce using rule 65 (expression -> expression LESS_THAN expression .)
    COMMA           reduce using rule 65 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 65 (expression -> expression LESS_THAN expression .)
    LBRACE          reduce using rule 65 (expression -> expression LESS_THAN expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65

  ! PLUS            [ reduce using rule 65 (expression -> expression LESS_THAN expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression LESS_THAN expression .) ]
  ! TIMES           [ reduce using rule 65 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression LESS_THAN expression .) ]
  ! MOD             [ reduce using rule 65 (expression -> expression LESS_THAN expression .) ]
  ! POWER           [ reduce using rule 65 (expression -> expression LESS_THAN expression .) ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 104

    (66) expression -> expression LESS_THAN_EQUAL expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .)
    EQUAL           reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .)
    NOT_EQUAL       reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .)
    AND             reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .)
    OR              reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .)
    RSQUARE         reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .)
    COMMA           reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .)
    RPAREN          reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .)
    LBRACE          reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65

  ! PLUS            [ reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MOD             [ reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! POWER           [ reduce using rule 66 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 105

    (67) expression -> expression AND expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 67 (expression -> expression AND expression .)
    AND             reduce using rule 67 (expression -> expression AND expression .)
    OR              reduce using rule 67 (expression -> expression AND expression .)
    RSQUARE         reduce using rule 67 (expression -> expression AND expression .)
    COMMA           reduce using rule 67 (expression -> expression AND expression .)
    RPAREN          reduce using rule 67 (expression -> expression AND expression .)
    LBRACE          reduce using rule 67 (expression -> expression AND expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71

  ! PLUS            [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! POWER           [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! NOT_EQUAL       [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! LESS_THAN       [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 67 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 106

    (68) expression -> expression OR expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       reduce using rule 68 (expression -> expression OR expression .)
    OR              reduce using rule 68 (expression -> expression OR expression .)
    RSQUARE         reduce using rule 68 (expression -> expression OR expression .)
    COMMA           reduce using rule 68 (expression -> expression OR expression .)
    RPAREN          reduce using rule 68 (expression -> expression OR expression .)
    LBRACE          reduce using rule 68 (expression -> expression OR expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72

  ! PLUS            [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! POWER           [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! NOT_EQUAL       [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! LESS_THAN       [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 68 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 73 ]


state 107

    (76) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    LESS_THAN_EQUAL reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    RSQUARE         reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 76 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 76 (expression -> LPAREN expression RPAREN .)


state 108

    (50) arrayliterals -> LSQUARE array_values RSQUARE .

    SEMICOLON       reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    PLUS            reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    MINUS           reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    TIMES           reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    DIVIDE          reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    MOD             reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    POWER           reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    EQUAL           reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    NOT_EQUAL       reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    GREATER_THAN    reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    GREATER_THAN_EQUAL reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    LESS_THAN       reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    LESS_THAN_EQUAL reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    AND             reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    OR              reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    RSQUARE         reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    COMMA           reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    RPAREN          reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)
    LBRACE          reduce using rule 50 (arrayliterals -> LSQUARE array_values RSQUARE .)


state 109

    (51) array_values -> array_values COMMA . expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 119
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 110

    (22) function_param_list_call -> expression COMMA function_param_list_call .

    RPAREN          reduce using rule 22 (function_param_list_call -> expression COMMA function_param_list_call .)


state 111

    (11) variable_declaration -> VAR ID COLON types ASSIGN . expression SEMICOLON
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 120
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 112

    (14) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN . COLON types SEMICOLON
    (15) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN . COLON types LBRACE function_body RBRACE

    COLON           shift and go to state 121


state 113

    (17) function_param_list -> parameter COMMA . function_param_list
    (17) function_param_list -> . parameter COMMA function_param_list
    (18) function_param_list -> . parameter
    (19) parameter -> . VAL ID COLON types
    (20) parameter -> . VAR ID COLON types

    VAL             shift and go to state 86
    VAR             shift and go to state 87

    parameter                      shift and go to state 85
    function_param_list            shift and go to state 122

state 114

    (19) parameter -> VAL ID . COLON types

    COLON           shift and go to state 123


state 115

    (20) parameter -> VAR ID . COLON types

    COLON           shift and go to state 124


state 116

    (16) main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN . LBRACE function_body RBRACE

    LBRACE          shift and go to state 125


state 117

    (10) constant_declaration -> VAL ID COLON types ASSIGN expression . SEMICOLON
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       shift and go to state 126
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 118

    (44) arraytype -> LSQUARE arraytype RSQUARE .

    ASSIGN          reduce using rule 44 (arraytype -> LSQUARE arraytype RSQUARE .)
    RSQUARE         reduce using rule 44 (arraytype -> LSQUARE arraytype RSQUARE .)
    SEMICOLON       reduce using rule 44 (arraytype -> LSQUARE arraytype RSQUARE .)
    LBRACE          reduce using rule 44 (arraytype -> LSQUARE arraytype RSQUARE .)
    COMMA           reduce using rule 44 (arraytype -> LSQUARE arraytype RSQUARE .)
    RPAREN          reduce using rule 44 (arraytype -> LSQUARE arraytype RSQUARE .)


state 119

    (51) array_values -> array_values COMMA expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    RSQUARE         reduce using rule 51 (array_values -> array_values COMMA expression .)
    COMMA           reduce using rule 51 (array_values -> array_values COMMA expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 120

    (11) variable_declaration -> VAR ID COLON types ASSIGN expression . SEMICOLON
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    SEMICOLON       shift and go to state 127
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 121

    (14) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON . types SEMICOLON
    (15) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON . types LBRACE function_body RBRACE
    (37) types -> . defaulttype
    (38) types -> . arraytype
    (39) defaulttype -> . INT_TYPE
    (40) defaulttype -> . FLOAT_TYPE
    (41) defaulttype -> . STRING_TYPE
    (42) defaulttype -> . BOOL_TYPE
    (43) defaulttype -> . VOID_TYPE
    (44) arraytype -> . LSQUARE arraytype RSQUARE
    (45) arraytype -> . defaulttype

    INT_TYPE        shift and go to state 53
    FLOAT_TYPE      shift and go to state 54
    STRING_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VOID_TYPE       shift and go to state 57
    LSQUARE         shift and go to state 58

    types                          shift and go to state 128
    defaulttype                    shift and go to state 51
    arraytype                      shift and go to state 52

state 122

    (17) function_param_list -> parameter COMMA function_param_list .

    RPAREN          reduce using rule 17 (function_param_list -> parameter COMMA function_param_list .)


state 123

    (19) parameter -> VAL ID COLON . types
    (37) types -> . defaulttype
    (38) types -> . arraytype
    (39) defaulttype -> . INT_TYPE
    (40) defaulttype -> . FLOAT_TYPE
    (41) defaulttype -> . STRING_TYPE
    (42) defaulttype -> . BOOL_TYPE
    (43) defaulttype -> . VOID_TYPE
    (44) arraytype -> . LSQUARE arraytype RSQUARE
    (45) arraytype -> . defaulttype

    INT_TYPE        shift and go to state 53
    FLOAT_TYPE      shift and go to state 54
    STRING_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VOID_TYPE       shift and go to state 57
    LSQUARE         shift and go to state 58

    types                          shift and go to state 129
    defaulttype                    shift and go to state 51
    arraytype                      shift and go to state 52

state 124

    (20) parameter -> VAR ID COLON . types
    (37) types -> . defaulttype
    (38) types -> . arraytype
    (39) defaulttype -> . INT_TYPE
    (40) defaulttype -> . FLOAT_TYPE
    (41) defaulttype -> . STRING_TYPE
    (42) defaulttype -> . BOOL_TYPE
    (43) defaulttype -> . VOID_TYPE
    (44) arraytype -> . LSQUARE arraytype RSQUARE
    (45) arraytype -> . defaulttype

    INT_TYPE        shift and go to state 53
    FLOAT_TYPE      shift and go to state 54
    STRING_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VOID_TYPE       shift and go to state 57
    LSQUARE         shift and go to state 58

    types                          shift and go to state 130
    defaulttype                    shift and go to state 51
    arraytype                      shift and go to state 52

state 125

    (16) main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE . function_body RBRACE
    (24) function_body -> . block_sequence
    (25) block_sequence -> . block block_sequence
    (26) block_sequence -> . block
    (27) block -> . constant_declaration
    (28) block -> . variable_declaration
    (29) block -> . var_const_update
    (30) block -> . if_block
    (31) block -> . while_block
    (32) block -> . function_call SEMICOLON
    (33) block -> . comment
    (10) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (11) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (12) var_const_update -> . ID ASSIGN expression SEMICOLON
    (13) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (34) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (35) if_block -> . IF expression LBRACE block_sequence RBRACE
    (36) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN
    (3) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE

    VAL             shift and go to state 9
    VAR             shift and go to state 11
    ID              shift and go to state 141
    IF              shift and go to state 142
    WHILE           shift and go to state 143
    COMMENT         shift and go to state 14

    function_body                  shift and go to state 131
    block_sequence                 shift and go to state 132
    block                          shift and go to state 133
    constant_declaration           shift and go to state 134
    variable_declaration           shift and go to state 135
    var_const_update               shift and go to state 136
    if_block                       shift and go to state 137
    while_block                    shift and go to state 138
    function_call                  shift and go to state 139
    comment                        shift and go to state 140
    arrayaccess                    shift and go to state 12

state 126

    (10) constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .

    VAL             reduce using rule 10 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 10 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    ID              reduce using rule 10 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 10 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 10 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    $end            reduce using rule 10 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    IF              reduce using rule 10 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 10 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 10 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)


state 127

    (11) variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .

    VAL             reduce using rule 11 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 11 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    ID              reduce using rule 11 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 11 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 11 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    $end            reduce using rule 11 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    IF              reduce using rule 11 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 11 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 11 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)


state 128

    (14) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types . SEMICOLON
    (15) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types . LBRACE function_body RBRACE

    SEMICOLON       shift and go to state 144
    LBRACE          shift and go to state 145


state 129

    (19) parameter -> VAL ID COLON types .

    COMMA           reduce using rule 19 (parameter -> VAL ID COLON types .)
    RPAREN          reduce using rule 19 (parameter -> VAL ID COLON types .)


state 130

    (20) parameter -> VAR ID COLON types .

    COMMA           reduce using rule 20 (parameter -> VAR ID COLON types .)
    RPAREN          reduce using rule 20 (parameter -> VAR ID COLON types .)


state 131

    (16) main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body . RBRACE

    RBRACE          shift and go to state 146


state 132

    (24) function_body -> block_sequence .

    RBRACE          reduce using rule 24 (function_body -> block_sequence .)


state 133

    (25) block_sequence -> block . block_sequence
    (26) block_sequence -> block .
    (25) block_sequence -> . block block_sequence
    (26) block_sequence -> . block
    (27) block -> . constant_declaration
    (28) block -> . variable_declaration
    (29) block -> . var_const_update
    (30) block -> . if_block
    (31) block -> . while_block
    (32) block -> . function_call SEMICOLON
    (33) block -> . comment
    (10) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (11) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (12) var_const_update -> . ID ASSIGN expression SEMICOLON
    (13) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (34) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (35) if_block -> . IF expression LBRACE block_sequence RBRACE
    (36) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN
    (3) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE

    RBRACE          reduce using rule 26 (block_sequence -> block .)
    VAL             shift and go to state 9
    VAR             shift and go to state 11
    ID              shift and go to state 141
    IF              shift and go to state 142
    WHILE           shift and go to state 143
    COMMENT         shift and go to state 14

    block                          shift and go to state 133
    block_sequence                 shift and go to state 147
    constant_declaration           shift and go to state 134
    variable_declaration           shift and go to state 135
    var_const_update               shift and go to state 136
    if_block                       shift and go to state 137
    while_block                    shift and go to state 138
    function_call                  shift and go to state 139
    comment                        shift and go to state 140
    arrayaccess                    shift and go to state 12

state 134

    (27) block -> constant_declaration .

    VAL             reduce using rule 27 (block -> constant_declaration .)
    VAR             reduce using rule 27 (block -> constant_declaration .)
    ID              reduce using rule 27 (block -> constant_declaration .)
    IF              reduce using rule 27 (block -> constant_declaration .)
    WHILE           reduce using rule 27 (block -> constant_declaration .)
    COMMENT         reduce using rule 27 (block -> constant_declaration .)
    RBRACE          reduce using rule 27 (block -> constant_declaration .)


state 135

    (28) block -> variable_declaration .

    VAL             reduce using rule 28 (block -> variable_declaration .)
    VAR             reduce using rule 28 (block -> variable_declaration .)
    ID              reduce using rule 28 (block -> variable_declaration .)
    IF              reduce using rule 28 (block -> variable_declaration .)
    WHILE           reduce using rule 28 (block -> variable_declaration .)
    COMMENT         reduce using rule 28 (block -> variable_declaration .)
    RBRACE          reduce using rule 28 (block -> variable_declaration .)


state 136

    (29) block -> var_const_update .

    VAL             reduce using rule 29 (block -> var_const_update .)
    VAR             reduce using rule 29 (block -> var_const_update .)
    ID              reduce using rule 29 (block -> var_const_update .)
    IF              reduce using rule 29 (block -> var_const_update .)
    WHILE           reduce using rule 29 (block -> var_const_update .)
    COMMENT         reduce using rule 29 (block -> var_const_update .)
    RBRACE          reduce using rule 29 (block -> var_const_update .)


state 137

    (30) block -> if_block .

    VAL             reduce using rule 30 (block -> if_block .)
    VAR             reduce using rule 30 (block -> if_block .)
    ID              reduce using rule 30 (block -> if_block .)
    IF              reduce using rule 30 (block -> if_block .)
    WHILE           reduce using rule 30 (block -> if_block .)
    COMMENT         reduce using rule 30 (block -> if_block .)
    RBRACE          reduce using rule 30 (block -> if_block .)


state 138

    (31) block -> while_block .

    VAL             reduce using rule 31 (block -> while_block .)
    VAR             reduce using rule 31 (block -> while_block .)
    ID              reduce using rule 31 (block -> while_block .)
    IF              reduce using rule 31 (block -> while_block .)
    WHILE           reduce using rule 31 (block -> while_block .)
    COMMENT         reduce using rule 31 (block -> while_block .)
    RBRACE          reduce using rule 31 (block -> while_block .)


state 139

    (32) block -> function_call . SEMICOLON
    (54) arrayaccess -> function_call . LSQUARE expression RSQUARE

    SEMICOLON       shift and go to state 148
    LSQUARE         shift and go to state 26


state 140

    (33) block -> comment .

    VAL             reduce using rule 33 (block -> comment .)
    VAR             reduce using rule 33 (block -> comment .)
    ID              reduce using rule 33 (block -> comment .)
    IF              reduce using rule 33 (block -> comment .)
    WHILE           reduce using rule 33 (block -> comment .)
    COMMENT         reduce using rule 33 (block -> comment .)
    RBRACE          reduce using rule 33 (block -> comment .)


state 141

    (12) var_const_update -> ID . ASSIGN expression SEMICOLON
    (21) function_call -> ID . LPAREN function_param_list_call RPAREN
    (53) arrayaccess -> ID . LSQUARE expression RSQUARE

    ASSIGN          shift and go to state 18
    LPAREN          shift and go to state 20
    LSQUARE         shift and go to state 19


state 142

    (34) if_block -> IF . expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (35) if_block -> IF . expression LBRACE block_sequence RBRACE
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 149
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 143

    (36) while_block -> WHILE . expression LBRACE block_sequence RBRACE
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MOD expression
    (60) expression -> . expression POWER expression
    (61) expression -> . expression EQUAL expression
    (62) expression -> . expression NOT_EQUAL expression
    (63) expression -> . expression GREATER_THAN expression
    (64) expression -> . expression GREATER_THAN_EQUAL expression
    (65) expression -> . expression LESS_THAN expression
    (66) expression -> . expression LESS_THAN_EQUAL expression
    (67) expression -> . expression AND expression
    (68) expression -> . expression OR expression
    (69) expression -> . NOT expression
    (70) expression -> . MINUS expression
    (71) expression -> . typeliterals
    (72) expression -> . arrayliterals
    (73) expression -> . arrayaccess
    (74) expression -> . function_call
    (75) expression -> . ID
    (76) expression -> . LPAREN expression RPAREN
    (46) typeliterals -> . INTEGER_LITERAL
    (47) typeliterals -> . FLOAT_LITERAL
    (48) typeliterals -> . STRING_LITERAL
    (49) typeliterals -> . BOOL_LITERAL
    (50) arrayliterals -> . LSQUARE array_values RSQUARE
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN

    NOT             shift and go to state 31
    MINUS           shift and go to state 30
    ID              shift and go to state 28
    LPAREN          shift and go to state 36
    INTEGER_LITERAL shift and go to state 37
    FLOAT_LITERAL   shift and go to state 38
    STRING_LITERAL  shift and go to state 39
    BOOL_LITERAL    shift and go to state 40
    LSQUARE         shift and go to state 41

    expression                     shift and go to state 150
    typeliterals                   shift and go to state 32
    arrayliterals                  shift and go to state 33
    arrayaccess                    shift and go to state 34
    function_call                  shift and go to state 35

state 144

    (14) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .

    VAL             reduce using rule 14 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    VAR             reduce using rule 14 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    ID              reduce using rule 14 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    FUNCTION        reduce using rule 14 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    COMMENT         reduce using rule 14 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    $end            reduce using rule 14 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)


state 145

    (15) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE . function_body RBRACE
    (24) function_body -> . block_sequence
    (25) block_sequence -> . block block_sequence
    (26) block_sequence -> . block
    (27) block -> . constant_declaration
    (28) block -> . variable_declaration
    (29) block -> . var_const_update
    (30) block -> . if_block
    (31) block -> . while_block
    (32) block -> . function_call SEMICOLON
    (33) block -> . comment
    (10) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (11) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (12) var_const_update -> . ID ASSIGN expression SEMICOLON
    (13) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (34) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (35) if_block -> . IF expression LBRACE block_sequence RBRACE
    (36) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN
    (3) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE

    VAL             shift and go to state 9
    VAR             shift and go to state 11
    ID              shift and go to state 141
    IF              shift and go to state 142
    WHILE           shift and go to state 143
    COMMENT         shift and go to state 14

    function_body                  shift and go to state 151
    block_sequence                 shift and go to state 132
    block                          shift and go to state 133
    constant_declaration           shift and go to state 134
    variable_declaration           shift and go to state 135
    var_const_update               shift and go to state 136
    if_block                       shift and go to state 137
    while_block                    shift and go to state 138
    function_call                  shift and go to state 139
    comment                        shift and go to state 140
    arrayaccess                    shift and go to state 12

state 146

    (16) main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .

    VAL             reduce using rule 16 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    VAR             reduce using rule 16 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    ID              reduce using rule 16 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    FUNCTION        reduce using rule 16 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    COMMENT         reduce using rule 16 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    $end            reduce using rule 16 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)


state 147

    (25) block_sequence -> block block_sequence .

    RBRACE          reduce using rule 25 (block_sequence -> block block_sequence .)


state 148

    (32) block -> function_call SEMICOLON .

    VAL             reduce using rule 32 (block -> function_call SEMICOLON .)
    VAR             reduce using rule 32 (block -> function_call SEMICOLON .)
    ID              reduce using rule 32 (block -> function_call SEMICOLON .)
    IF              reduce using rule 32 (block -> function_call SEMICOLON .)
    WHILE           reduce using rule 32 (block -> function_call SEMICOLON .)
    COMMENT         reduce using rule 32 (block -> function_call SEMICOLON .)
    RBRACE          reduce using rule 32 (block -> function_call SEMICOLON .)


state 149

    (34) if_block -> IF expression . LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (35) if_block -> IF expression . LBRACE block_sequence RBRACE
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    LBRACE          shift and go to state 152
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 150

    (36) while_block -> WHILE expression . LBRACE block_sequence RBRACE
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MOD expression
    (60) expression -> expression . POWER expression
    (61) expression -> expression . EQUAL expression
    (62) expression -> expression . NOT_EQUAL expression
    (63) expression -> expression . GREATER_THAN expression
    (64) expression -> expression . GREATER_THAN_EQUAL expression
    (65) expression -> expression . LESS_THAN expression
    (66) expression -> expression . LESS_THAN_EQUAL expression
    (67) expression -> expression . AND expression
    (68) expression -> expression . OR expression

    LBRACE          shift and go to state 153
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 151

    (15) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body . RBRACE

    RBRACE          shift and go to state 154


state 152

    (34) if_block -> IF expression LBRACE . block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (35) if_block -> IF expression LBRACE . block_sequence RBRACE
    (25) block_sequence -> . block block_sequence
    (26) block_sequence -> . block
    (27) block -> . constant_declaration
    (28) block -> . variable_declaration
    (29) block -> . var_const_update
    (30) block -> . if_block
    (31) block -> . while_block
    (32) block -> . function_call SEMICOLON
    (33) block -> . comment
    (10) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (11) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (12) var_const_update -> . ID ASSIGN expression SEMICOLON
    (13) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (34) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (35) if_block -> . IF expression LBRACE block_sequence RBRACE
    (36) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN
    (3) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE

    VAL             shift and go to state 9
    VAR             shift and go to state 11
    ID              shift and go to state 141
    IF              shift and go to state 142
    WHILE           shift and go to state 143
    COMMENT         shift and go to state 14

    block_sequence                 shift and go to state 155
    block                          shift and go to state 133
    constant_declaration           shift and go to state 134
    variable_declaration           shift and go to state 135
    var_const_update               shift and go to state 136
    if_block                       shift and go to state 137
    while_block                    shift and go to state 138
    function_call                  shift and go to state 139
    comment                        shift and go to state 140
    arrayaccess                    shift and go to state 12

state 153

    (36) while_block -> WHILE expression LBRACE . block_sequence RBRACE
    (25) block_sequence -> . block block_sequence
    (26) block_sequence -> . block
    (27) block -> . constant_declaration
    (28) block -> . variable_declaration
    (29) block -> . var_const_update
    (30) block -> . if_block
    (31) block -> . while_block
    (32) block -> . function_call SEMICOLON
    (33) block -> . comment
    (10) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (11) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (12) var_const_update -> . ID ASSIGN expression SEMICOLON
    (13) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (34) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (35) if_block -> . IF expression LBRACE block_sequence RBRACE
    (36) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN
    (3) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE

    VAL             shift and go to state 9
    VAR             shift and go to state 11
    ID              shift and go to state 141
    IF              shift and go to state 142
    WHILE           shift and go to state 143
    COMMENT         shift and go to state 14

    block_sequence                 shift and go to state 156
    block                          shift and go to state 133
    constant_declaration           shift and go to state 134
    variable_declaration           shift and go to state 135
    var_const_update               shift and go to state 136
    if_block                       shift and go to state 137
    while_block                    shift and go to state 138
    function_call                  shift and go to state 139
    comment                        shift and go to state 140
    arrayaccess                    shift and go to state 12

state 154

    (15) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .

    VAL             reduce using rule 15 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    VAR             reduce using rule 15 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    ID              reduce using rule 15 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    FUNCTION        reduce using rule 15 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    COMMENT         reduce using rule 15 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    $end            reduce using rule 15 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)


state 155

    (34) if_block -> IF expression LBRACE block_sequence . RBRACE ELSE LBRACE block_sequence RBRACE
    (35) if_block -> IF expression LBRACE block_sequence . RBRACE

    RBRACE          shift and go to state 157


state 156

    (36) while_block -> WHILE expression LBRACE block_sequence . RBRACE

    RBRACE          shift and go to state 158


state 157

    (34) if_block -> IF expression LBRACE block_sequence RBRACE . ELSE LBRACE block_sequence RBRACE
    (35) if_block -> IF expression LBRACE block_sequence RBRACE .

    ELSE            shift and go to state 159
    VAL             reduce using rule 35 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    VAR             reduce using rule 35 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    ID              reduce using rule 35 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    IF              reduce using rule 35 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    WHILE           reduce using rule 35 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    COMMENT         reduce using rule 35 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    RBRACE          reduce using rule 35 (if_block -> IF expression LBRACE block_sequence RBRACE .)


state 158

    (36) while_block -> WHILE expression LBRACE block_sequence RBRACE .

    VAL             reduce using rule 36 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    VAR             reduce using rule 36 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    ID              reduce using rule 36 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    IF              reduce using rule 36 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    WHILE           reduce using rule 36 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    COMMENT         reduce using rule 36 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    RBRACE          reduce using rule 36 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)


state 159

    (34) if_block -> IF expression LBRACE block_sequence RBRACE ELSE . LBRACE block_sequence RBRACE

    LBRACE          shift and go to state 160


state 160

    (34) if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE . block_sequence RBRACE
    (25) block_sequence -> . block block_sequence
    (26) block_sequence -> . block
    (27) block -> . constant_declaration
    (28) block -> . variable_declaration
    (29) block -> . var_const_update
    (30) block -> . if_block
    (31) block -> . while_block
    (32) block -> . function_call SEMICOLON
    (33) block -> . comment
    (10) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (11) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (12) var_const_update -> . ID ASSIGN expression SEMICOLON
    (13) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (34) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (35) if_block -> . IF expression LBRACE block_sequence RBRACE
    (36) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (21) function_call -> . ID LPAREN function_param_list_call RPAREN
    (3) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE

    VAL             shift and go to state 9
    VAR             shift and go to state 11
    ID              shift and go to state 141
    IF              shift and go to state 142
    WHILE           shift and go to state 143
    COMMENT         shift and go to state 14

    block_sequence                 shift and go to state 161
    block                          shift and go to state 133
    constant_declaration           shift and go to state 134
    variable_declaration           shift and go to state 135
    var_const_update               shift and go to state 136
    if_block                       shift and go to state 137
    while_block                    shift and go to state 138
    function_call                  shift and go to state 139
    comment                        shift and go to state 140
    arrayaccess                    shift and go to state 12

state 161

    (34) if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence . RBRACE

    RBRACE          shift and go to state 162


state 162

    (34) if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .

    VAL             reduce using rule 34 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    VAR             reduce using rule 34 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    ID              reduce using rule 34 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    IF              reduce using rule 34 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    WHILE           reduce using rule 34 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    COMMENT         reduce using rule 34 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    RBRACE          reduce using rule 34 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 51 resolved using rule (types -> defaulttype)
WARNING: rejected rule (arraytype -> defaulttype) in state 51
