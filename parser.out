Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> main_block_sequence
Rule 2     main_block_sequence -> main_block main_block_sequence
Rule 3     main_block_sequence -> main_block
Rule 4     comment -> COMMENT STRING_LITERAL
Rule 5     main_block -> constant_declaration
Rule 6     main_block -> variable_declaration
Rule 7     main_block -> var_const_update
Rule 8     main_block -> function_declaration
Rule 9     main_block -> main_function
Rule 10    main_block -> comment
Rule 11    constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON
Rule 12    variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON
Rule 13    var_const_update -> ID ASSIGN expression SEMICOLON
Rule 14    var_const_update -> arrayaccess ASSIGN expression SEMICOLON
Rule 15    function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON
Rule 16    function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE
Rule 17    main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE
Rule 18    function_param_list -> parameter COMMA function_param_list
Rule 19    function_param_list -> parameter
Rule 20    parameter -> VAL ID COLON types
Rule 21    parameter -> VAR ID COLON types
Rule 22    function_call -> ID LPAREN function_param_list_call RPAREN
Rule 23    function_call -> ID LPAREN RPAREN
Rule 24    function_param_list_call -> expression COMMA function_param_list_call
Rule 25    function_param_list_call -> expression
Rule 26    function_body -> block_sequence
Rule 27    block_sequence -> block block_sequence
Rule 28    block_sequence -> block
Rule 29    block -> constant_declaration
Rule 30    block -> variable_declaration
Rule 31    block -> var_const_update
Rule 32    block -> if_block
Rule 33    block -> while_block
Rule 34    block -> function_call SEMICOLON
Rule 35    block -> comment
Rule 36    if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
Rule 37    if_block -> IF expression LBRACE block_sequence RBRACE
Rule 38    while_block -> WHILE expression LBRACE block_sequence RBRACE
Rule 39    types -> defaulttype
Rule 40    types -> LSQUARE arraytype RSQUARE
Rule 41    defaulttype -> INT_TYPE
Rule 42    defaulttype -> FLOAT_TYPE
Rule 43    defaulttype -> STRING_TYPE
Rule 44    defaulttype -> BOOL_TYPE
Rule 45    defaulttype -> VOID_TYPE
Rule 46    defaulttype -> CHAR_TYPE
Rule 47    arraytype -> LSQUARE arraytype RSQUARE
Rule 48    arraytype -> INT_TYPE
Rule 49    arraytype -> FLOAT_TYPE
Rule 50    arraytype -> STRING_TYPE
Rule 51    arraytype -> BOOL_TYPE
Rule 52    arraytype -> VOID_TYPE
Rule 53    arrayaccess -> ID LSQUARE expression RSQUARE
Rule 54    arrayaccess -> function_call LSQUARE expression RSQUARE
Rule 55    expression -> ID
Rule 56    expression -> INTEGER_LITERAL
Rule 57    expression -> FLOAT_LITERAL
Rule 58    expression -> STRING_LITERAL
Rule 59    expression -> BOOL_LITERAL
Rule 60    expression -> CHAR_LITERAL
Rule 61    expression -> expression PLUS expression
Rule 62    expression -> expression MINUS expression
Rule 63    expression -> expression TIMES expression
Rule 64    expression -> expression DIVIDE expression
Rule 65    expression -> expression MOD expression
Rule 66    expression -> expression POWER expression
Rule 67    expression -> expression EQUAL expression
Rule 68    expression -> expression NOT_EQUAL expression
Rule 69    expression -> expression GREATER_THAN expression
Rule 70    expression -> expression GREATER_THAN_EQUAL expression
Rule 71    expression -> expression LESS_THAN expression
Rule 72    expression -> expression LESS_THAN_EQUAL expression
Rule 73    expression -> expression AND expression
Rule 74    expression -> expression OR expression
Rule 75    expression -> NOT expression
Rule 76    expression -> MINUS expression
Rule 77    expression -> arrayaccess
Rule 78    expression -> function_call
Rule 79    expression -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 73
ASSIGN               : 11 12 13 14
BOOL_LITERAL         : 59
BOOL_TYPE            : 44 51
CHAR_LITERAL         : 60
CHAR_TYPE            : 46
COLON                : 11 12 15 16 20 21
COMMA                : 18 24
COMMENT              : 4
DIVIDE               : 64
ELSE                 : 36
EQUAL                : 67
FLOAT_LITERAL        : 57
FLOAT_TYPE           : 42 49
FUNCTION             : 15 16 17
GREATER_THAN         : 69
GREATER_THAN_EQUAL   : 70
ID                   : 11 12 13 15 16 20 21 22 23 53 55
IF                   : 36 37
INTEGER_LITERAL      : 56
INT_TYPE             : 41 48
LBRACE               : 16 17 36 36 37 38
LESS_THAN            : 71
LESS_THAN_EQUAL      : 72
LPAREN               : 15 16 17 22 23 79
LSQUARE              : 40 47 53 54
MAIN                 : 17
MINUS                : 62 76
MOD                  : 65
NOT                  : 75
NOT_EQUAL            : 68
OR                   : 74
PLUS                 : 61
POWER                : 66
RBRACE               : 16 17 36 36 37 38
RPAREN               : 15 16 17 22 23 79
RSQUARE              : 40 47 53 54
SEMICOLON            : 11 12 13 14 15 34
STRING_LITERAL       : 4 58
STRING_TYPE          : 43 50
TIMES                : 63
VAL                  : 11 20
VAR                  : 12 21
VOID_TYPE            : 45 52
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

arrayaccess          : 14 77
arraytype            : 40 47
block                : 27 28
block_sequence       : 26 27 36 36 37 38
comment              : 10 35
constant_declaration : 5 29
defaulttype          : 39
expression           : 11 12 13 14 24 25 36 37 38 53 54 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 76 79
function_body        : 16 17
function_call        : 34 54 78
function_declaration : 8
function_param_list  : 15 16 17 18
function_param_list_call : 22 24
if_block             : 32
main_block           : 2 3
main_block_sequence  : 1 2
main_function        : 9
parameter            : 18 19
program              : 0
types                : 11 12 15 16 20 21
var_const_update     : 7 31
variable_declaration : 6 30
while_block          : 33

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . main_block_sequence
    (2) main_block_sequence -> . main_block main_block_sequence
    (3) main_block_sequence -> . main_block
    (5) main_block -> . constant_declaration
    (6) main_block -> . variable_declaration
    (7) main_block -> . var_const_update
    (8) main_block -> . function_declaration
    (9) main_block -> . main_function
    (10) main_block -> . comment
    (11) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (12) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (13) var_const_update -> . ID ASSIGN expression SEMICOLON
    (14) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (15) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON
    (16) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE
    (17) main_function -> . FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE
    (4) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    VAL             shift and go to state 10
    VAR             shift and go to state 12
    ID              shift and go to state 11
    FUNCTION        shift and go to state 14
    COMMENT         shift and go to state 15

    program                        shift and go to state 1
    main_block_sequence            shift and go to state 2
    main_block                     shift and go to state 3
    constant_declaration           shift and go to state 4
    variable_declaration           shift and go to state 5
    var_const_update               shift and go to state 6
    function_declaration           shift and go to state 7
    main_function                  shift and go to state 8
    comment                        shift and go to state 9
    arrayaccess                    shift and go to state 13
    function_call                  shift and go to state 16

state 1

    (0) S' -> program .



state 2

    (1) program -> main_block_sequence .

    $end            reduce using rule 1 (program -> main_block_sequence .)


state 3

    (2) main_block_sequence -> main_block . main_block_sequence
    (3) main_block_sequence -> main_block .
    (2) main_block_sequence -> . main_block main_block_sequence
    (3) main_block_sequence -> . main_block
    (5) main_block -> . constant_declaration
    (6) main_block -> . variable_declaration
    (7) main_block -> . var_const_update
    (8) main_block -> . function_declaration
    (9) main_block -> . main_function
    (10) main_block -> . comment
    (11) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (12) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (13) var_const_update -> . ID ASSIGN expression SEMICOLON
    (14) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (15) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON
    (16) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE
    (17) main_function -> . FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE
    (4) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    $end            reduce using rule 3 (main_block_sequence -> main_block .)
    VAL             shift and go to state 10
    VAR             shift and go to state 12
    ID              shift and go to state 11
    FUNCTION        shift and go to state 14
    COMMENT         shift and go to state 15

    main_block                     shift and go to state 3
    main_block_sequence            shift and go to state 17
    constant_declaration           shift and go to state 4
    variable_declaration           shift and go to state 5
    var_const_update               shift and go to state 6
    function_declaration           shift and go to state 7
    main_function                  shift and go to state 8
    comment                        shift and go to state 9
    arrayaccess                    shift and go to state 13
    function_call                  shift and go to state 16

state 4

    (5) main_block -> constant_declaration .

    VAL             reduce using rule 5 (main_block -> constant_declaration .)
    VAR             reduce using rule 5 (main_block -> constant_declaration .)
    ID              reduce using rule 5 (main_block -> constant_declaration .)
    FUNCTION        reduce using rule 5 (main_block -> constant_declaration .)
    COMMENT         reduce using rule 5 (main_block -> constant_declaration .)
    $end            reduce using rule 5 (main_block -> constant_declaration .)


state 5

    (6) main_block -> variable_declaration .

    VAL             reduce using rule 6 (main_block -> variable_declaration .)
    VAR             reduce using rule 6 (main_block -> variable_declaration .)
    ID              reduce using rule 6 (main_block -> variable_declaration .)
    FUNCTION        reduce using rule 6 (main_block -> variable_declaration .)
    COMMENT         reduce using rule 6 (main_block -> variable_declaration .)
    $end            reduce using rule 6 (main_block -> variable_declaration .)


state 6

    (7) main_block -> var_const_update .

    VAL             reduce using rule 7 (main_block -> var_const_update .)
    VAR             reduce using rule 7 (main_block -> var_const_update .)
    ID              reduce using rule 7 (main_block -> var_const_update .)
    FUNCTION        reduce using rule 7 (main_block -> var_const_update .)
    COMMENT         reduce using rule 7 (main_block -> var_const_update .)
    $end            reduce using rule 7 (main_block -> var_const_update .)


state 7

    (8) main_block -> function_declaration .

    VAL             reduce using rule 8 (main_block -> function_declaration .)
    VAR             reduce using rule 8 (main_block -> function_declaration .)
    ID              reduce using rule 8 (main_block -> function_declaration .)
    FUNCTION        reduce using rule 8 (main_block -> function_declaration .)
    COMMENT         reduce using rule 8 (main_block -> function_declaration .)
    $end            reduce using rule 8 (main_block -> function_declaration .)


state 8

    (9) main_block -> main_function .

    VAL             reduce using rule 9 (main_block -> main_function .)
    VAR             reduce using rule 9 (main_block -> main_function .)
    ID              reduce using rule 9 (main_block -> main_function .)
    FUNCTION        reduce using rule 9 (main_block -> main_function .)
    COMMENT         reduce using rule 9 (main_block -> main_function .)
    $end            reduce using rule 9 (main_block -> main_function .)


state 9

    (10) main_block -> comment .

    VAL             reduce using rule 10 (main_block -> comment .)
    VAR             reduce using rule 10 (main_block -> comment .)
    ID              reduce using rule 10 (main_block -> comment .)
    FUNCTION        reduce using rule 10 (main_block -> comment .)
    COMMENT         reduce using rule 10 (main_block -> comment .)
    $end            reduce using rule 10 (main_block -> comment .)


state 10

    (11) constant_declaration -> VAL . ID COLON types ASSIGN expression SEMICOLON

    ID              shift and go to state 18


state 11

    (13) var_const_update -> ID . ASSIGN expression SEMICOLON
    (53) arrayaccess -> ID . LSQUARE expression RSQUARE
    (22) function_call -> ID . LPAREN function_param_list_call RPAREN
    (23) function_call -> ID . LPAREN RPAREN

    ASSIGN          shift and go to state 19
    LSQUARE         shift and go to state 20
    LPAREN          shift and go to state 21


state 12

    (12) variable_declaration -> VAR . ID COLON types ASSIGN expression SEMICOLON

    ID              shift and go to state 22


state 13

    (14) var_const_update -> arrayaccess . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 23


state 14

    (15) function_declaration -> FUNCTION . ID LPAREN function_param_list RPAREN COLON types SEMICOLON
    (16) function_declaration -> FUNCTION . ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE
    (17) main_function -> FUNCTION . MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE

    ID              shift and go to state 24
    MAIN            shift and go to state 25


state 15

    (4) comment -> COMMENT . STRING_LITERAL

    STRING_LITERAL  shift and go to state 26


state 16

    (54) arrayaccess -> function_call . LSQUARE expression RSQUARE

    LSQUARE         shift and go to state 27


state 17

    (2) main_block_sequence -> main_block main_block_sequence .

    $end            reduce using rule 2 (main_block_sequence -> main_block main_block_sequence .)


state 18

    (11) constant_declaration -> VAL ID . COLON types ASSIGN expression SEMICOLON

    COLON           shift and go to state 28


state 19

    (13) var_const_update -> ID ASSIGN . expression SEMICOLON
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 30
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 20

    (53) arrayaccess -> ID LSQUARE . expression RSQUARE
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 41
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 21

    (22) function_call -> ID LPAREN . function_param_list_call RPAREN
    (23) function_call -> ID LPAREN . RPAREN
    (24) function_param_list_call -> . expression COMMA function_param_list_call
    (25) function_param_list_call -> . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 43
    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    function_param_list_call       shift and go to state 42
    expression                     shift and go to state 44
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 22

    (12) variable_declaration -> VAR ID . COLON types ASSIGN expression SEMICOLON

    COLON           shift and go to state 45


state 23

    (14) var_const_update -> arrayaccess ASSIGN . expression SEMICOLON
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    arrayaccess                    shift and go to state 38
    expression                     shift and go to state 46
    function_call                  shift and go to state 39

state 24

    (15) function_declaration -> FUNCTION ID . LPAREN function_param_list RPAREN COLON types SEMICOLON
    (16) function_declaration -> FUNCTION ID . LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE

    LPAREN          shift and go to state 47


state 25

    (17) main_function -> FUNCTION MAIN . LPAREN function_param_list RPAREN LBRACE function_body RBRACE

    LPAREN          shift and go to state 48


state 26

    (4) comment -> COMMENT STRING_LITERAL .

    VAL             reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    VAR             reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    ID              reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    FUNCTION        reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    COMMENT         reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    $end            reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    IF              reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    WHILE           reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    RBRACE          reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)


state 27

    (54) arrayaccess -> function_call LSQUARE . expression RSQUARE
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    function_call                  shift and go to state 39
    expression                     shift and go to state 49
    arrayaccess                    shift and go to state 38

state 28

    (11) constant_declaration -> VAL ID COLON . types ASSIGN expression SEMICOLON
    (39) types -> . defaulttype
    (40) types -> . LSQUARE arraytype RSQUARE
    (41) defaulttype -> . INT_TYPE
    (42) defaulttype -> . FLOAT_TYPE
    (43) defaulttype -> . STRING_TYPE
    (44) defaulttype -> . BOOL_TYPE
    (45) defaulttype -> . VOID_TYPE
    (46) defaulttype -> . CHAR_TYPE

    LSQUARE         shift and go to state 52
    INT_TYPE        shift and go to state 53
    FLOAT_TYPE      shift and go to state 54
    STRING_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VOID_TYPE       shift and go to state 57
    CHAR_TYPE       shift and go to state 58

    types                          shift and go to state 50
    defaulttype                    shift and go to state 51

state 29

    (55) expression -> ID .
    (53) arrayaccess -> ID . LSQUARE expression RSQUARE
    (22) function_call -> ID . LPAREN function_param_list_call RPAREN
    (23) function_call -> ID . LPAREN RPAREN

    SEMICOLON       reduce using rule 55 (expression -> ID .)
    PLUS            reduce using rule 55 (expression -> ID .)
    MINUS           reduce using rule 55 (expression -> ID .)
    TIMES           reduce using rule 55 (expression -> ID .)
    DIVIDE          reduce using rule 55 (expression -> ID .)
    MOD             reduce using rule 55 (expression -> ID .)
    POWER           reduce using rule 55 (expression -> ID .)
    EQUAL           reduce using rule 55 (expression -> ID .)
    NOT_EQUAL       reduce using rule 55 (expression -> ID .)
    GREATER_THAN    reduce using rule 55 (expression -> ID .)
    GREATER_THAN_EQUAL reduce using rule 55 (expression -> ID .)
    LESS_THAN       reduce using rule 55 (expression -> ID .)
    LESS_THAN_EQUAL reduce using rule 55 (expression -> ID .)
    AND             reduce using rule 55 (expression -> ID .)
    OR              reduce using rule 55 (expression -> ID .)
    RSQUARE         reduce using rule 55 (expression -> ID .)
    COMMA           reduce using rule 55 (expression -> ID .)
    RPAREN          reduce using rule 55 (expression -> ID .)
    LBRACE          reduce using rule 55 (expression -> ID .)
    LSQUARE         shift and go to state 20
    LPAREN          shift and go to state 21


state 30

    (13) var_const_update -> ID ASSIGN expression . SEMICOLON
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 31

    (56) expression -> INTEGER_LITERAL .

    SEMICOLON       reduce using rule 56 (expression -> INTEGER_LITERAL .)
    PLUS            reduce using rule 56 (expression -> INTEGER_LITERAL .)
    MINUS           reduce using rule 56 (expression -> INTEGER_LITERAL .)
    TIMES           reduce using rule 56 (expression -> INTEGER_LITERAL .)
    DIVIDE          reduce using rule 56 (expression -> INTEGER_LITERAL .)
    MOD             reduce using rule 56 (expression -> INTEGER_LITERAL .)
    POWER           reduce using rule 56 (expression -> INTEGER_LITERAL .)
    EQUAL           reduce using rule 56 (expression -> INTEGER_LITERAL .)
    NOT_EQUAL       reduce using rule 56 (expression -> INTEGER_LITERAL .)
    GREATER_THAN    reduce using rule 56 (expression -> INTEGER_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 56 (expression -> INTEGER_LITERAL .)
    LESS_THAN       reduce using rule 56 (expression -> INTEGER_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 56 (expression -> INTEGER_LITERAL .)
    AND             reduce using rule 56 (expression -> INTEGER_LITERAL .)
    OR              reduce using rule 56 (expression -> INTEGER_LITERAL .)
    RSQUARE         reduce using rule 56 (expression -> INTEGER_LITERAL .)
    COMMA           reduce using rule 56 (expression -> INTEGER_LITERAL .)
    RPAREN          reduce using rule 56 (expression -> INTEGER_LITERAL .)
    LBRACE          reduce using rule 56 (expression -> INTEGER_LITERAL .)


state 32

    (57) expression -> FLOAT_LITERAL .

    SEMICOLON       reduce using rule 57 (expression -> FLOAT_LITERAL .)
    PLUS            reduce using rule 57 (expression -> FLOAT_LITERAL .)
    MINUS           reduce using rule 57 (expression -> FLOAT_LITERAL .)
    TIMES           reduce using rule 57 (expression -> FLOAT_LITERAL .)
    DIVIDE          reduce using rule 57 (expression -> FLOAT_LITERAL .)
    MOD             reduce using rule 57 (expression -> FLOAT_LITERAL .)
    POWER           reduce using rule 57 (expression -> FLOAT_LITERAL .)
    EQUAL           reduce using rule 57 (expression -> FLOAT_LITERAL .)
    NOT_EQUAL       reduce using rule 57 (expression -> FLOAT_LITERAL .)
    GREATER_THAN    reduce using rule 57 (expression -> FLOAT_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 57 (expression -> FLOAT_LITERAL .)
    LESS_THAN       reduce using rule 57 (expression -> FLOAT_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 57 (expression -> FLOAT_LITERAL .)
    AND             reduce using rule 57 (expression -> FLOAT_LITERAL .)
    OR              reduce using rule 57 (expression -> FLOAT_LITERAL .)
    RSQUARE         reduce using rule 57 (expression -> FLOAT_LITERAL .)
    COMMA           reduce using rule 57 (expression -> FLOAT_LITERAL .)
    RPAREN          reduce using rule 57 (expression -> FLOAT_LITERAL .)
    LBRACE          reduce using rule 57 (expression -> FLOAT_LITERAL .)


state 33

    (58) expression -> STRING_LITERAL .

    SEMICOLON       reduce using rule 58 (expression -> STRING_LITERAL .)
    PLUS            reduce using rule 58 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 58 (expression -> STRING_LITERAL .)
    TIMES           reduce using rule 58 (expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 58 (expression -> STRING_LITERAL .)
    MOD             reduce using rule 58 (expression -> STRING_LITERAL .)
    POWER           reduce using rule 58 (expression -> STRING_LITERAL .)
    EQUAL           reduce using rule 58 (expression -> STRING_LITERAL .)
    NOT_EQUAL       reduce using rule 58 (expression -> STRING_LITERAL .)
    GREATER_THAN    reduce using rule 58 (expression -> STRING_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 58 (expression -> STRING_LITERAL .)
    LESS_THAN       reduce using rule 58 (expression -> STRING_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 58 (expression -> STRING_LITERAL .)
    AND             reduce using rule 58 (expression -> STRING_LITERAL .)
    OR              reduce using rule 58 (expression -> STRING_LITERAL .)
    RSQUARE         reduce using rule 58 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 58 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 58 (expression -> STRING_LITERAL .)
    LBRACE          reduce using rule 58 (expression -> STRING_LITERAL .)


state 34

    (59) expression -> BOOL_LITERAL .

    SEMICOLON       reduce using rule 59 (expression -> BOOL_LITERAL .)
    PLUS            reduce using rule 59 (expression -> BOOL_LITERAL .)
    MINUS           reduce using rule 59 (expression -> BOOL_LITERAL .)
    TIMES           reduce using rule 59 (expression -> BOOL_LITERAL .)
    DIVIDE          reduce using rule 59 (expression -> BOOL_LITERAL .)
    MOD             reduce using rule 59 (expression -> BOOL_LITERAL .)
    POWER           reduce using rule 59 (expression -> BOOL_LITERAL .)
    EQUAL           reduce using rule 59 (expression -> BOOL_LITERAL .)
    NOT_EQUAL       reduce using rule 59 (expression -> BOOL_LITERAL .)
    GREATER_THAN    reduce using rule 59 (expression -> BOOL_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 59 (expression -> BOOL_LITERAL .)
    LESS_THAN       reduce using rule 59 (expression -> BOOL_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 59 (expression -> BOOL_LITERAL .)
    AND             reduce using rule 59 (expression -> BOOL_LITERAL .)
    OR              reduce using rule 59 (expression -> BOOL_LITERAL .)
    RSQUARE         reduce using rule 59 (expression -> BOOL_LITERAL .)
    COMMA           reduce using rule 59 (expression -> BOOL_LITERAL .)
    RPAREN          reduce using rule 59 (expression -> BOOL_LITERAL .)
    LBRACE          reduce using rule 59 (expression -> BOOL_LITERAL .)


state 35

    (60) expression -> CHAR_LITERAL .

    SEMICOLON       reduce using rule 60 (expression -> CHAR_LITERAL .)
    PLUS            reduce using rule 60 (expression -> CHAR_LITERAL .)
    MINUS           reduce using rule 60 (expression -> CHAR_LITERAL .)
    TIMES           reduce using rule 60 (expression -> CHAR_LITERAL .)
    DIVIDE          reduce using rule 60 (expression -> CHAR_LITERAL .)
    MOD             reduce using rule 60 (expression -> CHAR_LITERAL .)
    POWER           reduce using rule 60 (expression -> CHAR_LITERAL .)
    EQUAL           reduce using rule 60 (expression -> CHAR_LITERAL .)
    NOT_EQUAL       reduce using rule 60 (expression -> CHAR_LITERAL .)
    GREATER_THAN    reduce using rule 60 (expression -> CHAR_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 60 (expression -> CHAR_LITERAL .)
    LESS_THAN       reduce using rule 60 (expression -> CHAR_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 60 (expression -> CHAR_LITERAL .)
    AND             reduce using rule 60 (expression -> CHAR_LITERAL .)
    OR              reduce using rule 60 (expression -> CHAR_LITERAL .)
    RSQUARE         reduce using rule 60 (expression -> CHAR_LITERAL .)
    COMMA           reduce using rule 60 (expression -> CHAR_LITERAL .)
    RPAREN          reduce using rule 60 (expression -> CHAR_LITERAL .)
    LBRACE          reduce using rule 60 (expression -> CHAR_LITERAL .)


state 36

    (76) expression -> MINUS . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 74
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 37

    (75) expression -> NOT . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 75
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 38

    (77) expression -> arrayaccess .

    SEMICOLON       reduce using rule 77 (expression -> arrayaccess .)
    PLUS            reduce using rule 77 (expression -> arrayaccess .)
    MINUS           reduce using rule 77 (expression -> arrayaccess .)
    TIMES           reduce using rule 77 (expression -> arrayaccess .)
    DIVIDE          reduce using rule 77 (expression -> arrayaccess .)
    MOD             reduce using rule 77 (expression -> arrayaccess .)
    POWER           reduce using rule 77 (expression -> arrayaccess .)
    EQUAL           reduce using rule 77 (expression -> arrayaccess .)
    NOT_EQUAL       reduce using rule 77 (expression -> arrayaccess .)
    GREATER_THAN    reduce using rule 77 (expression -> arrayaccess .)
    GREATER_THAN_EQUAL reduce using rule 77 (expression -> arrayaccess .)
    LESS_THAN       reduce using rule 77 (expression -> arrayaccess .)
    LESS_THAN_EQUAL reduce using rule 77 (expression -> arrayaccess .)
    AND             reduce using rule 77 (expression -> arrayaccess .)
    OR              reduce using rule 77 (expression -> arrayaccess .)
    RSQUARE         reduce using rule 77 (expression -> arrayaccess .)
    COMMA           reduce using rule 77 (expression -> arrayaccess .)
    RPAREN          reduce using rule 77 (expression -> arrayaccess .)
    LBRACE          reduce using rule 77 (expression -> arrayaccess .)


state 39

    (78) expression -> function_call .
    (54) arrayaccess -> function_call . LSQUARE expression RSQUARE

    SEMICOLON       reduce using rule 78 (expression -> function_call .)
    PLUS            reduce using rule 78 (expression -> function_call .)
    MINUS           reduce using rule 78 (expression -> function_call .)
    TIMES           reduce using rule 78 (expression -> function_call .)
    DIVIDE          reduce using rule 78 (expression -> function_call .)
    MOD             reduce using rule 78 (expression -> function_call .)
    POWER           reduce using rule 78 (expression -> function_call .)
    EQUAL           reduce using rule 78 (expression -> function_call .)
    NOT_EQUAL       reduce using rule 78 (expression -> function_call .)
    GREATER_THAN    reduce using rule 78 (expression -> function_call .)
    GREATER_THAN_EQUAL reduce using rule 78 (expression -> function_call .)
    LESS_THAN       reduce using rule 78 (expression -> function_call .)
    LESS_THAN_EQUAL reduce using rule 78 (expression -> function_call .)
    AND             reduce using rule 78 (expression -> function_call .)
    OR              reduce using rule 78 (expression -> function_call .)
    RSQUARE         reduce using rule 78 (expression -> function_call .)
    COMMA           reduce using rule 78 (expression -> function_call .)
    RPAREN          reduce using rule 78 (expression -> function_call .)
    LBRACE          reduce using rule 78 (expression -> function_call .)
    LSQUARE         shift and go to state 27


state 40

    (79) expression -> LPAREN . expression RPAREN
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 76
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 41

    (53) arrayaccess -> ID LSQUARE expression . RSQUARE
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    RSQUARE         shift and go to state 77
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 42

    (22) function_call -> ID LPAREN function_param_list_call . RPAREN

    RPAREN          shift and go to state 78


state 43

    (23) function_call -> ID LPAREN RPAREN .

    LSQUARE         reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    POWER           reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    EQUAL           reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN_EQUAL reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    RSQUARE         reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 23 (function_call -> ID LPAREN RPAREN .)
    LBRACE          reduce using rule 23 (function_call -> ID LPAREN RPAREN .)


state 44

    (24) function_param_list_call -> expression . COMMA function_param_list_call
    (25) function_param_list_call -> expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    COMMA           shift and go to state 79
    RPAREN          reduce using rule 25 (function_param_list_call -> expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 45

    (12) variable_declaration -> VAR ID COLON . types ASSIGN expression SEMICOLON
    (39) types -> . defaulttype
    (40) types -> . LSQUARE arraytype RSQUARE
    (41) defaulttype -> . INT_TYPE
    (42) defaulttype -> . FLOAT_TYPE
    (43) defaulttype -> . STRING_TYPE
    (44) defaulttype -> . BOOL_TYPE
    (45) defaulttype -> . VOID_TYPE
    (46) defaulttype -> . CHAR_TYPE

    LSQUARE         shift and go to state 52
    INT_TYPE        shift and go to state 53
    FLOAT_TYPE      shift and go to state 54
    STRING_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VOID_TYPE       shift and go to state 57
    CHAR_TYPE       shift and go to state 58

    types                          shift and go to state 80
    defaulttype                    shift and go to state 51

state 46

    (14) var_const_update -> arrayaccess ASSIGN expression . SEMICOLON
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       shift and go to state 81
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 47

    (15) function_declaration -> FUNCTION ID LPAREN . function_param_list RPAREN COLON types SEMICOLON
    (16) function_declaration -> FUNCTION ID LPAREN . function_param_list RPAREN COLON types LBRACE function_body RBRACE
    (18) function_param_list -> . parameter COMMA function_param_list
    (19) function_param_list -> . parameter
    (20) parameter -> . VAL ID COLON types
    (21) parameter -> . VAR ID COLON types

    VAL             shift and go to state 84
    VAR             shift and go to state 85

    function_param_list            shift and go to state 82
    parameter                      shift and go to state 83

state 48

    (17) main_function -> FUNCTION MAIN LPAREN . function_param_list RPAREN LBRACE function_body RBRACE
    (18) function_param_list -> . parameter COMMA function_param_list
    (19) function_param_list -> . parameter
    (20) parameter -> . VAL ID COLON types
    (21) parameter -> . VAR ID COLON types

    VAL             shift and go to state 84
    VAR             shift and go to state 85

    function_param_list            shift and go to state 86
    parameter                      shift and go to state 83

state 49

    (54) arrayaccess -> function_call LSQUARE expression . RSQUARE
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    RSQUARE         shift and go to state 87
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 50

    (11) constant_declaration -> VAL ID COLON types . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 88


state 51

    (39) types -> defaulttype .

    ASSIGN          reduce using rule 39 (types -> defaulttype .)
    SEMICOLON       reduce using rule 39 (types -> defaulttype .)
    LBRACE          reduce using rule 39 (types -> defaulttype .)
    COMMA           reduce using rule 39 (types -> defaulttype .)
    RPAREN          reduce using rule 39 (types -> defaulttype .)


state 52

    (40) types -> LSQUARE . arraytype RSQUARE
    (47) arraytype -> . LSQUARE arraytype RSQUARE
    (48) arraytype -> . INT_TYPE
    (49) arraytype -> . FLOAT_TYPE
    (50) arraytype -> . STRING_TYPE
    (51) arraytype -> . BOOL_TYPE
    (52) arraytype -> . VOID_TYPE

    LSQUARE         shift and go to state 89
    INT_TYPE        shift and go to state 91
    FLOAT_TYPE      shift and go to state 92
    STRING_TYPE     shift and go to state 93
    BOOL_TYPE       shift and go to state 94
    VOID_TYPE       shift and go to state 95

    arraytype                      shift and go to state 90

state 53

    (41) defaulttype -> INT_TYPE .

    ASSIGN          reduce using rule 41 (defaulttype -> INT_TYPE .)
    SEMICOLON       reduce using rule 41 (defaulttype -> INT_TYPE .)
    LBRACE          reduce using rule 41 (defaulttype -> INT_TYPE .)
    COMMA           reduce using rule 41 (defaulttype -> INT_TYPE .)
    RPAREN          reduce using rule 41 (defaulttype -> INT_TYPE .)


state 54

    (42) defaulttype -> FLOAT_TYPE .

    ASSIGN          reduce using rule 42 (defaulttype -> FLOAT_TYPE .)
    SEMICOLON       reduce using rule 42 (defaulttype -> FLOAT_TYPE .)
    LBRACE          reduce using rule 42 (defaulttype -> FLOAT_TYPE .)
    COMMA           reduce using rule 42 (defaulttype -> FLOAT_TYPE .)
    RPAREN          reduce using rule 42 (defaulttype -> FLOAT_TYPE .)


state 55

    (43) defaulttype -> STRING_TYPE .

    ASSIGN          reduce using rule 43 (defaulttype -> STRING_TYPE .)
    SEMICOLON       reduce using rule 43 (defaulttype -> STRING_TYPE .)
    LBRACE          reduce using rule 43 (defaulttype -> STRING_TYPE .)
    COMMA           reduce using rule 43 (defaulttype -> STRING_TYPE .)
    RPAREN          reduce using rule 43 (defaulttype -> STRING_TYPE .)


state 56

    (44) defaulttype -> BOOL_TYPE .

    ASSIGN          reduce using rule 44 (defaulttype -> BOOL_TYPE .)
    SEMICOLON       reduce using rule 44 (defaulttype -> BOOL_TYPE .)
    LBRACE          reduce using rule 44 (defaulttype -> BOOL_TYPE .)
    COMMA           reduce using rule 44 (defaulttype -> BOOL_TYPE .)
    RPAREN          reduce using rule 44 (defaulttype -> BOOL_TYPE .)


state 57

    (45) defaulttype -> VOID_TYPE .

    ASSIGN          reduce using rule 45 (defaulttype -> VOID_TYPE .)
    SEMICOLON       reduce using rule 45 (defaulttype -> VOID_TYPE .)
    LBRACE          reduce using rule 45 (defaulttype -> VOID_TYPE .)
    COMMA           reduce using rule 45 (defaulttype -> VOID_TYPE .)
    RPAREN          reduce using rule 45 (defaulttype -> VOID_TYPE .)


state 58

    (46) defaulttype -> CHAR_TYPE .

    ASSIGN          reduce using rule 46 (defaulttype -> CHAR_TYPE .)
    SEMICOLON       reduce using rule 46 (defaulttype -> CHAR_TYPE .)
    LBRACE          reduce using rule 46 (defaulttype -> CHAR_TYPE .)
    COMMA           reduce using rule 46 (defaulttype -> CHAR_TYPE .)
    RPAREN          reduce using rule 46 (defaulttype -> CHAR_TYPE .)


state 59

    (13) var_const_update -> ID ASSIGN expression SEMICOLON .

    VAL             reduce using rule 13 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 13 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 13 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 13 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 13 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 13 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 13 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 13 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 13 (var_const_update -> ID ASSIGN expression SEMICOLON .)


state 60

    (61) expression -> expression PLUS . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 96
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 61

    (62) expression -> expression MINUS . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 97
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 62

    (63) expression -> expression TIMES . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 98
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 63

    (64) expression -> expression DIVIDE . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 99
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 64

    (65) expression -> expression MOD . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 100
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 65

    (66) expression -> expression POWER . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 101
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 66

    (67) expression -> expression EQUAL . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 102
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 67

    (68) expression -> expression NOT_EQUAL . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 103
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 68

    (69) expression -> expression GREATER_THAN . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 104
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 69

    (70) expression -> expression GREATER_THAN_EQUAL . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 105
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 70

    (71) expression -> expression LESS_THAN . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 106
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 71

    (72) expression -> expression LESS_THAN_EQUAL . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 107
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 72

    (73) expression -> expression AND . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 108
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 73

    (74) expression -> expression OR . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 109
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 74

    (76) expression -> MINUS expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 76 (expression -> MINUS expression .)
    PLUS            reduce using rule 76 (expression -> MINUS expression .)
    MINUS           reduce using rule 76 (expression -> MINUS expression .)
    TIMES           reduce using rule 76 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 76 (expression -> MINUS expression .)
    MOD             reduce using rule 76 (expression -> MINUS expression .)
    EQUAL           reduce using rule 76 (expression -> MINUS expression .)
    NOT_EQUAL       reduce using rule 76 (expression -> MINUS expression .)
    GREATER_THAN    reduce using rule 76 (expression -> MINUS expression .)
    GREATER_THAN_EQUAL reduce using rule 76 (expression -> MINUS expression .)
    LESS_THAN       reduce using rule 76 (expression -> MINUS expression .)
    LESS_THAN_EQUAL reduce using rule 76 (expression -> MINUS expression .)
    AND             reduce using rule 76 (expression -> MINUS expression .)
    OR              reduce using rule 76 (expression -> MINUS expression .)
    RSQUARE         reduce using rule 76 (expression -> MINUS expression .)
    COMMA           reduce using rule 76 (expression -> MINUS expression .)
    RPAREN          reduce using rule 76 (expression -> MINUS expression .)
    LBRACE          reduce using rule 76 (expression -> MINUS expression .)
    POWER           shift and go to state 65

  ! POWER           [ reduce using rule 76 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! MOD             [ shift and go to state 64 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 75

    (75) expression -> NOT expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 75 (expression -> NOT expression .)
    PLUS            reduce using rule 75 (expression -> NOT expression .)
    MINUS           reduce using rule 75 (expression -> NOT expression .)
    TIMES           reduce using rule 75 (expression -> NOT expression .)
    DIVIDE          reduce using rule 75 (expression -> NOT expression .)
    MOD             reduce using rule 75 (expression -> NOT expression .)
    POWER           reduce using rule 75 (expression -> NOT expression .)
    EQUAL           reduce using rule 75 (expression -> NOT expression .)
    NOT_EQUAL       reduce using rule 75 (expression -> NOT expression .)
    GREATER_THAN    reduce using rule 75 (expression -> NOT expression .)
    GREATER_THAN_EQUAL reduce using rule 75 (expression -> NOT expression .)
    LESS_THAN       reduce using rule 75 (expression -> NOT expression .)
    LESS_THAN_EQUAL reduce using rule 75 (expression -> NOT expression .)
    AND             reduce using rule 75 (expression -> NOT expression .)
    OR              reduce using rule 75 (expression -> NOT expression .)
    RSQUARE         reduce using rule 75 (expression -> NOT expression .)
    COMMA           reduce using rule 75 (expression -> NOT expression .)
    RPAREN          reduce using rule 75 (expression -> NOT expression .)
    LBRACE          reduce using rule 75 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! MOD             [ shift and go to state 64 ]
  ! POWER           [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 76

    (79) expression -> LPAREN expression . RPAREN
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    RPAREN          shift and go to state 110
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 77

    (53) arrayaccess -> ID LSQUARE expression RSQUARE .

    ASSIGN          reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    SEMICOLON       reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    PLUS            reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    MINUS           reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    TIMES           reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    DIVIDE          reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    MOD             reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    POWER           reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    EQUAL           reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    NOT_EQUAL       reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    GREATER_THAN    reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    GREATER_THAN_EQUAL reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    LESS_THAN       reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    LESS_THAN_EQUAL reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    AND             reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    OR              reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    RSQUARE         reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    COMMA           reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    RPAREN          reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)
    LBRACE          reduce using rule 53 (arrayaccess -> ID LSQUARE expression RSQUARE .)


state 78

    (22) function_call -> ID LPAREN function_param_list_call RPAREN .

    LSQUARE         reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    SEMICOLON       reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    PLUS            reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    MINUS           reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    TIMES           reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    DIVIDE          reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    MOD             reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    POWER           reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    EQUAL           reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    NOT_EQUAL       reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    GREATER_THAN    reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    LESS_THAN       reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    LESS_THAN_EQUAL reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    AND             reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    OR              reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    RSQUARE         reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    COMMA           reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    RPAREN          reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    LBRACE          reduce using rule 22 (function_call -> ID LPAREN function_param_list_call RPAREN .)


state 79

    (24) function_param_list_call -> expression COMMA . function_param_list_call
    (24) function_param_list_call -> . expression COMMA function_param_list_call
    (25) function_param_list_call -> . expression
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 44
    function_param_list_call       shift and go to state 111
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 80

    (12) variable_declaration -> VAR ID COLON types . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 112


state 81

    (14) var_const_update -> arrayaccess ASSIGN expression SEMICOLON .

    VAL             reduce using rule 14 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 14 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    ID              reduce using rule 14 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 14 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 14 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    $end            reduce using rule 14 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    IF              reduce using rule 14 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 14 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 14 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)


state 82

    (15) function_declaration -> FUNCTION ID LPAREN function_param_list . RPAREN COLON types SEMICOLON
    (16) function_declaration -> FUNCTION ID LPAREN function_param_list . RPAREN COLON types LBRACE function_body RBRACE

    RPAREN          shift and go to state 113


state 83

    (18) function_param_list -> parameter . COMMA function_param_list
    (19) function_param_list -> parameter .

    COMMA           shift and go to state 114
    RPAREN          reduce using rule 19 (function_param_list -> parameter .)


state 84

    (20) parameter -> VAL . ID COLON types

    ID              shift and go to state 115


state 85

    (21) parameter -> VAR . ID COLON types

    ID              shift and go to state 116


state 86

    (17) main_function -> FUNCTION MAIN LPAREN function_param_list . RPAREN LBRACE function_body RBRACE

    RPAREN          shift and go to state 117


state 87

    (54) arrayaccess -> function_call LSQUARE expression RSQUARE .

    ASSIGN          reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    SEMICOLON       reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    PLUS            reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    MINUS           reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    TIMES           reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    DIVIDE          reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    MOD             reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    POWER           reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    EQUAL           reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    NOT_EQUAL       reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    GREATER_THAN    reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    GREATER_THAN_EQUAL reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    LESS_THAN       reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    LESS_THAN_EQUAL reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    AND             reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    OR              reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    RSQUARE         reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    COMMA           reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    RPAREN          reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)
    LBRACE          reduce using rule 54 (arrayaccess -> function_call LSQUARE expression RSQUARE .)


state 88

    (11) constant_declaration -> VAL ID COLON types ASSIGN . expression SEMICOLON
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 118
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 89

    (47) arraytype -> LSQUARE . arraytype RSQUARE
    (47) arraytype -> . LSQUARE arraytype RSQUARE
    (48) arraytype -> . INT_TYPE
    (49) arraytype -> . FLOAT_TYPE
    (50) arraytype -> . STRING_TYPE
    (51) arraytype -> . BOOL_TYPE
    (52) arraytype -> . VOID_TYPE

    LSQUARE         shift and go to state 89
    INT_TYPE        shift and go to state 91
    FLOAT_TYPE      shift and go to state 92
    STRING_TYPE     shift and go to state 93
    BOOL_TYPE       shift and go to state 94
    VOID_TYPE       shift and go to state 95

    arraytype                      shift and go to state 119

state 90

    (40) types -> LSQUARE arraytype . RSQUARE

    RSQUARE         shift and go to state 120


state 91

    (48) arraytype -> INT_TYPE .

    RSQUARE         reduce using rule 48 (arraytype -> INT_TYPE .)


state 92

    (49) arraytype -> FLOAT_TYPE .

    RSQUARE         reduce using rule 49 (arraytype -> FLOAT_TYPE .)


state 93

    (50) arraytype -> STRING_TYPE .

    RSQUARE         reduce using rule 50 (arraytype -> STRING_TYPE .)


state 94

    (51) arraytype -> BOOL_TYPE .

    RSQUARE         reduce using rule 51 (arraytype -> BOOL_TYPE .)


state 95

    (52) arraytype -> VOID_TYPE .

    RSQUARE         reduce using rule 52 (arraytype -> VOID_TYPE .)


state 96

    (61) expression -> expression PLUS expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 61 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 61 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 61 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 61 (expression -> expression PLUS expression .)
    NOT_EQUAL       reduce using rule 61 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 61 (expression -> expression PLUS expression .)
    GREATER_THAN_EQUAL reduce using rule 61 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 61 (expression -> expression PLUS expression .)
    LESS_THAN_EQUAL reduce using rule 61 (expression -> expression PLUS expression .)
    AND             reduce using rule 61 (expression -> expression PLUS expression .)
    OR              reduce using rule 61 (expression -> expression PLUS expression .)
    RSQUARE         reduce using rule 61 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 61 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 61 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 61 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65

  ! TIMES           [ reduce using rule 61 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 61 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 61 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 97

    (62) expression -> expression MINUS expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 62 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 62 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 62 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 62 (expression -> expression MINUS expression .)
    NOT_EQUAL       reduce using rule 62 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 62 (expression -> expression MINUS expression .)
    GREATER_THAN_EQUAL reduce using rule 62 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 62 (expression -> expression MINUS expression .)
    LESS_THAN_EQUAL reduce using rule 62 (expression -> expression MINUS expression .)
    AND             reduce using rule 62 (expression -> expression MINUS expression .)
    OR              reduce using rule 62 (expression -> expression MINUS expression .)
    RSQUARE         reduce using rule 62 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 62 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 62 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 62 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65

  ! TIMES           [ reduce using rule 62 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 62 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 62 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 98

    (63) expression -> expression TIMES expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 63 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 63 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 63 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 63 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 63 (expression -> expression TIMES expression .)
    MOD             reduce using rule 63 (expression -> expression TIMES expression .)
    EQUAL           reduce using rule 63 (expression -> expression TIMES expression .)
    NOT_EQUAL       reduce using rule 63 (expression -> expression TIMES expression .)
    GREATER_THAN    reduce using rule 63 (expression -> expression TIMES expression .)
    GREATER_THAN_EQUAL reduce using rule 63 (expression -> expression TIMES expression .)
    LESS_THAN       reduce using rule 63 (expression -> expression TIMES expression .)
    LESS_THAN_EQUAL reduce using rule 63 (expression -> expression TIMES expression .)
    AND             reduce using rule 63 (expression -> expression TIMES expression .)
    OR              reduce using rule 63 (expression -> expression TIMES expression .)
    RSQUARE         reduce using rule 63 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 63 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 63 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 63 (expression -> expression TIMES expression .)
    POWER           shift and go to state 65

  ! POWER           [ reduce using rule 63 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! MOD             [ shift and go to state 64 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 99

    (64) expression -> expression DIVIDE expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 64 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 64 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 64 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 64 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 64 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 64 (expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 64 (expression -> expression DIVIDE expression .)
    NOT_EQUAL       reduce using rule 64 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 64 (expression -> expression DIVIDE expression .)
    GREATER_THAN_EQUAL reduce using rule 64 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 64 (expression -> expression DIVIDE expression .)
    LESS_THAN_EQUAL reduce using rule 64 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 64 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 64 (expression -> expression DIVIDE expression .)
    RSQUARE         reduce using rule 64 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 64 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 64 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 64 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 65

  ! POWER           [ reduce using rule 64 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! MOD             [ shift and go to state 64 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 100

    (65) expression -> expression MOD expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 65 (expression -> expression MOD expression .)
    PLUS            reduce using rule 65 (expression -> expression MOD expression .)
    MINUS           reduce using rule 65 (expression -> expression MOD expression .)
    TIMES           reduce using rule 65 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 65 (expression -> expression MOD expression .)
    MOD             reduce using rule 65 (expression -> expression MOD expression .)
    EQUAL           reduce using rule 65 (expression -> expression MOD expression .)
    NOT_EQUAL       reduce using rule 65 (expression -> expression MOD expression .)
    GREATER_THAN    reduce using rule 65 (expression -> expression MOD expression .)
    GREATER_THAN_EQUAL reduce using rule 65 (expression -> expression MOD expression .)
    LESS_THAN       reduce using rule 65 (expression -> expression MOD expression .)
    LESS_THAN_EQUAL reduce using rule 65 (expression -> expression MOD expression .)
    AND             reduce using rule 65 (expression -> expression MOD expression .)
    OR              reduce using rule 65 (expression -> expression MOD expression .)
    RSQUARE         reduce using rule 65 (expression -> expression MOD expression .)
    COMMA           reduce using rule 65 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 65 (expression -> expression MOD expression .)
    LBRACE          reduce using rule 65 (expression -> expression MOD expression .)
    POWER           shift and go to state 65

  ! POWER           [ reduce using rule 65 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! MOD             [ shift and go to state 64 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 101

    (66) expression -> expression POWER expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 66 (expression -> expression POWER expression .)
    PLUS            reduce using rule 66 (expression -> expression POWER expression .)
    MINUS           reduce using rule 66 (expression -> expression POWER expression .)
    TIMES           reduce using rule 66 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 66 (expression -> expression POWER expression .)
    MOD             reduce using rule 66 (expression -> expression POWER expression .)
    EQUAL           reduce using rule 66 (expression -> expression POWER expression .)
    NOT_EQUAL       reduce using rule 66 (expression -> expression POWER expression .)
    GREATER_THAN    reduce using rule 66 (expression -> expression POWER expression .)
    GREATER_THAN_EQUAL reduce using rule 66 (expression -> expression POWER expression .)
    LESS_THAN       reduce using rule 66 (expression -> expression POWER expression .)
    LESS_THAN_EQUAL reduce using rule 66 (expression -> expression POWER expression .)
    AND             reduce using rule 66 (expression -> expression POWER expression .)
    OR              reduce using rule 66 (expression -> expression POWER expression .)
    RSQUARE         reduce using rule 66 (expression -> expression POWER expression .)
    COMMA           reduce using rule 66 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 66 (expression -> expression POWER expression .)
    LBRACE          reduce using rule 66 (expression -> expression POWER expression .)
    POWER           shift and go to state 65

  ! POWER           [ reduce using rule 66 (expression -> expression POWER expression .) ]
  ! PLUS            [ shift and go to state 60 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 62 ]
  ! DIVIDE          [ shift and go to state 63 ]
  ! MOD             [ shift and go to state 64 ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 102

    (67) expression -> expression EQUAL expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 67 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 67 (expression -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 67 (expression -> expression EQUAL expression .)
    AND             reduce using rule 67 (expression -> expression EQUAL expression .)
    OR              reduce using rule 67 (expression -> expression EQUAL expression .)
    RSQUARE         reduce using rule 67 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 67 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 67 (expression -> expression EQUAL expression .)
    LBRACE          reduce using rule 67 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71

  ! PLUS            [ reduce using rule 67 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 67 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression -> expression EQUAL expression .) ]
  ! MOD             [ reduce using rule 67 (expression -> expression EQUAL expression .) ]
  ! POWER           [ reduce using rule 67 (expression -> expression EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 67 (expression -> expression EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 67 (expression -> expression EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 67 (expression -> expression EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 67 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 103

    (68) expression -> expression NOT_EQUAL expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 68 (expression -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 68 (expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 68 (expression -> expression NOT_EQUAL expression .)
    AND             reduce using rule 68 (expression -> expression NOT_EQUAL expression .)
    OR              reduce using rule 68 (expression -> expression NOT_EQUAL expression .)
    RSQUARE         reduce using rule 68 (expression -> expression NOT_EQUAL expression .)
    COMMA           reduce using rule 68 (expression -> expression NOT_EQUAL expression .)
    RPAREN          reduce using rule 68 (expression -> expression NOT_EQUAL expression .)
    LBRACE          reduce using rule 68 (expression -> expression NOT_EQUAL expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71

  ! PLUS            [ reduce using rule 68 (expression -> expression NOT_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression NOT_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 68 (expression -> expression NOT_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression -> expression NOT_EQUAL expression .) ]
  ! MOD             [ reduce using rule 68 (expression -> expression NOT_EQUAL expression .) ]
  ! POWER           [ reduce using rule 68 (expression -> expression NOT_EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 68 (expression -> expression NOT_EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 68 (expression -> expression NOT_EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 68 (expression -> expression NOT_EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 68 (expression -> expression NOT_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 104

    (69) expression -> expression GREATER_THAN expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 69 (expression -> expression GREATER_THAN expression .)
    EQUAL           reduce using rule 69 (expression -> expression GREATER_THAN expression .)
    NOT_EQUAL       reduce using rule 69 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 69 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 69 (expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 69 (expression -> expression GREATER_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 69 (expression -> expression GREATER_THAN expression .)
    AND             reduce using rule 69 (expression -> expression GREATER_THAN expression .)
    OR              reduce using rule 69 (expression -> expression GREATER_THAN expression .)
    RSQUARE         reduce using rule 69 (expression -> expression GREATER_THAN expression .)
    COMMA           reduce using rule 69 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 69 (expression -> expression GREATER_THAN expression .)
    LBRACE          reduce using rule 69 (expression -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65

  ! PLUS            [ reduce using rule 69 (expression -> expression GREATER_THAN expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression GREATER_THAN expression .) ]
  ! TIMES           [ reduce using rule 69 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression GREATER_THAN expression .) ]
  ! MOD             [ reduce using rule 69 (expression -> expression GREATER_THAN expression .) ]
  ! POWER           [ reduce using rule 69 (expression -> expression GREATER_THAN expression .) ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 105

    (70) expression -> expression GREATER_THAN_EQUAL expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .)
    EQUAL           reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .)
    NOT_EQUAL       reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .)
    AND             reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .)
    OR              reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .)
    RSQUARE         reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .)
    COMMA           reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .)
    RPAREN          reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .)
    LBRACE          reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65

  ! PLUS            [ reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MOD             [ reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! POWER           [ reduce using rule 70 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 106

    (71) expression -> expression LESS_THAN expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 71 (expression -> expression LESS_THAN expression .)
    EQUAL           reduce using rule 71 (expression -> expression LESS_THAN expression .)
    NOT_EQUAL       reduce using rule 71 (expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 71 (expression -> expression LESS_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 71 (expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 71 (expression -> expression LESS_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 71 (expression -> expression LESS_THAN expression .)
    AND             reduce using rule 71 (expression -> expression LESS_THAN expression .)
    OR              reduce using rule 71 (expression -> expression LESS_THAN expression .)
    RSQUARE         reduce using rule 71 (expression -> expression LESS_THAN expression .)
    COMMA           reduce using rule 71 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 71 (expression -> expression LESS_THAN expression .)
    LBRACE          reduce using rule 71 (expression -> expression LESS_THAN expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65

  ! PLUS            [ reduce using rule 71 (expression -> expression LESS_THAN expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> expression LESS_THAN expression .) ]
  ! TIMES           [ reduce using rule 71 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression -> expression LESS_THAN expression .) ]
  ! MOD             [ reduce using rule 71 (expression -> expression LESS_THAN expression .) ]
  ! POWER           [ reduce using rule 71 (expression -> expression LESS_THAN expression .) ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 107

    (72) expression -> expression LESS_THAN_EQUAL expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .)
    EQUAL           reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .)
    NOT_EQUAL       reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .)
    AND             reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .)
    OR              reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .)
    RSQUARE         reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .)
    COMMA           reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .)
    RPAREN          reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .)
    LBRACE          reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65

  ! PLUS            [ reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MOD             [ reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! POWER           [ reduce using rule 72 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 66 ]
  ! NOT_EQUAL       [ shift and go to state 67 ]
  ! GREATER_THAN    [ shift and go to state 68 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 69 ]
  ! LESS_THAN       [ shift and go to state 70 ]
  ! LESS_THAN_EQUAL [ shift and go to state 71 ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 108

    (73) expression -> expression AND expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 73 (expression -> expression AND expression .)
    AND             reduce using rule 73 (expression -> expression AND expression .)
    OR              reduce using rule 73 (expression -> expression AND expression .)
    RSQUARE         reduce using rule 73 (expression -> expression AND expression .)
    COMMA           reduce using rule 73 (expression -> expression AND expression .)
    RPAREN          reduce using rule 73 (expression -> expression AND expression .)
    LBRACE          reduce using rule 73 (expression -> expression AND expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71

  ! PLUS            [ reduce using rule 73 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 73 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 73 (expression -> expression AND expression .) ]
  ! POWER           [ reduce using rule 73 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 73 (expression -> expression AND expression .) ]
  ! NOT_EQUAL       [ reduce using rule 73 (expression -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 73 (expression -> expression AND expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 73 (expression -> expression AND expression .) ]
  ! LESS_THAN       [ reduce using rule 73 (expression -> expression AND expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 73 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 109

    (74) expression -> expression OR expression .
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       reduce using rule 74 (expression -> expression OR expression .)
    OR              reduce using rule 74 (expression -> expression OR expression .)
    RSQUARE         reduce using rule 74 (expression -> expression OR expression .)
    COMMA           reduce using rule 74 (expression -> expression OR expression .)
    RPAREN          reduce using rule 74 (expression -> expression OR expression .)
    LBRACE          reduce using rule 74 (expression -> expression OR expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72

  ! PLUS            [ reduce using rule 74 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 74 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 74 (expression -> expression OR expression .) ]
  ! POWER           [ reduce using rule 74 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 74 (expression -> expression OR expression .) ]
  ! NOT_EQUAL       [ reduce using rule 74 (expression -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 74 (expression -> expression OR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 74 (expression -> expression OR expression .) ]
  ! LESS_THAN       [ reduce using rule 74 (expression -> expression OR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 74 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 74 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 73 ]


state 110

    (79) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    LESS_THAN_EQUAL reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    RSQUARE         reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 79 (expression -> LPAREN expression RPAREN .)


state 111

    (24) function_param_list_call -> expression COMMA function_param_list_call .

    RPAREN          reduce using rule 24 (function_param_list_call -> expression COMMA function_param_list_call .)


state 112

    (12) variable_declaration -> VAR ID COLON types ASSIGN . expression SEMICOLON
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 121
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 113

    (15) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN . COLON types SEMICOLON
    (16) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN . COLON types LBRACE function_body RBRACE

    COLON           shift and go to state 122


state 114

    (18) function_param_list -> parameter COMMA . function_param_list
    (18) function_param_list -> . parameter COMMA function_param_list
    (19) function_param_list -> . parameter
    (20) parameter -> . VAL ID COLON types
    (21) parameter -> . VAR ID COLON types

    VAL             shift and go to state 84
    VAR             shift and go to state 85

    parameter                      shift and go to state 83
    function_param_list            shift and go to state 123

state 115

    (20) parameter -> VAL ID . COLON types

    COLON           shift and go to state 124


state 116

    (21) parameter -> VAR ID . COLON types

    COLON           shift and go to state 125


state 117

    (17) main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN . LBRACE function_body RBRACE

    LBRACE          shift and go to state 126


state 118

    (11) constant_declaration -> VAL ID COLON types ASSIGN expression . SEMICOLON
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       shift and go to state 127
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 119

    (47) arraytype -> LSQUARE arraytype . RSQUARE

    RSQUARE         shift and go to state 128


state 120

    (40) types -> LSQUARE arraytype RSQUARE .

    ASSIGN          reduce using rule 40 (types -> LSQUARE arraytype RSQUARE .)
    SEMICOLON       reduce using rule 40 (types -> LSQUARE arraytype RSQUARE .)
    LBRACE          reduce using rule 40 (types -> LSQUARE arraytype RSQUARE .)
    COMMA           reduce using rule 40 (types -> LSQUARE arraytype RSQUARE .)
    RPAREN          reduce using rule 40 (types -> LSQUARE arraytype RSQUARE .)


state 121

    (12) variable_declaration -> VAR ID COLON types ASSIGN expression . SEMICOLON
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    SEMICOLON       shift and go to state 129
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 122

    (15) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON . types SEMICOLON
    (16) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON . types LBRACE function_body RBRACE
    (39) types -> . defaulttype
    (40) types -> . LSQUARE arraytype RSQUARE
    (41) defaulttype -> . INT_TYPE
    (42) defaulttype -> . FLOAT_TYPE
    (43) defaulttype -> . STRING_TYPE
    (44) defaulttype -> . BOOL_TYPE
    (45) defaulttype -> . VOID_TYPE
    (46) defaulttype -> . CHAR_TYPE

    LSQUARE         shift and go to state 52
    INT_TYPE        shift and go to state 53
    FLOAT_TYPE      shift and go to state 54
    STRING_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VOID_TYPE       shift and go to state 57
    CHAR_TYPE       shift and go to state 58

    types                          shift and go to state 130
    defaulttype                    shift and go to state 51

state 123

    (18) function_param_list -> parameter COMMA function_param_list .

    RPAREN          reduce using rule 18 (function_param_list -> parameter COMMA function_param_list .)


state 124

    (20) parameter -> VAL ID COLON . types
    (39) types -> . defaulttype
    (40) types -> . LSQUARE arraytype RSQUARE
    (41) defaulttype -> . INT_TYPE
    (42) defaulttype -> . FLOAT_TYPE
    (43) defaulttype -> . STRING_TYPE
    (44) defaulttype -> . BOOL_TYPE
    (45) defaulttype -> . VOID_TYPE
    (46) defaulttype -> . CHAR_TYPE

    LSQUARE         shift and go to state 52
    INT_TYPE        shift and go to state 53
    FLOAT_TYPE      shift and go to state 54
    STRING_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VOID_TYPE       shift and go to state 57
    CHAR_TYPE       shift and go to state 58

    types                          shift and go to state 131
    defaulttype                    shift and go to state 51

state 125

    (21) parameter -> VAR ID COLON . types
    (39) types -> . defaulttype
    (40) types -> . LSQUARE arraytype RSQUARE
    (41) defaulttype -> . INT_TYPE
    (42) defaulttype -> . FLOAT_TYPE
    (43) defaulttype -> . STRING_TYPE
    (44) defaulttype -> . BOOL_TYPE
    (45) defaulttype -> . VOID_TYPE
    (46) defaulttype -> . CHAR_TYPE

    LSQUARE         shift and go to state 52
    INT_TYPE        shift and go to state 53
    FLOAT_TYPE      shift and go to state 54
    STRING_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VOID_TYPE       shift and go to state 57
    CHAR_TYPE       shift and go to state 58

    types                          shift and go to state 132
    defaulttype                    shift and go to state 51

state 126

    (17) main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE . function_body RBRACE
    (26) function_body -> . block_sequence
    (27) block_sequence -> . block block_sequence
    (28) block_sequence -> . block
    (29) block -> . constant_declaration
    (30) block -> . variable_declaration
    (31) block -> . var_const_update
    (32) block -> . if_block
    (33) block -> . while_block
    (34) block -> . function_call SEMICOLON
    (35) block -> . comment
    (11) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (12) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (13) var_const_update -> . ID ASSIGN expression SEMICOLON
    (14) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (36) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (37) if_block -> . IF expression LBRACE block_sequence RBRACE
    (38) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN
    (4) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE

    VAL             shift and go to state 10
    VAR             shift and go to state 12
    ID              shift and go to state 143
    IF              shift and go to state 144
    WHILE           shift and go to state 145
    COMMENT         shift and go to state 15

    function_body                  shift and go to state 133
    block_sequence                 shift and go to state 134
    block                          shift and go to state 135
    constant_declaration           shift and go to state 136
    variable_declaration           shift and go to state 137
    var_const_update               shift and go to state 138
    if_block                       shift and go to state 139
    while_block                    shift and go to state 140
    function_call                  shift and go to state 141
    comment                        shift and go to state 142
    arrayaccess                    shift and go to state 13

state 127

    (11) constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .

    VAL             reduce using rule 11 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 11 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    ID              reduce using rule 11 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 11 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 11 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    $end            reduce using rule 11 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    IF              reduce using rule 11 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 11 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 11 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)


state 128

    (47) arraytype -> LSQUARE arraytype RSQUARE .

    RSQUARE         reduce using rule 47 (arraytype -> LSQUARE arraytype RSQUARE .)


state 129

    (12) variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .

    VAL             reduce using rule 12 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 12 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    ID              reduce using rule 12 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 12 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 12 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    $end            reduce using rule 12 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    IF              reduce using rule 12 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 12 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 12 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)


state 130

    (15) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types . SEMICOLON
    (16) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types . LBRACE function_body RBRACE

    SEMICOLON       shift and go to state 146
    LBRACE          shift and go to state 147


state 131

    (20) parameter -> VAL ID COLON types .

    COMMA           reduce using rule 20 (parameter -> VAL ID COLON types .)
    RPAREN          reduce using rule 20 (parameter -> VAL ID COLON types .)


state 132

    (21) parameter -> VAR ID COLON types .

    COMMA           reduce using rule 21 (parameter -> VAR ID COLON types .)
    RPAREN          reduce using rule 21 (parameter -> VAR ID COLON types .)


state 133

    (17) main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body . RBRACE

    RBRACE          shift and go to state 148


state 134

    (26) function_body -> block_sequence .

    RBRACE          reduce using rule 26 (function_body -> block_sequence .)


state 135

    (27) block_sequence -> block . block_sequence
    (28) block_sequence -> block .
    (27) block_sequence -> . block block_sequence
    (28) block_sequence -> . block
    (29) block -> . constant_declaration
    (30) block -> . variable_declaration
    (31) block -> . var_const_update
    (32) block -> . if_block
    (33) block -> . while_block
    (34) block -> . function_call SEMICOLON
    (35) block -> . comment
    (11) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (12) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (13) var_const_update -> . ID ASSIGN expression SEMICOLON
    (14) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (36) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (37) if_block -> . IF expression LBRACE block_sequence RBRACE
    (38) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN
    (4) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE

    RBRACE          reduce using rule 28 (block_sequence -> block .)
    VAL             shift and go to state 10
    VAR             shift and go to state 12
    ID              shift and go to state 143
    IF              shift and go to state 144
    WHILE           shift and go to state 145
    COMMENT         shift and go to state 15

    block                          shift and go to state 135
    block_sequence                 shift and go to state 149
    constant_declaration           shift and go to state 136
    variable_declaration           shift and go to state 137
    var_const_update               shift and go to state 138
    if_block                       shift and go to state 139
    while_block                    shift and go to state 140
    function_call                  shift and go to state 141
    comment                        shift and go to state 142
    arrayaccess                    shift and go to state 13

state 136

    (29) block -> constant_declaration .

    VAL             reduce using rule 29 (block -> constant_declaration .)
    VAR             reduce using rule 29 (block -> constant_declaration .)
    ID              reduce using rule 29 (block -> constant_declaration .)
    IF              reduce using rule 29 (block -> constant_declaration .)
    WHILE           reduce using rule 29 (block -> constant_declaration .)
    COMMENT         reduce using rule 29 (block -> constant_declaration .)
    RBRACE          reduce using rule 29 (block -> constant_declaration .)


state 137

    (30) block -> variable_declaration .

    VAL             reduce using rule 30 (block -> variable_declaration .)
    VAR             reduce using rule 30 (block -> variable_declaration .)
    ID              reduce using rule 30 (block -> variable_declaration .)
    IF              reduce using rule 30 (block -> variable_declaration .)
    WHILE           reduce using rule 30 (block -> variable_declaration .)
    COMMENT         reduce using rule 30 (block -> variable_declaration .)
    RBRACE          reduce using rule 30 (block -> variable_declaration .)


state 138

    (31) block -> var_const_update .

    VAL             reduce using rule 31 (block -> var_const_update .)
    VAR             reduce using rule 31 (block -> var_const_update .)
    ID              reduce using rule 31 (block -> var_const_update .)
    IF              reduce using rule 31 (block -> var_const_update .)
    WHILE           reduce using rule 31 (block -> var_const_update .)
    COMMENT         reduce using rule 31 (block -> var_const_update .)
    RBRACE          reduce using rule 31 (block -> var_const_update .)


state 139

    (32) block -> if_block .

    VAL             reduce using rule 32 (block -> if_block .)
    VAR             reduce using rule 32 (block -> if_block .)
    ID              reduce using rule 32 (block -> if_block .)
    IF              reduce using rule 32 (block -> if_block .)
    WHILE           reduce using rule 32 (block -> if_block .)
    COMMENT         reduce using rule 32 (block -> if_block .)
    RBRACE          reduce using rule 32 (block -> if_block .)


state 140

    (33) block -> while_block .

    VAL             reduce using rule 33 (block -> while_block .)
    VAR             reduce using rule 33 (block -> while_block .)
    ID              reduce using rule 33 (block -> while_block .)
    IF              reduce using rule 33 (block -> while_block .)
    WHILE           reduce using rule 33 (block -> while_block .)
    COMMENT         reduce using rule 33 (block -> while_block .)
    RBRACE          reduce using rule 33 (block -> while_block .)


state 141

    (34) block -> function_call . SEMICOLON
    (54) arrayaccess -> function_call . LSQUARE expression RSQUARE

    SEMICOLON       shift and go to state 150
    LSQUARE         shift and go to state 27


state 142

    (35) block -> comment .

    VAL             reduce using rule 35 (block -> comment .)
    VAR             reduce using rule 35 (block -> comment .)
    ID              reduce using rule 35 (block -> comment .)
    IF              reduce using rule 35 (block -> comment .)
    WHILE           reduce using rule 35 (block -> comment .)
    COMMENT         reduce using rule 35 (block -> comment .)
    RBRACE          reduce using rule 35 (block -> comment .)


state 143

    (13) var_const_update -> ID . ASSIGN expression SEMICOLON
    (22) function_call -> ID . LPAREN function_param_list_call RPAREN
    (23) function_call -> ID . LPAREN RPAREN
    (53) arrayaccess -> ID . LSQUARE expression RSQUARE

    ASSIGN          shift and go to state 19
    LPAREN          shift and go to state 21
    LSQUARE         shift and go to state 20


state 144

    (36) if_block -> IF . expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (37) if_block -> IF . expression LBRACE block_sequence RBRACE
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 151
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 145

    (38) while_block -> WHILE . expression LBRACE block_sequence RBRACE
    (55) expression -> . ID
    (56) expression -> . INTEGER_LITERAL
    (57) expression -> . FLOAT_LITERAL
    (58) expression -> . STRING_LITERAL
    (59) expression -> . BOOL_LITERAL
    (60) expression -> . CHAR_LITERAL
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . expression MOD expression
    (66) expression -> . expression POWER expression
    (67) expression -> . expression EQUAL expression
    (68) expression -> . expression NOT_EQUAL expression
    (69) expression -> . expression GREATER_THAN expression
    (70) expression -> . expression GREATER_THAN_EQUAL expression
    (71) expression -> . expression LESS_THAN expression
    (72) expression -> . expression LESS_THAN_EQUAL expression
    (73) expression -> . expression AND expression
    (74) expression -> . expression OR expression
    (75) expression -> . NOT expression
    (76) expression -> . MINUS expression
    (77) expression -> . arrayaccess
    (78) expression -> . function_call
    (79) expression -> . LPAREN expression RPAREN
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN

    ID              shift and go to state 29
    INTEGER_LITERAL shift and go to state 31
    FLOAT_LITERAL   shift and go to state 32
    STRING_LITERAL  shift and go to state 33
    BOOL_LITERAL    shift and go to state 34
    CHAR_LITERAL    shift and go to state 35
    NOT             shift and go to state 37
    MINUS           shift and go to state 36
    LPAREN          shift and go to state 40

    expression                     shift and go to state 152
    arrayaccess                    shift and go to state 38
    function_call                  shift and go to state 39

state 146

    (15) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .

    VAL             reduce using rule 15 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    VAR             reduce using rule 15 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    ID              reduce using rule 15 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    FUNCTION        reduce using rule 15 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    COMMENT         reduce using rule 15 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    $end            reduce using rule 15 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)


state 147

    (16) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE . function_body RBRACE
    (26) function_body -> . block_sequence
    (27) block_sequence -> . block block_sequence
    (28) block_sequence -> . block
    (29) block -> . constant_declaration
    (30) block -> . variable_declaration
    (31) block -> . var_const_update
    (32) block -> . if_block
    (33) block -> . while_block
    (34) block -> . function_call SEMICOLON
    (35) block -> . comment
    (11) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (12) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (13) var_const_update -> . ID ASSIGN expression SEMICOLON
    (14) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (36) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (37) if_block -> . IF expression LBRACE block_sequence RBRACE
    (38) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN
    (4) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE

    VAL             shift and go to state 10
    VAR             shift and go to state 12
    ID              shift and go to state 143
    IF              shift and go to state 144
    WHILE           shift and go to state 145
    COMMENT         shift and go to state 15

    function_body                  shift and go to state 153
    block_sequence                 shift and go to state 134
    block                          shift and go to state 135
    constant_declaration           shift and go to state 136
    variable_declaration           shift and go to state 137
    var_const_update               shift and go to state 138
    if_block                       shift and go to state 139
    while_block                    shift and go to state 140
    function_call                  shift and go to state 141
    comment                        shift and go to state 142
    arrayaccess                    shift and go to state 13

state 148

    (17) main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .

    VAL             reduce using rule 17 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    VAR             reduce using rule 17 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    ID              reduce using rule 17 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    FUNCTION        reduce using rule 17 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    COMMENT         reduce using rule 17 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    $end            reduce using rule 17 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)


state 149

    (27) block_sequence -> block block_sequence .

    RBRACE          reduce using rule 27 (block_sequence -> block block_sequence .)


state 150

    (34) block -> function_call SEMICOLON .

    VAL             reduce using rule 34 (block -> function_call SEMICOLON .)
    VAR             reduce using rule 34 (block -> function_call SEMICOLON .)
    ID              reduce using rule 34 (block -> function_call SEMICOLON .)
    IF              reduce using rule 34 (block -> function_call SEMICOLON .)
    WHILE           reduce using rule 34 (block -> function_call SEMICOLON .)
    COMMENT         reduce using rule 34 (block -> function_call SEMICOLON .)
    RBRACE          reduce using rule 34 (block -> function_call SEMICOLON .)


state 151

    (36) if_block -> IF expression . LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (37) if_block -> IF expression . LBRACE block_sequence RBRACE
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    LBRACE          shift and go to state 154
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 152

    (38) while_block -> WHILE expression . LBRACE block_sequence RBRACE
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression
    (65) expression -> expression . MOD expression
    (66) expression -> expression . POWER expression
    (67) expression -> expression . EQUAL expression
    (68) expression -> expression . NOT_EQUAL expression
    (69) expression -> expression . GREATER_THAN expression
    (70) expression -> expression . GREATER_THAN_EQUAL expression
    (71) expression -> expression . LESS_THAN expression
    (72) expression -> expression . LESS_THAN_EQUAL expression
    (73) expression -> expression . AND expression
    (74) expression -> expression . OR expression

    LBRACE          shift and go to state 155
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 64
    POWER           shift and go to state 65
    EQUAL           shift and go to state 66
    NOT_EQUAL       shift and go to state 67
    GREATER_THAN    shift and go to state 68
    GREATER_THAN_EQUAL shift and go to state 69
    LESS_THAN       shift and go to state 70
    LESS_THAN_EQUAL shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73


state 153

    (16) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body . RBRACE

    RBRACE          shift and go to state 156


state 154

    (36) if_block -> IF expression LBRACE . block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (37) if_block -> IF expression LBRACE . block_sequence RBRACE
    (27) block_sequence -> . block block_sequence
    (28) block_sequence -> . block
    (29) block -> . constant_declaration
    (30) block -> . variable_declaration
    (31) block -> . var_const_update
    (32) block -> . if_block
    (33) block -> . while_block
    (34) block -> . function_call SEMICOLON
    (35) block -> . comment
    (11) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (12) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (13) var_const_update -> . ID ASSIGN expression SEMICOLON
    (14) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (36) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (37) if_block -> . IF expression LBRACE block_sequence RBRACE
    (38) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN
    (4) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE

    VAL             shift and go to state 10
    VAR             shift and go to state 12
    ID              shift and go to state 143
    IF              shift and go to state 144
    WHILE           shift and go to state 145
    COMMENT         shift and go to state 15

    block_sequence                 shift and go to state 157
    block                          shift and go to state 135
    constant_declaration           shift and go to state 136
    variable_declaration           shift and go to state 137
    var_const_update               shift and go to state 138
    if_block                       shift and go to state 139
    while_block                    shift and go to state 140
    function_call                  shift and go to state 141
    comment                        shift and go to state 142
    arrayaccess                    shift and go to state 13

state 155

    (38) while_block -> WHILE expression LBRACE . block_sequence RBRACE
    (27) block_sequence -> . block block_sequence
    (28) block_sequence -> . block
    (29) block -> . constant_declaration
    (30) block -> . variable_declaration
    (31) block -> . var_const_update
    (32) block -> . if_block
    (33) block -> . while_block
    (34) block -> . function_call SEMICOLON
    (35) block -> . comment
    (11) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (12) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (13) var_const_update -> . ID ASSIGN expression SEMICOLON
    (14) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (36) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (37) if_block -> . IF expression LBRACE block_sequence RBRACE
    (38) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN
    (4) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE

    VAL             shift and go to state 10
    VAR             shift and go to state 12
    ID              shift and go to state 143
    IF              shift and go to state 144
    WHILE           shift and go to state 145
    COMMENT         shift and go to state 15

    block_sequence                 shift and go to state 158
    block                          shift and go to state 135
    constant_declaration           shift and go to state 136
    variable_declaration           shift and go to state 137
    var_const_update               shift and go to state 138
    if_block                       shift and go to state 139
    while_block                    shift and go to state 140
    function_call                  shift and go to state 141
    comment                        shift and go to state 142
    arrayaccess                    shift and go to state 13

state 156

    (16) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .

    VAL             reduce using rule 16 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    VAR             reduce using rule 16 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    ID              reduce using rule 16 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    FUNCTION        reduce using rule 16 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    COMMENT         reduce using rule 16 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    $end            reduce using rule 16 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)


state 157

    (36) if_block -> IF expression LBRACE block_sequence . RBRACE ELSE LBRACE block_sequence RBRACE
    (37) if_block -> IF expression LBRACE block_sequence . RBRACE

    RBRACE          shift and go to state 159


state 158

    (38) while_block -> WHILE expression LBRACE block_sequence . RBRACE

    RBRACE          shift and go to state 160


state 159

    (36) if_block -> IF expression LBRACE block_sequence RBRACE . ELSE LBRACE block_sequence RBRACE
    (37) if_block -> IF expression LBRACE block_sequence RBRACE .

    ELSE            shift and go to state 161
    VAL             reduce using rule 37 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    VAR             reduce using rule 37 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    ID              reduce using rule 37 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    IF              reduce using rule 37 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    WHILE           reduce using rule 37 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    COMMENT         reduce using rule 37 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    RBRACE          reduce using rule 37 (if_block -> IF expression LBRACE block_sequence RBRACE .)


state 160

    (38) while_block -> WHILE expression LBRACE block_sequence RBRACE .

    VAL             reduce using rule 38 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    VAR             reduce using rule 38 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    ID              reduce using rule 38 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    IF              reduce using rule 38 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    WHILE           reduce using rule 38 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    COMMENT         reduce using rule 38 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    RBRACE          reduce using rule 38 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)


state 161

    (36) if_block -> IF expression LBRACE block_sequence RBRACE ELSE . LBRACE block_sequence RBRACE

    LBRACE          shift and go to state 162


state 162

    (36) if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE . block_sequence RBRACE
    (27) block_sequence -> . block block_sequence
    (28) block_sequence -> . block
    (29) block -> . constant_declaration
    (30) block -> . variable_declaration
    (31) block -> . var_const_update
    (32) block -> . if_block
    (33) block -> . while_block
    (34) block -> . function_call SEMICOLON
    (35) block -> . comment
    (11) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (12) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (13) var_const_update -> . ID ASSIGN expression SEMICOLON
    (14) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (36) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (37) if_block -> . IF expression LBRACE block_sequence RBRACE
    (38) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (22) function_call -> . ID LPAREN function_param_list_call RPAREN
    (23) function_call -> . ID LPAREN RPAREN
    (4) comment -> . COMMENT STRING_LITERAL
    (53) arrayaccess -> . ID LSQUARE expression RSQUARE
    (54) arrayaccess -> . function_call LSQUARE expression RSQUARE

    VAL             shift and go to state 10
    VAR             shift and go to state 12
    ID              shift and go to state 143
    IF              shift and go to state 144
    WHILE           shift and go to state 145
    COMMENT         shift and go to state 15

    block_sequence                 shift and go to state 163
    block                          shift and go to state 135
    constant_declaration           shift and go to state 136
    variable_declaration           shift and go to state 137
    var_const_update               shift and go to state 138
    if_block                       shift and go to state 139
    while_block                    shift and go to state 140
    function_call                  shift and go to state 141
    comment                        shift and go to state 142
    arrayaccess                    shift and go to state 13

state 163

    (36) if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence . RBRACE

    RBRACE          shift and go to state 164


state 164

    (36) if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .

    VAL             reduce using rule 36 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    VAR             reduce using rule 36 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    ID              reduce using rule 36 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    IF              reduce using rule 36 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    WHILE           reduce using rule 36 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    COMMENT         reduce using rule 36 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    RBRACE          reduce using rule 36 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)

