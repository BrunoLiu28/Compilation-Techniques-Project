Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> main_block_sequence
Rule 2     main_block_sequence -> main_block main_block_sequence
Rule 3     main_block_sequence -> main_block
Rule 4     comment -> COMMENT STRING_LITERAL
Rule 5     import_statement -> FROM STRING_LITERAL IMPORT ID_LIST SEMICOLON
Rule 6     import_statement -> FROM STRING_LITERAL IMPORT TIMES SEMICOLON
Rule 7     ID_LIST -> ID COMMA ID_LIST
Rule 8     ID_LIST -> ID
Rule 9     main_block -> constant_declaration
Rule 10    main_block -> variable_declaration
Rule 11    main_block -> var_const_update
Rule 12    main_block -> function_declaration
Rule 13    main_block -> main_function
Rule 14    main_block -> comment
Rule 15    main_block -> import_statement
Rule 16    constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON
Rule 17    variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON
Rule 18    var_const_update -> ID ASSIGN expression SEMICOLON
Rule 19    var_const_update -> arrayaccess ASSIGN expression SEMICOLON
Rule 20    function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON
Rule 21    function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE
Rule 22    main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE
Rule 23    function_param_list -> function_param_list_aux
Rule 24    function_param_list -> <empty>
Rule 25    function_param_list_aux -> parameter COMMA function_param_list_aux
Rule 26    function_param_list_aux -> parameter
Rule 27    parameter -> VAL ID COLON types
Rule 28    parameter -> VAR ID COLON types
Rule 29    function_call -> ID LPAREN function_param_list_call RPAREN
Rule 30    function_call -> ID LPAREN RPAREN
Rule 31    function_param_list_call -> expression COMMA function_param_list_call
Rule 32    function_param_list_call -> expression
Rule 33    function_body -> block_sequence
Rule 34    block_sequence -> block block_sequence
Rule 35    block_sequence -> block
Rule 36    block -> constant_declaration
Rule 37    block -> variable_declaration
Rule 38    block -> var_const_update
Rule 39    block -> if_block
Rule 40    block -> while_block
Rule 41    block -> function_call SEMICOLON
Rule 42    block -> comment
Rule 43    if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
Rule 44    if_block -> IF expression LBRACE block_sequence RBRACE
Rule 45    while_block -> WHILE expression LBRACE block_sequence RBRACE
Rule 46    types -> defaulttype
Rule 47    types -> LSQUARE arraytype RSQUARE
Rule 48    defaulttype -> INT_TYPE
Rule 49    defaulttype -> FLOAT_TYPE
Rule 50    defaulttype -> STRING_TYPE
Rule 51    defaulttype -> BOOL_TYPE
Rule 52    defaulttype -> VOID_TYPE
Rule 53    defaulttype -> CHAR_TYPE
Rule 54    arraytype -> LSQUARE arraytype RSQUARE
Rule 55    arraytype -> INT_TYPE
Rule 56    arraytype -> FLOAT_TYPE
Rule 57    arraytype -> STRING_TYPE
Rule 58    arraytype -> BOOL_TYPE
Rule 59    arraytype -> VOID_TYPE
Rule 60    expression -> ID
Rule 61    arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2
Rule 62    arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2
Rule 63    arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2
Rule 64    arrayaccess2 -> <empty>
Rule 65    expression -> INTEGER_LITERAL
Rule 66    expression -> MINUS INTEGER_LITERAL
Rule 67    expression -> FLOAT_LITERAL
Rule 68    expression -> MINUS FLOAT_LITERAL
Rule 69    expression -> STRING_LITERAL
Rule 70    expression -> BOOL_LITERAL
Rule 71    expression -> CHAR_LITERAL
Rule 72    expression -> expression PLUS expression
Rule 73    expression -> expression MINUS expression
Rule 74    expression -> expression TIMES expression
Rule 75    expression -> expression DIVIDE expression
Rule 76    expression -> expression MOD expression
Rule 77    expression -> expression POWER expression
Rule 78    expression -> expression EQUAL expression
Rule 79    expression -> expression NOT_EQUAL expression
Rule 80    expression -> expression GREATER_THAN expression
Rule 81    expression -> expression GREATER_THAN_EQUAL expression
Rule 82    expression -> expression LESS_THAN expression
Rule 83    expression -> expression LESS_THAN_EQUAL expression
Rule 84    expression -> expression AND expression
Rule 85    expression -> expression OR expression
Rule 86    expression -> NOT expression
Rule 87    expression -> function_call
Rule 88    expression -> arrayaccess
Rule 89    expression -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 84
ASSIGN               : 16 17 18 19
BOOL_LITERAL         : 70
BOOL_TYPE            : 51 58
CHAR_LITERAL         : 71
CHAR_TYPE            : 53
COLON                : 16 17 20 21 27 28
COMMA                : 7 25 31
COMMENT              : 4
DIVIDE               : 75
ELSE                 : 43
EQUAL                : 78
FLOAT_LITERAL        : 67 68
FLOAT_TYPE           : 49 56
FROM                 : 5 6
FUNCTION             : 20 21 22
GREATER_THAN         : 80
GREATER_THAN_EQUAL   : 81
ID                   : 7 8 16 17 18 20 21 27 28 29 30 60 61
IF                   : 43 44
IMPORT               : 5 6
INTEGER_LITERAL      : 65 66
INT_TYPE             : 48 55
LBRACE               : 21 22 43 43 44 45
LESS_THAN            : 82
LESS_THAN_EQUAL      : 83
LPAREN               : 20 21 22 29 30 89
LSQUARE              : 47 54 61 62 63
MAIN                 : 22
MINUS                : 66 68 73
MOD                  : 76
NOT                  : 86
NOT_EQUAL            : 79
OR                   : 85
PLUS                 : 72
POWER                : 77
RBRACE               : 21 22 43 43 44 45
RPAREN               : 20 21 22 29 30 89
RSQUARE              : 47 54 61 62 63
SEMICOLON            : 5 6 16 17 18 19 20 41
STRING_LITERAL       : 4 5 6 69
STRING_TYPE          : 50 57
TIMES                : 6 74
VAL                  : 16 27
VAR                  : 17 28
VOID_TYPE            : 52 59
WHILE                : 45
error                : 

Nonterminals, with rules where they appear

ID_LIST              : 5 7
arrayaccess          : 19 88
arrayaccess2         : 61 62 63
arraytype            : 47 54
block                : 34 35
block_sequence       : 33 34 43 43 44 45
comment              : 14 42
constant_declaration : 9 36
defaulttype          : 46
expression           : 16 17 18 19 31 32 43 44 45 61 62 63 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 89
function_body        : 21 22
function_call        : 41 62 87
function_declaration : 12
function_param_list  : 20 21 22
function_param_list_aux : 23 25
function_param_list_call : 29 31
if_block             : 39
import_statement     : 15
main_block           : 2 3
main_block_sequence  : 1 2
main_function        : 13
parameter            : 25 26
program              : 0
types                : 16 17 20 21 27 28
var_const_update     : 11 38
variable_declaration : 10 37
while_block          : 40

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . main_block_sequence
    (2) main_block_sequence -> . main_block main_block_sequence
    (3) main_block_sequence -> . main_block
    (9) main_block -> . constant_declaration
    (10) main_block -> . variable_declaration
    (11) main_block -> . var_const_update
    (12) main_block -> . function_declaration
    (13) main_block -> . main_function
    (14) main_block -> . comment
    (15) main_block -> . import_statement
    (16) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (17) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (18) var_const_update -> . ID ASSIGN expression SEMICOLON
    (19) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (20) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON
    (21) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE
    (22) main_function -> . FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE
    (4) comment -> . COMMENT STRING_LITERAL
    (5) import_statement -> . FROM STRING_LITERAL IMPORT ID_LIST SEMICOLON
    (6) import_statement -> . FROM STRING_LITERAL IMPORT TIMES SEMICOLON
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN

    VAL             shift and go to state 11
    VAR             shift and go to state 13
    ID              shift and go to state 12
    FUNCTION        shift and go to state 15
    COMMENT         shift and go to state 16
    FROM            shift and go to state 17

    program                        shift and go to state 1
    main_block_sequence            shift and go to state 2
    main_block                     shift and go to state 3
    constant_declaration           shift and go to state 4
    variable_declaration           shift and go to state 5
    var_const_update               shift and go to state 6
    function_declaration           shift and go to state 7
    main_function                  shift and go to state 8
    comment                        shift and go to state 9
    import_statement               shift and go to state 10
    arrayaccess                    shift and go to state 14
    function_call                  shift and go to state 18

state 1

    (0) S' -> program .



state 2

    (1) program -> main_block_sequence .

    $end            reduce using rule 1 (program -> main_block_sequence .)


state 3

    (2) main_block_sequence -> main_block . main_block_sequence
    (3) main_block_sequence -> main_block .
    (2) main_block_sequence -> . main_block main_block_sequence
    (3) main_block_sequence -> . main_block
    (9) main_block -> . constant_declaration
    (10) main_block -> . variable_declaration
    (11) main_block -> . var_const_update
    (12) main_block -> . function_declaration
    (13) main_block -> . main_function
    (14) main_block -> . comment
    (15) main_block -> . import_statement
    (16) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (17) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (18) var_const_update -> . ID ASSIGN expression SEMICOLON
    (19) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (20) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON
    (21) function_declaration -> . FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE
    (22) main_function -> . FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE
    (4) comment -> . COMMENT STRING_LITERAL
    (5) import_statement -> . FROM STRING_LITERAL IMPORT ID_LIST SEMICOLON
    (6) import_statement -> . FROM STRING_LITERAL IMPORT TIMES SEMICOLON
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN

    $end            reduce using rule 3 (main_block_sequence -> main_block .)
    VAL             shift and go to state 11
    VAR             shift and go to state 13
    ID              shift and go to state 12
    FUNCTION        shift and go to state 15
    COMMENT         shift and go to state 16
    FROM            shift and go to state 17

    main_block                     shift and go to state 3
    main_block_sequence            shift and go to state 19
    constant_declaration           shift and go to state 4
    variable_declaration           shift and go to state 5
    var_const_update               shift and go to state 6
    function_declaration           shift and go to state 7
    main_function                  shift and go to state 8
    comment                        shift and go to state 9
    import_statement               shift and go to state 10
    arrayaccess                    shift and go to state 14
    function_call                  shift and go to state 18

state 4

    (9) main_block -> constant_declaration .

    VAL             reduce using rule 9 (main_block -> constant_declaration .)
    VAR             reduce using rule 9 (main_block -> constant_declaration .)
    ID              reduce using rule 9 (main_block -> constant_declaration .)
    FUNCTION        reduce using rule 9 (main_block -> constant_declaration .)
    COMMENT         reduce using rule 9 (main_block -> constant_declaration .)
    FROM            reduce using rule 9 (main_block -> constant_declaration .)
    $end            reduce using rule 9 (main_block -> constant_declaration .)


state 5

    (10) main_block -> variable_declaration .

    VAL             reduce using rule 10 (main_block -> variable_declaration .)
    VAR             reduce using rule 10 (main_block -> variable_declaration .)
    ID              reduce using rule 10 (main_block -> variable_declaration .)
    FUNCTION        reduce using rule 10 (main_block -> variable_declaration .)
    COMMENT         reduce using rule 10 (main_block -> variable_declaration .)
    FROM            reduce using rule 10 (main_block -> variable_declaration .)
    $end            reduce using rule 10 (main_block -> variable_declaration .)


state 6

    (11) main_block -> var_const_update .

    VAL             reduce using rule 11 (main_block -> var_const_update .)
    VAR             reduce using rule 11 (main_block -> var_const_update .)
    ID              reduce using rule 11 (main_block -> var_const_update .)
    FUNCTION        reduce using rule 11 (main_block -> var_const_update .)
    COMMENT         reduce using rule 11 (main_block -> var_const_update .)
    FROM            reduce using rule 11 (main_block -> var_const_update .)
    $end            reduce using rule 11 (main_block -> var_const_update .)


state 7

    (12) main_block -> function_declaration .

    VAL             reduce using rule 12 (main_block -> function_declaration .)
    VAR             reduce using rule 12 (main_block -> function_declaration .)
    ID              reduce using rule 12 (main_block -> function_declaration .)
    FUNCTION        reduce using rule 12 (main_block -> function_declaration .)
    COMMENT         reduce using rule 12 (main_block -> function_declaration .)
    FROM            reduce using rule 12 (main_block -> function_declaration .)
    $end            reduce using rule 12 (main_block -> function_declaration .)


state 8

    (13) main_block -> main_function .

    VAL             reduce using rule 13 (main_block -> main_function .)
    VAR             reduce using rule 13 (main_block -> main_function .)
    ID              reduce using rule 13 (main_block -> main_function .)
    FUNCTION        reduce using rule 13 (main_block -> main_function .)
    COMMENT         reduce using rule 13 (main_block -> main_function .)
    FROM            reduce using rule 13 (main_block -> main_function .)
    $end            reduce using rule 13 (main_block -> main_function .)


state 9

    (14) main_block -> comment .

    VAL             reduce using rule 14 (main_block -> comment .)
    VAR             reduce using rule 14 (main_block -> comment .)
    ID              reduce using rule 14 (main_block -> comment .)
    FUNCTION        reduce using rule 14 (main_block -> comment .)
    COMMENT         reduce using rule 14 (main_block -> comment .)
    FROM            reduce using rule 14 (main_block -> comment .)
    $end            reduce using rule 14 (main_block -> comment .)


state 10

    (15) main_block -> import_statement .

    VAL             reduce using rule 15 (main_block -> import_statement .)
    VAR             reduce using rule 15 (main_block -> import_statement .)
    ID              reduce using rule 15 (main_block -> import_statement .)
    FUNCTION        reduce using rule 15 (main_block -> import_statement .)
    COMMENT         reduce using rule 15 (main_block -> import_statement .)
    FROM            reduce using rule 15 (main_block -> import_statement .)
    $end            reduce using rule 15 (main_block -> import_statement .)


state 11

    (16) constant_declaration -> VAL . ID COLON types ASSIGN expression SEMICOLON

    ID              shift and go to state 20


state 12

    (18) var_const_update -> ID . ASSIGN expression SEMICOLON
    (61) arrayaccess -> ID . LSQUARE expression RSQUARE arrayaccess2
    (29) function_call -> ID . LPAREN function_param_list_call RPAREN
    (30) function_call -> ID . LPAREN RPAREN

    ASSIGN          shift and go to state 21
    LSQUARE         shift and go to state 22
    LPAREN          shift and go to state 23


state 13

    (17) variable_declaration -> VAR . ID COLON types ASSIGN expression SEMICOLON

    ID              shift and go to state 24


state 14

    (19) var_const_update -> arrayaccess . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 25


state 15

    (20) function_declaration -> FUNCTION . ID LPAREN function_param_list RPAREN COLON types SEMICOLON
    (21) function_declaration -> FUNCTION . ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE
    (22) main_function -> FUNCTION . MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE

    ID              shift and go to state 26
    MAIN            shift and go to state 27


state 16

    (4) comment -> COMMENT . STRING_LITERAL

    STRING_LITERAL  shift and go to state 28


state 17

    (5) import_statement -> FROM . STRING_LITERAL IMPORT ID_LIST SEMICOLON
    (6) import_statement -> FROM . STRING_LITERAL IMPORT TIMES SEMICOLON

    STRING_LITERAL  shift and go to state 29


state 18

    (62) arrayaccess -> function_call . LSQUARE expression RSQUARE arrayaccess2

    LSQUARE         shift and go to state 30


state 19

    (2) main_block_sequence -> main_block main_block_sequence .

    $end            reduce using rule 2 (main_block_sequence -> main_block main_block_sequence .)


state 20

    (16) constant_declaration -> VAL ID . COLON types ASSIGN expression SEMICOLON

    COLON           shift and go to state 31


state 21

    (18) var_const_update -> ID ASSIGN . expression SEMICOLON
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 33
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 22

    (61) arrayaccess -> ID LSQUARE . expression RSQUARE arrayaccess2
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 44
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 23

    (29) function_call -> ID LPAREN . function_param_list_call RPAREN
    (30) function_call -> ID LPAREN . RPAREN
    (31) function_param_list_call -> . expression COMMA function_param_list_call
    (32) function_param_list_call -> . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    RPAREN          shift and go to state 46
    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    function_param_list_call       shift and go to state 45
    expression                     shift and go to state 47
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 24

    (17) variable_declaration -> VAR ID . COLON types ASSIGN expression SEMICOLON

    COLON           shift and go to state 48


state 25

    (19) var_const_update -> arrayaccess ASSIGN . expression SEMICOLON
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    arrayaccess                    shift and go to state 42
    expression                     shift and go to state 49
    function_call                  shift and go to state 41

state 26

    (20) function_declaration -> FUNCTION ID . LPAREN function_param_list RPAREN COLON types SEMICOLON
    (21) function_declaration -> FUNCTION ID . LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE

    LPAREN          shift and go to state 50


state 27

    (22) main_function -> FUNCTION MAIN . LPAREN function_param_list RPAREN LBRACE function_body RBRACE

    LPAREN          shift and go to state 51


state 28

    (4) comment -> COMMENT STRING_LITERAL .

    VAL             reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    VAR             reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    ID              reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    FUNCTION        reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    COMMENT         reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    FROM            reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    $end            reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    IF              reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    WHILE           reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)
    RBRACE          reduce using rule 4 (comment -> COMMENT STRING_LITERAL .)


state 29

    (5) import_statement -> FROM STRING_LITERAL . IMPORT ID_LIST SEMICOLON
    (6) import_statement -> FROM STRING_LITERAL . IMPORT TIMES SEMICOLON

    IMPORT          shift and go to state 52


state 30

    (62) arrayaccess -> function_call LSQUARE . expression RSQUARE arrayaccess2
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    function_call                  shift and go to state 41
    expression                     shift and go to state 53
    arrayaccess                    shift and go to state 42

state 31

    (16) constant_declaration -> VAL ID COLON . types ASSIGN expression SEMICOLON
    (46) types -> . defaulttype
    (47) types -> . LSQUARE arraytype RSQUARE
    (48) defaulttype -> . INT_TYPE
    (49) defaulttype -> . FLOAT_TYPE
    (50) defaulttype -> . STRING_TYPE
    (51) defaulttype -> . BOOL_TYPE
    (52) defaulttype -> . VOID_TYPE
    (53) defaulttype -> . CHAR_TYPE

    LSQUARE         shift and go to state 56
    INT_TYPE        shift and go to state 57
    FLOAT_TYPE      shift and go to state 58
    STRING_TYPE     shift and go to state 59
    BOOL_TYPE       shift and go to state 60
    VOID_TYPE       shift and go to state 61
    CHAR_TYPE       shift and go to state 62

    types                          shift and go to state 54
    defaulttype                    shift and go to state 55

state 32

    (60) expression -> ID .
    (29) function_call -> ID . LPAREN function_param_list_call RPAREN
    (30) function_call -> ID . LPAREN RPAREN
    (61) arrayaccess -> ID . LSQUARE expression RSQUARE arrayaccess2

    SEMICOLON       reduce using rule 60 (expression -> ID .)
    PLUS            reduce using rule 60 (expression -> ID .)
    MINUS           reduce using rule 60 (expression -> ID .)
    TIMES           reduce using rule 60 (expression -> ID .)
    DIVIDE          reduce using rule 60 (expression -> ID .)
    MOD             reduce using rule 60 (expression -> ID .)
    POWER           reduce using rule 60 (expression -> ID .)
    EQUAL           reduce using rule 60 (expression -> ID .)
    NOT_EQUAL       reduce using rule 60 (expression -> ID .)
    GREATER_THAN    reduce using rule 60 (expression -> ID .)
    GREATER_THAN_EQUAL reduce using rule 60 (expression -> ID .)
    LESS_THAN       reduce using rule 60 (expression -> ID .)
    LESS_THAN_EQUAL reduce using rule 60 (expression -> ID .)
    AND             reduce using rule 60 (expression -> ID .)
    OR              reduce using rule 60 (expression -> ID .)
    RSQUARE         reduce using rule 60 (expression -> ID .)
    COMMA           reduce using rule 60 (expression -> ID .)
    RPAREN          reduce using rule 60 (expression -> ID .)
    LBRACE          reduce using rule 60 (expression -> ID .)
    LPAREN          shift and go to state 23
    LSQUARE         shift and go to state 22


state 33

    (18) var_const_update -> ID ASSIGN expression . SEMICOLON
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 34

    (65) expression -> INTEGER_LITERAL .

    SEMICOLON       reduce using rule 65 (expression -> INTEGER_LITERAL .)
    PLUS            reduce using rule 65 (expression -> INTEGER_LITERAL .)
    MINUS           reduce using rule 65 (expression -> INTEGER_LITERAL .)
    TIMES           reduce using rule 65 (expression -> INTEGER_LITERAL .)
    DIVIDE          reduce using rule 65 (expression -> INTEGER_LITERAL .)
    MOD             reduce using rule 65 (expression -> INTEGER_LITERAL .)
    POWER           reduce using rule 65 (expression -> INTEGER_LITERAL .)
    EQUAL           reduce using rule 65 (expression -> INTEGER_LITERAL .)
    NOT_EQUAL       reduce using rule 65 (expression -> INTEGER_LITERAL .)
    GREATER_THAN    reduce using rule 65 (expression -> INTEGER_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 65 (expression -> INTEGER_LITERAL .)
    LESS_THAN       reduce using rule 65 (expression -> INTEGER_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 65 (expression -> INTEGER_LITERAL .)
    AND             reduce using rule 65 (expression -> INTEGER_LITERAL .)
    OR              reduce using rule 65 (expression -> INTEGER_LITERAL .)
    RSQUARE         reduce using rule 65 (expression -> INTEGER_LITERAL .)
    COMMA           reduce using rule 65 (expression -> INTEGER_LITERAL .)
    RPAREN          reduce using rule 65 (expression -> INTEGER_LITERAL .)
    LBRACE          reduce using rule 65 (expression -> INTEGER_LITERAL .)


state 35

    (66) expression -> MINUS . INTEGER_LITERAL
    (68) expression -> MINUS . FLOAT_LITERAL

    INTEGER_LITERAL shift and go to state 78
    FLOAT_LITERAL   shift and go to state 79


state 36

    (67) expression -> FLOAT_LITERAL .

    SEMICOLON       reduce using rule 67 (expression -> FLOAT_LITERAL .)
    PLUS            reduce using rule 67 (expression -> FLOAT_LITERAL .)
    MINUS           reduce using rule 67 (expression -> FLOAT_LITERAL .)
    TIMES           reduce using rule 67 (expression -> FLOAT_LITERAL .)
    DIVIDE          reduce using rule 67 (expression -> FLOAT_LITERAL .)
    MOD             reduce using rule 67 (expression -> FLOAT_LITERAL .)
    POWER           reduce using rule 67 (expression -> FLOAT_LITERAL .)
    EQUAL           reduce using rule 67 (expression -> FLOAT_LITERAL .)
    NOT_EQUAL       reduce using rule 67 (expression -> FLOAT_LITERAL .)
    GREATER_THAN    reduce using rule 67 (expression -> FLOAT_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 67 (expression -> FLOAT_LITERAL .)
    LESS_THAN       reduce using rule 67 (expression -> FLOAT_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 67 (expression -> FLOAT_LITERAL .)
    AND             reduce using rule 67 (expression -> FLOAT_LITERAL .)
    OR              reduce using rule 67 (expression -> FLOAT_LITERAL .)
    RSQUARE         reduce using rule 67 (expression -> FLOAT_LITERAL .)
    COMMA           reduce using rule 67 (expression -> FLOAT_LITERAL .)
    RPAREN          reduce using rule 67 (expression -> FLOAT_LITERAL .)
    LBRACE          reduce using rule 67 (expression -> FLOAT_LITERAL .)


state 37

    (69) expression -> STRING_LITERAL .

    SEMICOLON       reduce using rule 69 (expression -> STRING_LITERAL .)
    PLUS            reduce using rule 69 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 69 (expression -> STRING_LITERAL .)
    TIMES           reduce using rule 69 (expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 69 (expression -> STRING_LITERAL .)
    MOD             reduce using rule 69 (expression -> STRING_LITERAL .)
    POWER           reduce using rule 69 (expression -> STRING_LITERAL .)
    EQUAL           reduce using rule 69 (expression -> STRING_LITERAL .)
    NOT_EQUAL       reduce using rule 69 (expression -> STRING_LITERAL .)
    GREATER_THAN    reduce using rule 69 (expression -> STRING_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 69 (expression -> STRING_LITERAL .)
    LESS_THAN       reduce using rule 69 (expression -> STRING_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 69 (expression -> STRING_LITERAL .)
    AND             reduce using rule 69 (expression -> STRING_LITERAL .)
    OR              reduce using rule 69 (expression -> STRING_LITERAL .)
    RSQUARE         reduce using rule 69 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 69 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 69 (expression -> STRING_LITERAL .)
    LBRACE          reduce using rule 69 (expression -> STRING_LITERAL .)


state 38

    (70) expression -> BOOL_LITERAL .

    SEMICOLON       reduce using rule 70 (expression -> BOOL_LITERAL .)
    PLUS            reduce using rule 70 (expression -> BOOL_LITERAL .)
    MINUS           reduce using rule 70 (expression -> BOOL_LITERAL .)
    TIMES           reduce using rule 70 (expression -> BOOL_LITERAL .)
    DIVIDE          reduce using rule 70 (expression -> BOOL_LITERAL .)
    MOD             reduce using rule 70 (expression -> BOOL_LITERAL .)
    POWER           reduce using rule 70 (expression -> BOOL_LITERAL .)
    EQUAL           reduce using rule 70 (expression -> BOOL_LITERAL .)
    NOT_EQUAL       reduce using rule 70 (expression -> BOOL_LITERAL .)
    GREATER_THAN    reduce using rule 70 (expression -> BOOL_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 70 (expression -> BOOL_LITERAL .)
    LESS_THAN       reduce using rule 70 (expression -> BOOL_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 70 (expression -> BOOL_LITERAL .)
    AND             reduce using rule 70 (expression -> BOOL_LITERAL .)
    OR              reduce using rule 70 (expression -> BOOL_LITERAL .)
    RSQUARE         reduce using rule 70 (expression -> BOOL_LITERAL .)
    COMMA           reduce using rule 70 (expression -> BOOL_LITERAL .)
    RPAREN          reduce using rule 70 (expression -> BOOL_LITERAL .)
    LBRACE          reduce using rule 70 (expression -> BOOL_LITERAL .)


state 39

    (71) expression -> CHAR_LITERAL .

    SEMICOLON       reduce using rule 71 (expression -> CHAR_LITERAL .)
    PLUS            reduce using rule 71 (expression -> CHAR_LITERAL .)
    MINUS           reduce using rule 71 (expression -> CHAR_LITERAL .)
    TIMES           reduce using rule 71 (expression -> CHAR_LITERAL .)
    DIVIDE          reduce using rule 71 (expression -> CHAR_LITERAL .)
    MOD             reduce using rule 71 (expression -> CHAR_LITERAL .)
    POWER           reduce using rule 71 (expression -> CHAR_LITERAL .)
    EQUAL           reduce using rule 71 (expression -> CHAR_LITERAL .)
    NOT_EQUAL       reduce using rule 71 (expression -> CHAR_LITERAL .)
    GREATER_THAN    reduce using rule 71 (expression -> CHAR_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 71 (expression -> CHAR_LITERAL .)
    LESS_THAN       reduce using rule 71 (expression -> CHAR_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 71 (expression -> CHAR_LITERAL .)
    AND             reduce using rule 71 (expression -> CHAR_LITERAL .)
    OR              reduce using rule 71 (expression -> CHAR_LITERAL .)
    RSQUARE         reduce using rule 71 (expression -> CHAR_LITERAL .)
    COMMA           reduce using rule 71 (expression -> CHAR_LITERAL .)
    RPAREN          reduce using rule 71 (expression -> CHAR_LITERAL .)
    LBRACE          reduce using rule 71 (expression -> CHAR_LITERAL .)


state 40

    (86) expression -> NOT . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 80
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 41

    (87) expression -> function_call .
    (62) arrayaccess -> function_call . LSQUARE expression RSQUARE arrayaccess2

    SEMICOLON       reduce using rule 87 (expression -> function_call .)
    PLUS            reduce using rule 87 (expression -> function_call .)
    MINUS           reduce using rule 87 (expression -> function_call .)
    TIMES           reduce using rule 87 (expression -> function_call .)
    DIVIDE          reduce using rule 87 (expression -> function_call .)
    MOD             reduce using rule 87 (expression -> function_call .)
    POWER           reduce using rule 87 (expression -> function_call .)
    EQUAL           reduce using rule 87 (expression -> function_call .)
    NOT_EQUAL       reduce using rule 87 (expression -> function_call .)
    GREATER_THAN    reduce using rule 87 (expression -> function_call .)
    GREATER_THAN_EQUAL reduce using rule 87 (expression -> function_call .)
    LESS_THAN       reduce using rule 87 (expression -> function_call .)
    LESS_THAN_EQUAL reduce using rule 87 (expression -> function_call .)
    AND             reduce using rule 87 (expression -> function_call .)
    OR              reduce using rule 87 (expression -> function_call .)
    RSQUARE         reduce using rule 87 (expression -> function_call .)
    COMMA           reduce using rule 87 (expression -> function_call .)
    RPAREN          reduce using rule 87 (expression -> function_call .)
    LBRACE          reduce using rule 87 (expression -> function_call .)
    LSQUARE         shift and go to state 30


state 42

    (88) expression -> arrayaccess .

    SEMICOLON       reduce using rule 88 (expression -> arrayaccess .)
    PLUS            reduce using rule 88 (expression -> arrayaccess .)
    MINUS           reduce using rule 88 (expression -> arrayaccess .)
    TIMES           reduce using rule 88 (expression -> arrayaccess .)
    DIVIDE          reduce using rule 88 (expression -> arrayaccess .)
    MOD             reduce using rule 88 (expression -> arrayaccess .)
    POWER           reduce using rule 88 (expression -> arrayaccess .)
    EQUAL           reduce using rule 88 (expression -> arrayaccess .)
    NOT_EQUAL       reduce using rule 88 (expression -> arrayaccess .)
    GREATER_THAN    reduce using rule 88 (expression -> arrayaccess .)
    GREATER_THAN_EQUAL reduce using rule 88 (expression -> arrayaccess .)
    LESS_THAN       reduce using rule 88 (expression -> arrayaccess .)
    LESS_THAN_EQUAL reduce using rule 88 (expression -> arrayaccess .)
    AND             reduce using rule 88 (expression -> arrayaccess .)
    OR              reduce using rule 88 (expression -> arrayaccess .)
    RSQUARE         reduce using rule 88 (expression -> arrayaccess .)
    COMMA           reduce using rule 88 (expression -> arrayaccess .)
    RPAREN          reduce using rule 88 (expression -> arrayaccess .)
    LBRACE          reduce using rule 88 (expression -> arrayaccess .)


state 43

    (89) expression -> LPAREN . expression RPAREN
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 81
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 44

    (61) arrayaccess -> ID LSQUARE expression . RSQUARE arrayaccess2
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    RSQUARE         shift and go to state 82
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 45

    (29) function_call -> ID LPAREN function_param_list_call . RPAREN

    RPAREN          shift and go to state 83


state 46

    (30) function_call -> ID LPAREN RPAREN .

    LSQUARE         reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    POWER           reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    EQUAL           reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN_EQUAL reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    RSQUARE         reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 30 (function_call -> ID LPAREN RPAREN .)
    LBRACE          reduce using rule 30 (function_call -> ID LPAREN RPAREN .)


state 47

    (31) function_param_list_call -> expression . COMMA function_param_list_call
    (32) function_param_list_call -> expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    COMMA           shift and go to state 84
    RPAREN          reduce using rule 32 (function_param_list_call -> expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 48

    (17) variable_declaration -> VAR ID COLON . types ASSIGN expression SEMICOLON
    (46) types -> . defaulttype
    (47) types -> . LSQUARE arraytype RSQUARE
    (48) defaulttype -> . INT_TYPE
    (49) defaulttype -> . FLOAT_TYPE
    (50) defaulttype -> . STRING_TYPE
    (51) defaulttype -> . BOOL_TYPE
    (52) defaulttype -> . VOID_TYPE
    (53) defaulttype -> . CHAR_TYPE

    LSQUARE         shift and go to state 56
    INT_TYPE        shift and go to state 57
    FLOAT_TYPE      shift and go to state 58
    STRING_TYPE     shift and go to state 59
    BOOL_TYPE       shift and go to state 60
    VOID_TYPE       shift and go to state 61
    CHAR_TYPE       shift and go to state 62

    types                          shift and go to state 85
    defaulttype                    shift and go to state 55

state 49

    (19) var_const_update -> arrayaccess ASSIGN expression . SEMICOLON
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       shift and go to state 86
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 50

    (20) function_declaration -> FUNCTION ID LPAREN . function_param_list RPAREN COLON types SEMICOLON
    (21) function_declaration -> FUNCTION ID LPAREN . function_param_list RPAREN COLON types LBRACE function_body RBRACE
    (23) function_param_list -> . function_param_list_aux
    (24) function_param_list -> .
    (25) function_param_list_aux -> . parameter COMMA function_param_list_aux
    (26) function_param_list_aux -> . parameter
    (27) parameter -> . VAL ID COLON types
    (28) parameter -> . VAR ID COLON types

    RPAREN          reduce using rule 24 (function_param_list -> .)
    VAL             shift and go to state 90
    VAR             shift and go to state 91

    function_param_list            shift and go to state 87
    function_param_list_aux        shift and go to state 88
    parameter                      shift and go to state 89

state 51

    (22) main_function -> FUNCTION MAIN LPAREN . function_param_list RPAREN LBRACE function_body RBRACE
    (23) function_param_list -> . function_param_list_aux
    (24) function_param_list -> .
    (25) function_param_list_aux -> . parameter COMMA function_param_list_aux
    (26) function_param_list_aux -> . parameter
    (27) parameter -> . VAL ID COLON types
    (28) parameter -> . VAR ID COLON types

    RPAREN          reduce using rule 24 (function_param_list -> .)
    VAL             shift and go to state 90
    VAR             shift and go to state 91

    function_param_list            shift and go to state 92
    function_param_list_aux        shift and go to state 88
    parameter                      shift and go to state 89

state 52

    (5) import_statement -> FROM STRING_LITERAL IMPORT . ID_LIST SEMICOLON
    (6) import_statement -> FROM STRING_LITERAL IMPORT . TIMES SEMICOLON
    (7) ID_LIST -> . ID COMMA ID_LIST
    (8) ID_LIST -> . ID

    TIMES           shift and go to state 94
    ID              shift and go to state 95

    ID_LIST                        shift and go to state 93

state 53

    (62) arrayaccess -> function_call LSQUARE expression . RSQUARE arrayaccess2
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    RSQUARE         shift and go to state 96
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 54

    (16) constant_declaration -> VAL ID COLON types . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 97


state 55

    (46) types -> defaulttype .

    ASSIGN          reduce using rule 46 (types -> defaulttype .)
    SEMICOLON       reduce using rule 46 (types -> defaulttype .)
    LBRACE          reduce using rule 46 (types -> defaulttype .)
    COMMA           reduce using rule 46 (types -> defaulttype .)
    RPAREN          reduce using rule 46 (types -> defaulttype .)


state 56

    (47) types -> LSQUARE . arraytype RSQUARE
    (54) arraytype -> . LSQUARE arraytype RSQUARE
    (55) arraytype -> . INT_TYPE
    (56) arraytype -> . FLOAT_TYPE
    (57) arraytype -> . STRING_TYPE
    (58) arraytype -> . BOOL_TYPE
    (59) arraytype -> . VOID_TYPE

    LSQUARE         shift and go to state 98
    INT_TYPE        shift and go to state 100
    FLOAT_TYPE      shift and go to state 101
    STRING_TYPE     shift and go to state 102
    BOOL_TYPE       shift and go to state 103
    VOID_TYPE       shift and go to state 104

    arraytype                      shift and go to state 99

state 57

    (48) defaulttype -> INT_TYPE .

    ASSIGN          reduce using rule 48 (defaulttype -> INT_TYPE .)
    SEMICOLON       reduce using rule 48 (defaulttype -> INT_TYPE .)
    LBRACE          reduce using rule 48 (defaulttype -> INT_TYPE .)
    COMMA           reduce using rule 48 (defaulttype -> INT_TYPE .)
    RPAREN          reduce using rule 48 (defaulttype -> INT_TYPE .)


state 58

    (49) defaulttype -> FLOAT_TYPE .

    ASSIGN          reduce using rule 49 (defaulttype -> FLOAT_TYPE .)
    SEMICOLON       reduce using rule 49 (defaulttype -> FLOAT_TYPE .)
    LBRACE          reduce using rule 49 (defaulttype -> FLOAT_TYPE .)
    COMMA           reduce using rule 49 (defaulttype -> FLOAT_TYPE .)
    RPAREN          reduce using rule 49 (defaulttype -> FLOAT_TYPE .)


state 59

    (50) defaulttype -> STRING_TYPE .

    ASSIGN          reduce using rule 50 (defaulttype -> STRING_TYPE .)
    SEMICOLON       reduce using rule 50 (defaulttype -> STRING_TYPE .)
    LBRACE          reduce using rule 50 (defaulttype -> STRING_TYPE .)
    COMMA           reduce using rule 50 (defaulttype -> STRING_TYPE .)
    RPAREN          reduce using rule 50 (defaulttype -> STRING_TYPE .)


state 60

    (51) defaulttype -> BOOL_TYPE .

    ASSIGN          reduce using rule 51 (defaulttype -> BOOL_TYPE .)
    SEMICOLON       reduce using rule 51 (defaulttype -> BOOL_TYPE .)
    LBRACE          reduce using rule 51 (defaulttype -> BOOL_TYPE .)
    COMMA           reduce using rule 51 (defaulttype -> BOOL_TYPE .)
    RPAREN          reduce using rule 51 (defaulttype -> BOOL_TYPE .)


state 61

    (52) defaulttype -> VOID_TYPE .

    ASSIGN          reduce using rule 52 (defaulttype -> VOID_TYPE .)
    SEMICOLON       reduce using rule 52 (defaulttype -> VOID_TYPE .)
    LBRACE          reduce using rule 52 (defaulttype -> VOID_TYPE .)
    COMMA           reduce using rule 52 (defaulttype -> VOID_TYPE .)
    RPAREN          reduce using rule 52 (defaulttype -> VOID_TYPE .)


state 62

    (53) defaulttype -> CHAR_TYPE .

    ASSIGN          reduce using rule 53 (defaulttype -> CHAR_TYPE .)
    SEMICOLON       reduce using rule 53 (defaulttype -> CHAR_TYPE .)
    LBRACE          reduce using rule 53 (defaulttype -> CHAR_TYPE .)
    COMMA           reduce using rule 53 (defaulttype -> CHAR_TYPE .)
    RPAREN          reduce using rule 53 (defaulttype -> CHAR_TYPE .)


state 63

    (18) var_const_update -> ID ASSIGN expression SEMICOLON .

    VAL             reduce using rule 18 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 18 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 18 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 18 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 18 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    FROM            reduce using rule 18 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 18 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 18 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 18 (var_const_update -> ID ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 18 (var_const_update -> ID ASSIGN expression SEMICOLON .)


state 64

    (72) expression -> expression PLUS . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 105
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 65

    (73) expression -> expression MINUS . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 106
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 66

    (74) expression -> expression TIMES . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 107
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 67

    (75) expression -> expression DIVIDE . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 108
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 68

    (76) expression -> expression MOD . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 109
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 69

    (77) expression -> expression POWER . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 110
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 70

    (78) expression -> expression EQUAL . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 111
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 71

    (79) expression -> expression NOT_EQUAL . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 112
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 72

    (80) expression -> expression GREATER_THAN . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 113
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 73

    (81) expression -> expression GREATER_THAN_EQUAL . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 114
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 74

    (82) expression -> expression LESS_THAN . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 115
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 75

    (83) expression -> expression LESS_THAN_EQUAL . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 116
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 76

    (84) expression -> expression AND . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 117
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 77

    (85) expression -> expression OR . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 118
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 78

    (66) expression -> MINUS INTEGER_LITERAL .

    SEMICOLON       reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    PLUS            reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    MINUS           reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    TIMES           reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    DIVIDE          reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    MOD             reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    POWER           reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    EQUAL           reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    NOT_EQUAL       reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    GREATER_THAN    reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    LESS_THAN       reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    AND             reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    OR              reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    RSQUARE         reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    COMMA           reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    RPAREN          reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)
    LBRACE          reduce using rule 66 (expression -> MINUS INTEGER_LITERAL .)


state 79

    (68) expression -> MINUS FLOAT_LITERAL .

    SEMICOLON       reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    PLUS            reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    MINUS           reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    TIMES           reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    DIVIDE          reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    MOD             reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    POWER           reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    EQUAL           reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    NOT_EQUAL       reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    GREATER_THAN    reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    LESS_THAN       reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    AND             reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    OR              reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    RSQUARE         reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    COMMA           reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    RPAREN          reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)
    LBRACE          reduce using rule 68 (expression -> MINUS FLOAT_LITERAL .)


state 80

    (86) expression -> NOT expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 86 (expression -> NOT expression .)
    PLUS            reduce using rule 86 (expression -> NOT expression .)
    MINUS           reduce using rule 86 (expression -> NOT expression .)
    TIMES           reduce using rule 86 (expression -> NOT expression .)
    DIVIDE          reduce using rule 86 (expression -> NOT expression .)
    MOD             reduce using rule 86 (expression -> NOT expression .)
    POWER           reduce using rule 86 (expression -> NOT expression .)
    EQUAL           reduce using rule 86 (expression -> NOT expression .)
    NOT_EQUAL       reduce using rule 86 (expression -> NOT expression .)
    GREATER_THAN    reduce using rule 86 (expression -> NOT expression .)
    GREATER_THAN_EQUAL reduce using rule 86 (expression -> NOT expression .)
    LESS_THAN       reduce using rule 86 (expression -> NOT expression .)
    LESS_THAN_EQUAL reduce using rule 86 (expression -> NOT expression .)
    AND             reduce using rule 86 (expression -> NOT expression .)
    OR              reduce using rule 86 (expression -> NOT expression .)
    RSQUARE         reduce using rule 86 (expression -> NOT expression .)
    COMMA           reduce using rule 86 (expression -> NOT expression .)
    RPAREN          reduce using rule 86 (expression -> NOT expression .)
    LBRACE          reduce using rule 86 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIVIDE          [ shift and go to state 67 ]
  ! MOD             [ shift and go to state 68 ]
  ! POWER           [ shift and go to state 69 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! NOT_EQUAL       [ shift and go to state 71 ]
  ! GREATER_THAN    [ shift and go to state 72 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 74 ]
  ! LESS_THAN_EQUAL [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 81

    (89) expression -> LPAREN expression . RPAREN
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    RPAREN          shift and go to state 119
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 82

    (61) arrayaccess -> ID LSQUARE expression RSQUARE . arrayaccess2
    (63) arrayaccess2 -> . LSQUARE expression RSQUARE arrayaccess2
    (64) arrayaccess2 -> .

    LSQUARE         shift and go to state 120
    ASSIGN          reduce using rule 64 (arrayaccess2 -> .)
    SEMICOLON       reduce using rule 64 (arrayaccess2 -> .)
    PLUS            reduce using rule 64 (arrayaccess2 -> .)
    MINUS           reduce using rule 64 (arrayaccess2 -> .)
    TIMES           reduce using rule 64 (arrayaccess2 -> .)
    DIVIDE          reduce using rule 64 (arrayaccess2 -> .)
    MOD             reduce using rule 64 (arrayaccess2 -> .)
    POWER           reduce using rule 64 (arrayaccess2 -> .)
    EQUAL           reduce using rule 64 (arrayaccess2 -> .)
    NOT_EQUAL       reduce using rule 64 (arrayaccess2 -> .)
    GREATER_THAN    reduce using rule 64 (arrayaccess2 -> .)
    GREATER_THAN_EQUAL reduce using rule 64 (arrayaccess2 -> .)
    LESS_THAN       reduce using rule 64 (arrayaccess2 -> .)
    LESS_THAN_EQUAL reduce using rule 64 (arrayaccess2 -> .)
    AND             reduce using rule 64 (arrayaccess2 -> .)
    OR              reduce using rule 64 (arrayaccess2 -> .)
    RSQUARE         reduce using rule 64 (arrayaccess2 -> .)
    COMMA           reduce using rule 64 (arrayaccess2 -> .)
    RPAREN          reduce using rule 64 (arrayaccess2 -> .)
    LBRACE          reduce using rule 64 (arrayaccess2 -> .)

    arrayaccess2                   shift and go to state 121

state 83

    (29) function_call -> ID LPAREN function_param_list_call RPAREN .

    LSQUARE         reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    SEMICOLON       reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    PLUS            reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    MINUS           reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    TIMES           reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    DIVIDE          reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    MOD             reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    POWER           reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    EQUAL           reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    NOT_EQUAL       reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    GREATER_THAN    reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    LESS_THAN       reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    LESS_THAN_EQUAL reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    AND             reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    OR              reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    RSQUARE         reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    COMMA           reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    RPAREN          reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)
    LBRACE          reduce using rule 29 (function_call -> ID LPAREN function_param_list_call RPAREN .)


state 84

    (31) function_param_list_call -> expression COMMA . function_param_list_call
    (31) function_param_list_call -> . expression COMMA function_param_list_call
    (32) function_param_list_call -> . expression
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 47
    function_param_list_call       shift and go to state 122
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 85

    (17) variable_declaration -> VAR ID COLON types . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 123


state 86

    (19) var_const_update -> arrayaccess ASSIGN expression SEMICOLON .

    VAL             reduce using rule 19 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 19 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    ID              reduce using rule 19 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 19 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 19 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    FROM            reduce using rule 19 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    $end            reduce using rule 19 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    IF              reduce using rule 19 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 19 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 19 (var_const_update -> arrayaccess ASSIGN expression SEMICOLON .)


state 87

    (20) function_declaration -> FUNCTION ID LPAREN function_param_list . RPAREN COLON types SEMICOLON
    (21) function_declaration -> FUNCTION ID LPAREN function_param_list . RPAREN COLON types LBRACE function_body RBRACE

    RPAREN          shift and go to state 124


state 88

    (23) function_param_list -> function_param_list_aux .

    RPAREN          reduce using rule 23 (function_param_list -> function_param_list_aux .)


state 89

    (25) function_param_list_aux -> parameter . COMMA function_param_list_aux
    (26) function_param_list_aux -> parameter .

    COMMA           shift and go to state 125
    RPAREN          reduce using rule 26 (function_param_list_aux -> parameter .)


state 90

    (27) parameter -> VAL . ID COLON types

    ID              shift and go to state 126


state 91

    (28) parameter -> VAR . ID COLON types

    ID              shift and go to state 127


state 92

    (22) main_function -> FUNCTION MAIN LPAREN function_param_list . RPAREN LBRACE function_body RBRACE

    RPAREN          shift and go to state 128


state 93

    (5) import_statement -> FROM STRING_LITERAL IMPORT ID_LIST . SEMICOLON

    SEMICOLON       shift and go to state 129


state 94

    (6) import_statement -> FROM STRING_LITERAL IMPORT TIMES . SEMICOLON

    SEMICOLON       shift and go to state 130


state 95

    (7) ID_LIST -> ID . COMMA ID_LIST
    (8) ID_LIST -> ID .

    COMMA           shift and go to state 131
    SEMICOLON       reduce using rule 8 (ID_LIST -> ID .)


state 96

    (62) arrayaccess -> function_call LSQUARE expression RSQUARE . arrayaccess2
    (63) arrayaccess2 -> . LSQUARE expression RSQUARE arrayaccess2
    (64) arrayaccess2 -> .

    LSQUARE         shift and go to state 120
    ASSIGN          reduce using rule 64 (arrayaccess2 -> .)
    SEMICOLON       reduce using rule 64 (arrayaccess2 -> .)
    PLUS            reduce using rule 64 (arrayaccess2 -> .)
    MINUS           reduce using rule 64 (arrayaccess2 -> .)
    TIMES           reduce using rule 64 (arrayaccess2 -> .)
    DIVIDE          reduce using rule 64 (arrayaccess2 -> .)
    MOD             reduce using rule 64 (arrayaccess2 -> .)
    POWER           reduce using rule 64 (arrayaccess2 -> .)
    EQUAL           reduce using rule 64 (arrayaccess2 -> .)
    NOT_EQUAL       reduce using rule 64 (arrayaccess2 -> .)
    GREATER_THAN    reduce using rule 64 (arrayaccess2 -> .)
    GREATER_THAN_EQUAL reduce using rule 64 (arrayaccess2 -> .)
    LESS_THAN       reduce using rule 64 (arrayaccess2 -> .)
    LESS_THAN_EQUAL reduce using rule 64 (arrayaccess2 -> .)
    AND             reduce using rule 64 (arrayaccess2 -> .)
    OR              reduce using rule 64 (arrayaccess2 -> .)
    RSQUARE         reduce using rule 64 (arrayaccess2 -> .)
    COMMA           reduce using rule 64 (arrayaccess2 -> .)
    RPAREN          reduce using rule 64 (arrayaccess2 -> .)
    LBRACE          reduce using rule 64 (arrayaccess2 -> .)

    arrayaccess2                   shift and go to state 132

state 97

    (16) constant_declaration -> VAL ID COLON types ASSIGN . expression SEMICOLON
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 133
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 98

    (54) arraytype -> LSQUARE . arraytype RSQUARE
    (54) arraytype -> . LSQUARE arraytype RSQUARE
    (55) arraytype -> . INT_TYPE
    (56) arraytype -> . FLOAT_TYPE
    (57) arraytype -> . STRING_TYPE
    (58) arraytype -> . BOOL_TYPE
    (59) arraytype -> . VOID_TYPE

    LSQUARE         shift and go to state 98
    INT_TYPE        shift and go to state 100
    FLOAT_TYPE      shift and go to state 101
    STRING_TYPE     shift and go to state 102
    BOOL_TYPE       shift and go to state 103
    VOID_TYPE       shift and go to state 104

    arraytype                      shift and go to state 134

state 99

    (47) types -> LSQUARE arraytype . RSQUARE

    RSQUARE         shift and go to state 135


state 100

    (55) arraytype -> INT_TYPE .

    RSQUARE         reduce using rule 55 (arraytype -> INT_TYPE .)


state 101

    (56) arraytype -> FLOAT_TYPE .

    RSQUARE         reduce using rule 56 (arraytype -> FLOAT_TYPE .)


state 102

    (57) arraytype -> STRING_TYPE .

    RSQUARE         reduce using rule 57 (arraytype -> STRING_TYPE .)


state 103

    (58) arraytype -> BOOL_TYPE .

    RSQUARE         reduce using rule 58 (arraytype -> BOOL_TYPE .)


state 104

    (59) arraytype -> VOID_TYPE .

    RSQUARE         reduce using rule 59 (arraytype -> VOID_TYPE .)


state 105

    (72) expression -> expression PLUS expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 72 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 72 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 72 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 72 (expression -> expression PLUS expression .)
    NOT_EQUAL       reduce using rule 72 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 72 (expression -> expression PLUS expression .)
    GREATER_THAN_EQUAL reduce using rule 72 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 72 (expression -> expression PLUS expression .)
    LESS_THAN_EQUAL reduce using rule 72 (expression -> expression PLUS expression .)
    AND             reduce using rule 72 (expression -> expression PLUS expression .)
    OR              reduce using rule 72 (expression -> expression PLUS expression .)
    RSQUARE         reduce using rule 72 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 72 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 72 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 72 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69

  ! TIMES           [ reduce using rule 72 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 72 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 72 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! NOT_EQUAL       [ shift and go to state 71 ]
  ! GREATER_THAN    [ shift and go to state 72 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 74 ]
  ! LESS_THAN_EQUAL [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 106

    (73) expression -> expression MINUS expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 73 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 73 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 73 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 73 (expression -> expression MINUS expression .)
    NOT_EQUAL       reduce using rule 73 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 73 (expression -> expression MINUS expression .)
    GREATER_THAN_EQUAL reduce using rule 73 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 73 (expression -> expression MINUS expression .)
    LESS_THAN_EQUAL reduce using rule 73 (expression -> expression MINUS expression .)
    AND             reduce using rule 73 (expression -> expression MINUS expression .)
    OR              reduce using rule 73 (expression -> expression MINUS expression .)
    RSQUARE         reduce using rule 73 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 73 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 73 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 73 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69

  ! TIMES           [ reduce using rule 73 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 73 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 73 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! NOT_EQUAL       [ shift and go to state 71 ]
  ! GREATER_THAN    [ shift and go to state 72 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 74 ]
  ! LESS_THAN_EQUAL [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 107

    (74) expression -> expression TIMES expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 74 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 74 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 74 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 74 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 74 (expression -> expression TIMES expression .)
    MOD             reduce using rule 74 (expression -> expression TIMES expression .)
    EQUAL           reduce using rule 74 (expression -> expression TIMES expression .)
    NOT_EQUAL       reduce using rule 74 (expression -> expression TIMES expression .)
    GREATER_THAN    reduce using rule 74 (expression -> expression TIMES expression .)
    GREATER_THAN_EQUAL reduce using rule 74 (expression -> expression TIMES expression .)
    LESS_THAN       reduce using rule 74 (expression -> expression TIMES expression .)
    LESS_THAN_EQUAL reduce using rule 74 (expression -> expression TIMES expression .)
    AND             reduce using rule 74 (expression -> expression TIMES expression .)
    OR              reduce using rule 74 (expression -> expression TIMES expression .)
    RSQUARE         reduce using rule 74 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 74 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 74 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 74 (expression -> expression TIMES expression .)
    POWER           shift and go to state 69

  ! POWER           [ reduce using rule 74 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIVIDE          [ shift and go to state 67 ]
  ! MOD             [ shift and go to state 68 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! NOT_EQUAL       [ shift and go to state 71 ]
  ! GREATER_THAN    [ shift and go to state 72 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 74 ]
  ! LESS_THAN_EQUAL [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 108

    (75) expression -> expression DIVIDE expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 75 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 75 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 75 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 75 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 75 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 75 (expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 75 (expression -> expression DIVIDE expression .)
    NOT_EQUAL       reduce using rule 75 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 75 (expression -> expression DIVIDE expression .)
    GREATER_THAN_EQUAL reduce using rule 75 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 75 (expression -> expression DIVIDE expression .)
    LESS_THAN_EQUAL reduce using rule 75 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 75 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 75 (expression -> expression DIVIDE expression .)
    RSQUARE         reduce using rule 75 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 75 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 75 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 75 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 69

  ! POWER           [ reduce using rule 75 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIVIDE          [ shift and go to state 67 ]
  ! MOD             [ shift and go to state 68 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! NOT_EQUAL       [ shift and go to state 71 ]
  ! GREATER_THAN    [ shift and go to state 72 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 74 ]
  ! LESS_THAN_EQUAL [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 109

    (76) expression -> expression MOD expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 76 (expression -> expression MOD expression .)
    PLUS            reduce using rule 76 (expression -> expression MOD expression .)
    MINUS           reduce using rule 76 (expression -> expression MOD expression .)
    TIMES           reduce using rule 76 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 76 (expression -> expression MOD expression .)
    MOD             reduce using rule 76 (expression -> expression MOD expression .)
    EQUAL           reduce using rule 76 (expression -> expression MOD expression .)
    NOT_EQUAL       reduce using rule 76 (expression -> expression MOD expression .)
    GREATER_THAN    reduce using rule 76 (expression -> expression MOD expression .)
    GREATER_THAN_EQUAL reduce using rule 76 (expression -> expression MOD expression .)
    LESS_THAN       reduce using rule 76 (expression -> expression MOD expression .)
    LESS_THAN_EQUAL reduce using rule 76 (expression -> expression MOD expression .)
    AND             reduce using rule 76 (expression -> expression MOD expression .)
    OR              reduce using rule 76 (expression -> expression MOD expression .)
    RSQUARE         reduce using rule 76 (expression -> expression MOD expression .)
    COMMA           reduce using rule 76 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 76 (expression -> expression MOD expression .)
    LBRACE          reduce using rule 76 (expression -> expression MOD expression .)
    POWER           shift and go to state 69

  ! POWER           [ reduce using rule 76 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIVIDE          [ shift and go to state 67 ]
  ! MOD             [ shift and go to state 68 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! NOT_EQUAL       [ shift and go to state 71 ]
  ! GREATER_THAN    [ shift and go to state 72 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 74 ]
  ! LESS_THAN_EQUAL [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 110

    (77) expression -> expression POWER expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 77 (expression -> expression POWER expression .)
    PLUS            reduce using rule 77 (expression -> expression POWER expression .)
    MINUS           reduce using rule 77 (expression -> expression POWER expression .)
    TIMES           reduce using rule 77 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 77 (expression -> expression POWER expression .)
    MOD             reduce using rule 77 (expression -> expression POWER expression .)
    EQUAL           reduce using rule 77 (expression -> expression POWER expression .)
    NOT_EQUAL       reduce using rule 77 (expression -> expression POWER expression .)
    GREATER_THAN    reduce using rule 77 (expression -> expression POWER expression .)
    GREATER_THAN_EQUAL reduce using rule 77 (expression -> expression POWER expression .)
    LESS_THAN       reduce using rule 77 (expression -> expression POWER expression .)
    LESS_THAN_EQUAL reduce using rule 77 (expression -> expression POWER expression .)
    AND             reduce using rule 77 (expression -> expression POWER expression .)
    OR              reduce using rule 77 (expression -> expression POWER expression .)
    RSQUARE         reduce using rule 77 (expression -> expression POWER expression .)
    COMMA           reduce using rule 77 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 77 (expression -> expression POWER expression .)
    LBRACE          reduce using rule 77 (expression -> expression POWER expression .)
    POWER           shift and go to state 69

  ! POWER           [ reduce using rule 77 (expression -> expression POWER expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIVIDE          [ shift and go to state 67 ]
  ! MOD             [ shift and go to state 68 ]
  ! EQUAL           [ shift and go to state 70 ]
  ! NOT_EQUAL       [ shift and go to state 71 ]
  ! GREATER_THAN    [ shift and go to state 72 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 74 ]
  ! LESS_THAN_EQUAL [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 111

    (78) expression -> expression EQUAL expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 78 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 78 (expression -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 78 (expression -> expression EQUAL expression .)
    AND             reduce using rule 78 (expression -> expression EQUAL expression .)
    OR              reduce using rule 78 (expression -> expression EQUAL expression .)
    RSQUARE         reduce using rule 78 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 78 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 78 (expression -> expression EQUAL expression .)
    LBRACE          reduce using rule 78 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75

  ! PLUS            [ reduce using rule 78 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 78 (expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 78 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 78 (expression -> expression EQUAL expression .) ]
  ! MOD             [ reduce using rule 78 (expression -> expression EQUAL expression .) ]
  ! POWER           [ reduce using rule 78 (expression -> expression EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 78 (expression -> expression EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 78 (expression -> expression EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 78 (expression -> expression EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 78 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 70 ]
  ! NOT_EQUAL       [ shift and go to state 71 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 112

    (79) expression -> expression NOT_EQUAL expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 79 (expression -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 79 (expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 79 (expression -> expression NOT_EQUAL expression .)
    AND             reduce using rule 79 (expression -> expression NOT_EQUAL expression .)
    OR              reduce using rule 79 (expression -> expression NOT_EQUAL expression .)
    RSQUARE         reduce using rule 79 (expression -> expression NOT_EQUAL expression .)
    COMMA           reduce using rule 79 (expression -> expression NOT_EQUAL expression .)
    RPAREN          reduce using rule 79 (expression -> expression NOT_EQUAL expression .)
    LBRACE          reduce using rule 79 (expression -> expression NOT_EQUAL expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75

  ! PLUS            [ reduce using rule 79 (expression -> expression NOT_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 79 (expression -> expression NOT_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 79 (expression -> expression NOT_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 79 (expression -> expression NOT_EQUAL expression .) ]
  ! MOD             [ reduce using rule 79 (expression -> expression NOT_EQUAL expression .) ]
  ! POWER           [ reduce using rule 79 (expression -> expression NOT_EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 79 (expression -> expression NOT_EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 79 (expression -> expression NOT_EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 79 (expression -> expression NOT_EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 79 (expression -> expression NOT_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 70 ]
  ! NOT_EQUAL       [ shift and go to state 71 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 113

    (80) expression -> expression GREATER_THAN expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 80 (expression -> expression GREATER_THAN expression .)
    EQUAL           reduce using rule 80 (expression -> expression GREATER_THAN expression .)
    NOT_EQUAL       reduce using rule 80 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 80 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 80 (expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 80 (expression -> expression GREATER_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 80 (expression -> expression GREATER_THAN expression .)
    AND             reduce using rule 80 (expression -> expression GREATER_THAN expression .)
    OR              reduce using rule 80 (expression -> expression GREATER_THAN expression .)
    RSQUARE         reduce using rule 80 (expression -> expression GREATER_THAN expression .)
    COMMA           reduce using rule 80 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 80 (expression -> expression GREATER_THAN expression .)
    LBRACE          reduce using rule 80 (expression -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69

  ! PLUS            [ reduce using rule 80 (expression -> expression GREATER_THAN expression .) ]
  ! MINUS           [ reduce using rule 80 (expression -> expression GREATER_THAN expression .) ]
  ! TIMES           [ reduce using rule 80 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 80 (expression -> expression GREATER_THAN expression .) ]
  ! MOD             [ reduce using rule 80 (expression -> expression GREATER_THAN expression .) ]
  ! POWER           [ reduce using rule 80 (expression -> expression GREATER_THAN expression .) ]
  ! EQUAL           [ shift and go to state 70 ]
  ! NOT_EQUAL       [ shift and go to state 71 ]
  ! GREATER_THAN    [ shift and go to state 72 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 74 ]
  ! LESS_THAN_EQUAL [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 114

    (81) expression -> expression GREATER_THAN_EQUAL expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .)
    EQUAL           reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .)
    NOT_EQUAL       reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .)
    AND             reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .)
    OR              reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .)
    RSQUARE         reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .)
    COMMA           reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .)
    RPAREN          reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .)
    LBRACE          reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69

  ! PLUS            [ reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MOD             [ reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! POWER           [ reduce using rule 81 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 70 ]
  ! NOT_EQUAL       [ shift and go to state 71 ]
  ! GREATER_THAN    [ shift and go to state 72 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 74 ]
  ! LESS_THAN_EQUAL [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 115

    (82) expression -> expression LESS_THAN expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 82 (expression -> expression LESS_THAN expression .)
    EQUAL           reduce using rule 82 (expression -> expression LESS_THAN expression .)
    NOT_EQUAL       reduce using rule 82 (expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 82 (expression -> expression LESS_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 82 (expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 82 (expression -> expression LESS_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 82 (expression -> expression LESS_THAN expression .)
    AND             reduce using rule 82 (expression -> expression LESS_THAN expression .)
    OR              reduce using rule 82 (expression -> expression LESS_THAN expression .)
    RSQUARE         reduce using rule 82 (expression -> expression LESS_THAN expression .)
    COMMA           reduce using rule 82 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 82 (expression -> expression LESS_THAN expression .)
    LBRACE          reduce using rule 82 (expression -> expression LESS_THAN expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69

  ! PLUS            [ reduce using rule 82 (expression -> expression LESS_THAN expression .) ]
  ! MINUS           [ reduce using rule 82 (expression -> expression LESS_THAN expression .) ]
  ! TIMES           [ reduce using rule 82 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 82 (expression -> expression LESS_THAN expression .) ]
  ! MOD             [ reduce using rule 82 (expression -> expression LESS_THAN expression .) ]
  ! POWER           [ reduce using rule 82 (expression -> expression LESS_THAN expression .) ]
  ! EQUAL           [ shift and go to state 70 ]
  ! NOT_EQUAL       [ shift and go to state 71 ]
  ! GREATER_THAN    [ shift and go to state 72 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 74 ]
  ! LESS_THAN_EQUAL [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 116

    (83) expression -> expression LESS_THAN_EQUAL expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .)
    EQUAL           reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .)
    NOT_EQUAL       reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .)
    AND             reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .)
    OR              reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .)
    RSQUARE         reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .)
    COMMA           reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .)
    RPAREN          reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .)
    LBRACE          reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69

  ! PLUS            [ reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MOD             [ reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! POWER           [ reduce using rule 83 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 70 ]
  ! NOT_EQUAL       [ shift and go to state 71 ]
  ! GREATER_THAN    [ shift and go to state 72 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 74 ]
  ! LESS_THAN_EQUAL [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 117

    (84) expression -> expression AND expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 84 (expression -> expression AND expression .)
    AND             reduce using rule 84 (expression -> expression AND expression .)
    OR              reduce using rule 84 (expression -> expression AND expression .)
    RSQUARE         reduce using rule 84 (expression -> expression AND expression .)
    COMMA           reduce using rule 84 (expression -> expression AND expression .)
    RPAREN          reduce using rule 84 (expression -> expression AND expression .)
    LBRACE          reduce using rule 84 (expression -> expression AND expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75

  ! PLUS            [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! POWER           [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! NOT_EQUAL       [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! LESS_THAN       [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]


state 118

    (85) expression -> expression OR expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       reduce using rule 85 (expression -> expression OR expression .)
    OR              reduce using rule 85 (expression -> expression OR expression .)
    RSQUARE         reduce using rule 85 (expression -> expression OR expression .)
    COMMA           reduce using rule 85 (expression -> expression OR expression .)
    RPAREN          reduce using rule 85 (expression -> expression OR expression .)
    LBRACE          reduce using rule 85 (expression -> expression OR expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75
    AND             shift and go to state 76

  ! PLUS            [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! POWER           [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! NOT_EQUAL       [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! LESS_THAN       [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 77 ]


state 119

    (89) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    LESS_THAN_EQUAL reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    RSQUARE         reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 89 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 89 (expression -> LPAREN expression RPAREN .)


state 120

    (63) arrayaccess2 -> LSQUARE . expression RSQUARE arrayaccess2
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 136
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 121

    (61) arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .

    ASSIGN          reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    SEMICOLON       reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    PLUS            reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    MINUS           reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    TIMES           reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    DIVIDE          reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    MOD             reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    POWER           reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    EQUAL           reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    NOT_EQUAL       reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    GREATER_THAN    reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    GREATER_THAN_EQUAL reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    LESS_THAN       reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    LESS_THAN_EQUAL reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    AND             reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    OR              reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    RSQUARE         reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    COMMA           reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    RPAREN          reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)
    LBRACE          reduce using rule 61 (arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2 .)


state 122

    (31) function_param_list_call -> expression COMMA function_param_list_call .

    RPAREN          reduce using rule 31 (function_param_list_call -> expression COMMA function_param_list_call .)


state 123

    (17) variable_declaration -> VAR ID COLON types ASSIGN . expression SEMICOLON
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 137
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 124

    (20) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN . COLON types SEMICOLON
    (21) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN . COLON types LBRACE function_body RBRACE

    COLON           shift and go to state 138


state 125

    (25) function_param_list_aux -> parameter COMMA . function_param_list_aux
    (25) function_param_list_aux -> . parameter COMMA function_param_list_aux
    (26) function_param_list_aux -> . parameter
    (27) parameter -> . VAL ID COLON types
    (28) parameter -> . VAR ID COLON types

    VAL             shift and go to state 90
    VAR             shift and go to state 91

    parameter                      shift and go to state 89
    function_param_list_aux        shift and go to state 139

state 126

    (27) parameter -> VAL ID . COLON types

    COLON           shift and go to state 140


state 127

    (28) parameter -> VAR ID . COLON types

    COLON           shift and go to state 141


state 128

    (22) main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN . LBRACE function_body RBRACE

    LBRACE          shift and go to state 142


state 129

    (5) import_statement -> FROM STRING_LITERAL IMPORT ID_LIST SEMICOLON .

    VAL             reduce using rule 5 (import_statement -> FROM STRING_LITERAL IMPORT ID_LIST SEMICOLON .)
    VAR             reduce using rule 5 (import_statement -> FROM STRING_LITERAL IMPORT ID_LIST SEMICOLON .)
    ID              reduce using rule 5 (import_statement -> FROM STRING_LITERAL IMPORT ID_LIST SEMICOLON .)
    FUNCTION        reduce using rule 5 (import_statement -> FROM STRING_LITERAL IMPORT ID_LIST SEMICOLON .)
    COMMENT         reduce using rule 5 (import_statement -> FROM STRING_LITERAL IMPORT ID_LIST SEMICOLON .)
    FROM            reduce using rule 5 (import_statement -> FROM STRING_LITERAL IMPORT ID_LIST SEMICOLON .)
    $end            reduce using rule 5 (import_statement -> FROM STRING_LITERAL IMPORT ID_LIST SEMICOLON .)


state 130

    (6) import_statement -> FROM STRING_LITERAL IMPORT TIMES SEMICOLON .

    VAL             reduce using rule 6 (import_statement -> FROM STRING_LITERAL IMPORT TIMES SEMICOLON .)
    VAR             reduce using rule 6 (import_statement -> FROM STRING_LITERAL IMPORT TIMES SEMICOLON .)
    ID              reduce using rule 6 (import_statement -> FROM STRING_LITERAL IMPORT TIMES SEMICOLON .)
    FUNCTION        reduce using rule 6 (import_statement -> FROM STRING_LITERAL IMPORT TIMES SEMICOLON .)
    COMMENT         reduce using rule 6 (import_statement -> FROM STRING_LITERAL IMPORT TIMES SEMICOLON .)
    FROM            reduce using rule 6 (import_statement -> FROM STRING_LITERAL IMPORT TIMES SEMICOLON .)
    $end            reduce using rule 6 (import_statement -> FROM STRING_LITERAL IMPORT TIMES SEMICOLON .)


state 131

    (7) ID_LIST -> ID COMMA . ID_LIST
    (7) ID_LIST -> . ID COMMA ID_LIST
    (8) ID_LIST -> . ID

    ID              shift and go to state 95

    ID_LIST                        shift and go to state 143

state 132

    (62) arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .

    ASSIGN          reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    SEMICOLON       reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    PLUS            reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    MINUS           reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    TIMES           reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    DIVIDE          reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    MOD             reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    POWER           reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    EQUAL           reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    NOT_EQUAL       reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    GREATER_THAN    reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    GREATER_THAN_EQUAL reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    LESS_THAN       reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    LESS_THAN_EQUAL reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    AND             reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    OR              reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    RSQUARE         reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    COMMA           reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    RPAREN          reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)
    LBRACE          reduce using rule 62 (arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2 .)


state 133

    (16) constant_declaration -> VAL ID COLON types ASSIGN expression . SEMICOLON
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       shift and go to state 144
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 134

    (54) arraytype -> LSQUARE arraytype . RSQUARE

    RSQUARE         shift and go to state 145


state 135

    (47) types -> LSQUARE arraytype RSQUARE .

    ASSIGN          reduce using rule 47 (types -> LSQUARE arraytype RSQUARE .)
    SEMICOLON       reduce using rule 47 (types -> LSQUARE arraytype RSQUARE .)
    LBRACE          reduce using rule 47 (types -> LSQUARE arraytype RSQUARE .)
    COMMA           reduce using rule 47 (types -> LSQUARE arraytype RSQUARE .)
    RPAREN          reduce using rule 47 (types -> LSQUARE arraytype RSQUARE .)


state 136

    (63) arrayaccess2 -> LSQUARE expression . RSQUARE arrayaccess2
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    RSQUARE         shift and go to state 146
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 137

    (17) variable_declaration -> VAR ID COLON types ASSIGN expression . SEMICOLON
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    SEMICOLON       shift and go to state 147
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 138

    (20) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON . types SEMICOLON
    (21) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON . types LBRACE function_body RBRACE
    (46) types -> . defaulttype
    (47) types -> . LSQUARE arraytype RSQUARE
    (48) defaulttype -> . INT_TYPE
    (49) defaulttype -> . FLOAT_TYPE
    (50) defaulttype -> . STRING_TYPE
    (51) defaulttype -> . BOOL_TYPE
    (52) defaulttype -> . VOID_TYPE
    (53) defaulttype -> . CHAR_TYPE

    LSQUARE         shift and go to state 56
    INT_TYPE        shift and go to state 57
    FLOAT_TYPE      shift and go to state 58
    STRING_TYPE     shift and go to state 59
    BOOL_TYPE       shift and go to state 60
    VOID_TYPE       shift and go to state 61
    CHAR_TYPE       shift and go to state 62

    types                          shift and go to state 148
    defaulttype                    shift and go to state 55

state 139

    (25) function_param_list_aux -> parameter COMMA function_param_list_aux .

    RPAREN          reduce using rule 25 (function_param_list_aux -> parameter COMMA function_param_list_aux .)


state 140

    (27) parameter -> VAL ID COLON . types
    (46) types -> . defaulttype
    (47) types -> . LSQUARE arraytype RSQUARE
    (48) defaulttype -> . INT_TYPE
    (49) defaulttype -> . FLOAT_TYPE
    (50) defaulttype -> . STRING_TYPE
    (51) defaulttype -> . BOOL_TYPE
    (52) defaulttype -> . VOID_TYPE
    (53) defaulttype -> . CHAR_TYPE

    LSQUARE         shift and go to state 56
    INT_TYPE        shift and go to state 57
    FLOAT_TYPE      shift and go to state 58
    STRING_TYPE     shift and go to state 59
    BOOL_TYPE       shift and go to state 60
    VOID_TYPE       shift and go to state 61
    CHAR_TYPE       shift and go to state 62

    types                          shift and go to state 149
    defaulttype                    shift and go to state 55

state 141

    (28) parameter -> VAR ID COLON . types
    (46) types -> . defaulttype
    (47) types -> . LSQUARE arraytype RSQUARE
    (48) defaulttype -> . INT_TYPE
    (49) defaulttype -> . FLOAT_TYPE
    (50) defaulttype -> . STRING_TYPE
    (51) defaulttype -> . BOOL_TYPE
    (52) defaulttype -> . VOID_TYPE
    (53) defaulttype -> . CHAR_TYPE

    LSQUARE         shift and go to state 56
    INT_TYPE        shift and go to state 57
    FLOAT_TYPE      shift and go to state 58
    STRING_TYPE     shift and go to state 59
    BOOL_TYPE       shift and go to state 60
    VOID_TYPE       shift and go to state 61
    CHAR_TYPE       shift and go to state 62

    types                          shift and go to state 150
    defaulttype                    shift and go to state 55

state 142

    (22) main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE . function_body RBRACE
    (33) function_body -> . block_sequence
    (34) block_sequence -> . block block_sequence
    (35) block_sequence -> . block
    (36) block -> . constant_declaration
    (37) block -> . variable_declaration
    (38) block -> . var_const_update
    (39) block -> . if_block
    (40) block -> . while_block
    (41) block -> . function_call SEMICOLON
    (42) block -> . comment
    (16) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (17) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (18) var_const_update -> . ID ASSIGN expression SEMICOLON
    (19) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (43) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (44) if_block -> . IF expression LBRACE block_sequence RBRACE
    (45) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (4) comment -> . COMMENT STRING_LITERAL
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    VAL             shift and go to state 11
    VAR             shift and go to state 13
    ID              shift and go to state 161
    IF              shift and go to state 162
    WHILE           shift and go to state 163
    COMMENT         shift and go to state 16

    function_body                  shift and go to state 151
    block_sequence                 shift and go to state 152
    block                          shift and go to state 153
    constant_declaration           shift and go to state 154
    variable_declaration           shift and go to state 155
    var_const_update               shift and go to state 156
    if_block                       shift and go to state 157
    while_block                    shift and go to state 158
    function_call                  shift and go to state 159
    comment                        shift and go to state 160
    arrayaccess                    shift and go to state 14

state 143

    (7) ID_LIST -> ID COMMA ID_LIST .

    SEMICOLON       reduce using rule 7 (ID_LIST -> ID COMMA ID_LIST .)


state 144

    (16) constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .

    VAL             reduce using rule 16 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 16 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    ID              reduce using rule 16 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 16 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 16 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    FROM            reduce using rule 16 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    $end            reduce using rule 16 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    IF              reduce using rule 16 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 16 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 16 (constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON .)


state 145

    (54) arraytype -> LSQUARE arraytype RSQUARE .

    RSQUARE         reduce using rule 54 (arraytype -> LSQUARE arraytype RSQUARE .)


state 146

    (63) arrayaccess2 -> LSQUARE expression RSQUARE . arrayaccess2
    (63) arrayaccess2 -> . LSQUARE expression RSQUARE arrayaccess2
    (64) arrayaccess2 -> .

    LSQUARE         shift and go to state 120
    ASSIGN          reduce using rule 64 (arrayaccess2 -> .)
    SEMICOLON       reduce using rule 64 (arrayaccess2 -> .)
    PLUS            reduce using rule 64 (arrayaccess2 -> .)
    MINUS           reduce using rule 64 (arrayaccess2 -> .)
    TIMES           reduce using rule 64 (arrayaccess2 -> .)
    DIVIDE          reduce using rule 64 (arrayaccess2 -> .)
    MOD             reduce using rule 64 (arrayaccess2 -> .)
    POWER           reduce using rule 64 (arrayaccess2 -> .)
    EQUAL           reduce using rule 64 (arrayaccess2 -> .)
    NOT_EQUAL       reduce using rule 64 (arrayaccess2 -> .)
    GREATER_THAN    reduce using rule 64 (arrayaccess2 -> .)
    GREATER_THAN_EQUAL reduce using rule 64 (arrayaccess2 -> .)
    LESS_THAN       reduce using rule 64 (arrayaccess2 -> .)
    LESS_THAN_EQUAL reduce using rule 64 (arrayaccess2 -> .)
    AND             reduce using rule 64 (arrayaccess2 -> .)
    OR              reduce using rule 64 (arrayaccess2 -> .)
    RSQUARE         reduce using rule 64 (arrayaccess2 -> .)
    COMMA           reduce using rule 64 (arrayaccess2 -> .)
    RPAREN          reduce using rule 64 (arrayaccess2 -> .)
    LBRACE          reduce using rule 64 (arrayaccess2 -> .)

    arrayaccess2                   shift and go to state 164

state 147

    (17) variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .

    VAL             reduce using rule 17 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 17 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    ID              reduce using rule 17 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    FUNCTION        reduce using rule 17 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 17 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    FROM            reduce using rule 17 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    $end            reduce using rule 17 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    IF              reduce using rule 17 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 17 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 17 (variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON .)


state 148

    (20) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types . SEMICOLON
    (21) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types . LBRACE function_body RBRACE

    SEMICOLON       shift and go to state 165
    LBRACE          shift and go to state 166


state 149

    (27) parameter -> VAL ID COLON types .

    COMMA           reduce using rule 27 (parameter -> VAL ID COLON types .)
    RPAREN          reduce using rule 27 (parameter -> VAL ID COLON types .)


state 150

    (28) parameter -> VAR ID COLON types .

    COMMA           reduce using rule 28 (parameter -> VAR ID COLON types .)
    RPAREN          reduce using rule 28 (parameter -> VAR ID COLON types .)


state 151

    (22) main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body . RBRACE

    RBRACE          shift and go to state 167


state 152

    (33) function_body -> block_sequence .

    RBRACE          reduce using rule 33 (function_body -> block_sequence .)


state 153

    (34) block_sequence -> block . block_sequence
    (35) block_sequence -> block .
    (34) block_sequence -> . block block_sequence
    (35) block_sequence -> . block
    (36) block -> . constant_declaration
    (37) block -> . variable_declaration
    (38) block -> . var_const_update
    (39) block -> . if_block
    (40) block -> . while_block
    (41) block -> . function_call SEMICOLON
    (42) block -> . comment
    (16) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (17) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (18) var_const_update -> . ID ASSIGN expression SEMICOLON
    (19) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (43) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (44) if_block -> . IF expression LBRACE block_sequence RBRACE
    (45) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (4) comment -> . COMMENT STRING_LITERAL
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    RBRACE          reduce using rule 35 (block_sequence -> block .)
    VAL             shift and go to state 11
    VAR             shift and go to state 13
    ID              shift and go to state 161
    IF              shift and go to state 162
    WHILE           shift and go to state 163
    COMMENT         shift and go to state 16

    block                          shift and go to state 153
    block_sequence                 shift and go to state 168
    constant_declaration           shift and go to state 154
    variable_declaration           shift and go to state 155
    var_const_update               shift and go to state 156
    if_block                       shift and go to state 157
    while_block                    shift and go to state 158
    function_call                  shift and go to state 159
    comment                        shift and go to state 160
    arrayaccess                    shift and go to state 14

state 154

    (36) block -> constant_declaration .

    VAL             reduce using rule 36 (block -> constant_declaration .)
    VAR             reduce using rule 36 (block -> constant_declaration .)
    ID              reduce using rule 36 (block -> constant_declaration .)
    IF              reduce using rule 36 (block -> constant_declaration .)
    WHILE           reduce using rule 36 (block -> constant_declaration .)
    COMMENT         reduce using rule 36 (block -> constant_declaration .)
    RBRACE          reduce using rule 36 (block -> constant_declaration .)


state 155

    (37) block -> variable_declaration .

    VAL             reduce using rule 37 (block -> variable_declaration .)
    VAR             reduce using rule 37 (block -> variable_declaration .)
    ID              reduce using rule 37 (block -> variable_declaration .)
    IF              reduce using rule 37 (block -> variable_declaration .)
    WHILE           reduce using rule 37 (block -> variable_declaration .)
    COMMENT         reduce using rule 37 (block -> variable_declaration .)
    RBRACE          reduce using rule 37 (block -> variable_declaration .)


state 156

    (38) block -> var_const_update .

    VAL             reduce using rule 38 (block -> var_const_update .)
    VAR             reduce using rule 38 (block -> var_const_update .)
    ID              reduce using rule 38 (block -> var_const_update .)
    IF              reduce using rule 38 (block -> var_const_update .)
    WHILE           reduce using rule 38 (block -> var_const_update .)
    COMMENT         reduce using rule 38 (block -> var_const_update .)
    RBRACE          reduce using rule 38 (block -> var_const_update .)


state 157

    (39) block -> if_block .

    VAL             reduce using rule 39 (block -> if_block .)
    VAR             reduce using rule 39 (block -> if_block .)
    ID              reduce using rule 39 (block -> if_block .)
    IF              reduce using rule 39 (block -> if_block .)
    WHILE           reduce using rule 39 (block -> if_block .)
    COMMENT         reduce using rule 39 (block -> if_block .)
    RBRACE          reduce using rule 39 (block -> if_block .)


state 158

    (40) block -> while_block .

    VAL             reduce using rule 40 (block -> while_block .)
    VAR             reduce using rule 40 (block -> while_block .)
    ID              reduce using rule 40 (block -> while_block .)
    IF              reduce using rule 40 (block -> while_block .)
    WHILE           reduce using rule 40 (block -> while_block .)
    COMMENT         reduce using rule 40 (block -> while_block .)
    RBRACE          reduce using rule 40 (block -> while_block .)


state 159

    (41) block -> function_call . SEMICOLON
    (62) arrayaccess -> function_call . LSQUARE expression RSQUARE arrayaccess2

    SEMICOLON       shift and go to state 169
    LSQUARE         shift and go to state 30


state 160

    (42) block -> comment .

    VAL             reduce using rule 42 (block -> comment .)
    VAR             reduce using rule 42 (block -> comment .)
    ID              reduce using rule 42 (block -> comment .)
    IF              reduce using rule 42 (block -> comment .)
    WHILE           reduce using rule 42 (block -> comment .)
    COMMENT         reduce using rule 42 (block -> comment .)
    RBRACE          reduce using rule 42 (block -> comment .)


state 161

    (18) var_const_update -> ID . ASSIGN expression SEMICOLON
    (29) function_call -> ID . LPAREN function_param_list_call RPAREN
    (30) function_call -> ID . LPAREN RPAREN
    (61) arrayaccess -> ID . LSQUARE expression RSQUARE arrayaccess2

    ASSIGN          shift and go to state 21
    LPAREN          shift and go to state 23
    LSQUARE         shift and go to state 22


state 162

    (43) if_block -> IF . expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (44) if_block -> IF . expression LBRACE block_sequence RBRACE
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 170
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 163

    (45) while_block -> WHILE . expression LBRACE block_sequence RBRACE
    (60) expression -> . ID
    (65) expression -> . INTEGER_LITERAL
    (66) expression -> . MINUS INTEGER_LITERAL
    (67) expression -> . FLOAT_LITERAL
    (68) expression -> . MINUS FLOAT_LITERAL
    (69) expression -> . STRING_LITERAL
    (70) expression -> . BOOL_LITERAL
    (71) expression -> . CHAR_LITERAL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . expression POWER expression
    (78) expression -> . expression EQUAL expression
    (79) expression -> . expression NOT_EQUAL expression
    (80) expression -> . expression GREATER_THAN expression
    (81) expression -> . expression GREATER_THAN_EQUAL expression
    (82) expression -> . expression LESS_THAN expression
    (83) expression -> . expression LESS_THAN_EQUAL expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . function_call
    (88) expression -> . arrayaccess
    (89) expression -> . LPAREN expression RPAREN
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    ID              shift and go to state 32
    INTEGER_LITERAL shift and go to state 34
    MINUS           shift and go to state 35
    FLOAT_LITERAL   shift and go to state 36
    STRING_LITERAL  shift and go to state 37
    BOOL_LITERAL    shift and go to state 38
    CHAR_LITERAL    shift and go to state 39
    NOT             shift and go to state 40
    LPAREN          shift and go to state 43

    expression                     shift and go to state 171
    function_call                  shift and go to state 41
    arrayaccess                    shift and go to state 42

state 164

    (63) arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .

    ASSIGN          reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    SEMICOLON       reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    PLUS            reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    MINUS           reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    TIMES           reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    DIVIDE          reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    MOD             reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    POWER           reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    EQUAL           reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    NOT_EQUAL       reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    GREATER_THAN    reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    GREATER_THAN_EQUAL reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    LESS_THAN       reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    LESS_THAN_EQUAL reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    AND             reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    OR              reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    RSQUARE         reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    COMMA           reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    RPAREN          reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)
    LBRACE          reduce using rule 63 (arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2 .)


state 165

    (20) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .

    VAL             reduce using rule 20 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    VAR             reduce using rule 20 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    ID              reduce using rule 20 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    FUNCTION        reduce using rule 20 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    COMMENT         reduce using rule 20 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    FROM            reduce using rule 20 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)
    $end            reduce using rule 20 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON .)


state 166

    (21) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE . function_body RBRACE
    (33) function_body -> . block_sequence
    (34) block_sequence -> . block block_sequence
    (35) block_sequence -> . block
    (36) block -> . constant_declaration
    (37) block -> . variable_declaration
    (38) block -> . var_const_update
    (39) block -> . if_block
    (40) block -> . while_block
    (41) block -> . function_call SEMICOLON
    (42) block -> . comment
    (16) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (17) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (18) var_const_update -> . ID ASSIGN expression SEMICOLON
    (19) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (43) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (44) if_block -> . IF expression LBRACE block_sequence RBRACE
    (45) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (4) comment -> . COMMENT STRING_LITERAL
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    VAL             shift and go to state 11
    VAR             shift and go to state 13
    ID              shift and go to state 161
    IF              shift and go to state 162
    WHILE           shift and go to state 163
    COMMENT         shift and go to state 16

    function_body                  shift and go to state 172
    block_sequence                 shift and go to state 152
    block                          shift and go to state 153
    constant_declaration           shift and go to state 154
    variable_declaration           shift and go to state 155
    var_const_update               shift and go to state 156
    if_block                       shift and go to state 157
    while_block                    shift and go to state 158
    function_call                  shift and go to state 159
    comment                        shift and go to state 160
    arrayaccess                    shift and go to state 14

state 167

    (22) main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .

    VAL             reduce using rule 22 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    VAR             reduce using rule 22 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    ID              reduce using rule 22 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    FUNCTION        reduce using rule 22 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    COMMENT         reduce using rule 22 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    FROM            reduce using rule 22 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)
    $end            reduce using rule 22 (main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE .)


state 168

    (34) block_sequence -> block block_sequence .

    RBRACE          reduce using rule 34 (block_sequence -> block block_sequence .)


state 169

    (41) block -> function_call SEMICOLON .

    VAL             reduce using rule 41 (block -> function_call SEMICOLON .)
    VAR             reduce using rule 41 (block -> function_call SEMICOLON .)
    ID              reduce using rule 41 (block -> function_call SEMICOLON .)
    IF              reduce using rule 41 (block -> function_call SEMICOLON .)
    WHILE           reduce using rule 41 (block -> function_call SEMICOLON .)
    COMMENT         reduce using rule 41 (block -> function_call SEMICOLON .)
    RBRACE          reduce using rule 41 (block -> function_call SEMICOLON .)


state 170

    (43) if_block -> IF expression . LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (44) if_block -> IF expression . LBRACE block_sequence RBRACE
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    LBRACE          shift and go to state 173
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 171

    (45) while_block -> WHILE expression . LBRACE block_sequence RBRACE
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (77) expression -> expression . POWER expression
    (78) expression -> expression . EQUAL expression
    (79) expression -> expression . NOT_EQUAL expression
    (80) expression -> expression . GREATER_THAN expression
    (81) expression -> expression . GREATER_THAN_EQUAL expression
    (82) expression -> expression . LESS_THAN expression
    (83) expression -> expression . LESS_THAN_EQUAL expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression

    LBRACE          shift and go to state 174
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 68
    POWER           shift and go to state 69
    EQUAL           shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    GREATER_THAN    shift and go to state 72
    GREATER_THAN_EQUAL shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_THAN_EQUAL shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 172

    (21) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body . RBRACE

    RBRACE          shift and go to state 175


state 173

    (43) if_block -> IF expression LBRACE . block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (44) if_block -> IF expression LBRACE . block_sequence RBRACE
    (34) block_sequence -> . block block_sequence
    (35) block_sequence -> . block
    (36) block -> . constant_declaration
    (37) block -> . variable_declaration
    (38) block -> . var_const_update
    (39) block -> . if_block
    (40) block -> . while_block
    (41) block -> . function_call SEMICOLON
    (42) block -> . comment
    (16) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (17) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (18) var_const_update -> . ID ASSIGN expression SEMICOLON
    (19) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (43) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (44) if_block -> . IF expression LBRACE block_sequence RBRACE
    (45) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (4) comment -> . COMMENT STRING_LITERAL
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    VAL             shift and go to state 11
    VAR             shift and go to state 13
    ID              shift and go to state 161
    IF              shift and go to state 162
    WHILE           shift and go to state 163
    COMMENT         shift and go to state 16

    block_sequence                 shift and go to state 176
    block                          shift and go to state 153
    constant_declaration           shift and go to state 154
    variable_declaration           shift and go to state 155
    var_const_update               shift and go to state 156
    if_block                       shift and go to state 157
    while_block                    shift and go to state 158
    function_call                  shift and go to state 159
    comment                        shift and go to state 160
    arrayaccess                    shift and go to state 14

state 174

    (45) while_block -> WHILE expression LBRACE . block_sequence RBRACE
    (34) block_sequence -> . block block_sequence
    (35) block_sequence -> . block
    (36) block -> . constant_declaration
    (37) block -> . variable_declaration
    (38) block -> . var_const_update
    (39) block -> . if_block
    (40) block -> . while_block
    (41) block -> . function_call SEMICOLON
    (42) block -> . comment
    (16) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (17) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (18) var_const_update -> . ID ASSIGN expression SEMICOLON
    (19) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (43) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (44) if_block -> . IF expression LBRACE block_sequence RBRACE
    (45) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (4) comment -> . COMMENT STRING_LITERAL
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    VAL             shift and go to state 11
    VAR             shift and go to state 13
    ID              shift and go to state 161
    IF              shift and go to state 162
    WHILE           shift and go to state 163
    COMMENT         shift and go to state 16

    block_sequence                 shift and go to state 177
    block                          shift and go to state 153
    constant_declaration           shift and go to state 154
    variable_declaration           shift and go to state 155
    var_const_update               shift and go to state 156
    if_block                       shift and go to state 157
    while_block                    shift and go to state 158
    function_call                  shift and go to state 159
    comment                        shift and go to state 160
    arrayaccess                    shift and go to state 14

state 175

    (21) function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .

    VAL             reduce using rule 21 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    VAR             reduce using rule 21 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    ID              reduce using rule 21 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    FUNCTION        reduce using rule 21 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    COMMENT         reduce using rule 21 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    FROM            reduce using rule 21 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)
    $end            reduce using rule 21 (function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE .)


state 176

    (43) if_block -> IF expression LBRACE block_sequence . RBRACE ELSE LBRACE block_sequence RBRACE
    (44) if_block -> IF expression LBRACE block_sequence . RBRACE

    RBRACE          shift and go to state 178


state 177

    (45) while_block -> WHILE expression LBRACE block_sequence . RBRACE

    RBRACE          shift and go to state 179


state 178

    (43) if_block -> IF expression LBRACE block_sequence RBRACE . ELSE LBRACE block_sequence RBRACE
    (44) if_block -> IF expression LBRACE block_sequence RBRACE .

    ELSE            shift and go to state 180
    VAL             reduce using rule 44 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    VAR             reduce using rule 44 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    ID              reduce using rule 44 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    IF              reduce using rule 44 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    WHILE           reduce using rule 44 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    COMMENT         reduce using rule 44 (if_block -> IF expression LBRACE block_sequence RBRACE .)
    RBRACE          reduce using rule 44 (if_block -> IF expression LBRACE block_sequence RBRACE .)


state 179

    (45) while_block -> WHILE expression LBRACE block_sequence RBRACE .

    VAL             reduce using rule 45 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    VAR             reduce using rule 45 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    ID              reduce using rule 45 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    IF              reduce using rule 45 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    WHILE           reduce using rule 45 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    COMMENT         reduce using rule 45 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)
    RBRACE          reduce using rule 45 (while_block -> WHILE expression LBRACE block_sequence RBRACE .)


state 180

    (43) if_block -> IF expression LBRACE block_sequence RBRACE ELSE . LBRACE block_sequence RBRACE

    LBRACE          shift and go to state 181


state 181

    (43) if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE . block_sequence RBRACE
    (34) block_sequence -> . block block_sequence
    (35) block_sequence -> . block
    (36) block -> . constant_declaration
    (37) block -> . variable_declaration
    (38) block -> . var_const_update
    (39) block -> . if_block
    (40) block -> . while_block
    (41) block -> . function_call SEMICOLON
    (42) block -> . comment
    (16) constant_declaration -> . VAL ID COLON types ASSIGN expression SEMICOLON
    (17) variable_declaration -> . VAR ID COLON types ASSIGN expression SEMICOLON
    (18) var_const_update -> . ID ASSIGN expression SEMICOLON
    (19) var_const_update -> . arrayaccess ASSIGN expression SEMICOLON
    (43) if_block -> . IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE
    (44) if_block -> . IF expression LBRACE block_sequence RBRACE
    (45) while_block -> . WHILE expression LBRACE block_sequence RBRACE
    (29) function_call -> . ID LPAREN function_param_list_call RPAREN
    (30) function_call -> . ID LPAREN RPAREN
    (4) comment -> . COMMENT STRING_LITERAL
    (61) arrayaccess -> . ID LSQUARE expression RSQUARE arrayaccess2
    (62) arrayaccess -> . function_call LSQUARE expression RSQUARE arrayaccess2

    VAL             shift and go to state 11
    VAR             shift and go to state 13
    ID              shift and go to state 161
    IF              shift and go to state 162
    WHILE           shift and go to state 163
    COMMENT         shift and go to state 16

    block_sequence                 shift and go to state 182
    block                          shift and go to state 153
    constant_declaration           shift and go to state 154
    variable_declaration           shift and go to state 155
    var_const_update               shift and go to state 156
    if_block                       shift and go to state 157
    while_block                    shift and go to state 158
    function_call                  shift and go to state 159
    comment                        shift and go to state 160
    arrayaccess                    shift and go to state 14

state 182

    (43) if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence . RBRACE

    RBRACE          shift and go to state 183


state 183

    (43) if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .

    VAL             reduce using rule 43 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    VAR             reduce using rule 43 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    ID              reduce using rule 43 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    IF              reduce using rule 43 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    WHILE           reduce using rule 43 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    COMMENT         reduce using rule 43 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)
    RBRACE          reduce using rule 43 (if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE .)

