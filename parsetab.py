
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'main_block_sequenceleftORleftANDleftEQUALNOT_EQUALleftGREATER_THANGREATER_THAN_EQUALLESS_THANLESS_THAN_EQUALleftPLUSMINUSleftTIMESDIVIDEMODrightPOWERrightNOTleftLPARENRPARENAND ASSIGN BOOL_LITERAL BOOL_TYPE COLON COMMA COMMENT DIVIDE ELSE EQUAL FLOAT_LITERAL FLOAT_TYPE FUNCTION GREATER_THAN GREATER_THAN_EQUAL ID IF INTEGER_LITERAL INT_TYPE LBRACE LESS_THAN LESS_THAN_EQUAL LPAREN LSQUARE MAIN MINUS MOD NOT NOT_EQUAL OR PLUS POWER RBRACE RPAREN RSQUARE SEMICOLON STRING_LITERAL STRING_TYPE TIMES VAL VAR VOID_TYPE WHILEmain_block_sequence : main_block main_block_sequence\n\t                        | main_blockcomment : COMMENT STRING_LITERALmain_block : constant_declaration\n     | variable_declaration \n     | var_const_update\n\t | function_declaration \n     | main_function\n     | comment\n\tconstant_declaration : VAL ID COLON types ASSIGN expression SEMICOLONvariable_declaration : VAR ID COLON types ASSIGN expression SEMICOLONvar_const_update :  ID ASSIGN expression SEMICOLON\n                        | arrayaccess ASSIGN expression SEMICOLONfunction_declaration : FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON\n    |  FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACEmain_function : FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACEfunction_param_list : parameter COMMA function_param_list\n    | parameter parameter : VAL ID COLON types\n                    | VAR ID COLON typesfunction_call : ID LPAREN function_param_list_call RPAREN \n    function_param_list_call : expression COMMA function_param_list_call\n    | expressionfunction_body : block_sequenceblock_sequence : block block_sequence\n\t | blockblock : constant_declaration\n     | variable_declaration \n     | var_const_update\n\t | if_block\n\t | while_block\n\t | function_call SEMICOLON\n     | comment\n\tif_block : IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE\n\t| IF expression LBRACE block_sequence RBRACE \n\twhile_block : WHILE expression LBRACE block_sequence RBRACEtypes : defaulttype\n            | LSQUARE arraytype RSQUAREdefaulttype : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOL_TYPE\n            | VOID_TYPEarraytype : LSQUARE arraytype RSQUARE\n            | INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOL_TYPE\n            | VOID_TYPE\n            typeliterals : INTEGER_LITERAL\n                  | FLOAT_LITERAL\n                  | STRING_LITERAL\n                  | BOOL_LITERALarrayliterals : LSQUARE array_values RSQUAREarray_values : array_values COMMA expression\n                    | expressionarrayaccess : ID LSQUARE expression RSQUARE\n                    | function_call LSQUARE expression RSQUAREexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression POWER expression\n                  | expression EQUAL expression\n                  | expression NOT_EQUAL expression\n                  | expression GREATER_THAN expression\n                  | expression GREATER_THAN_EQUAL expression\n                  | expression LESS_THAN expression\n                  | expression LESS_THAN_EQUAL expression\n                  | expression AND expression\n                  | expression OR expression\n                  | NOT expression\n                  | MINUS expression\n                  | typeliterals\n                  | arrayliterals\n                  | arrayaccess\n                  | function_call\n                  | ID\n                  | LPAREN expression RPAREN'
    
_lr_action_items = {'VAL':([0,2,3,4,5,6,7,8,25,47,48,58,82,117,130,131,133,139,140,141,142,143,144,146,150,151,152,154,158,159,160,163,164,166,168,],[9,9,-4,-5,-6,-7,-8,-9,-3,85,85,-12,-13,85,9,-10,-11,9,-27,-28,-29,-30,-31,-33,-14,9,-16,-32,9,9,-15,-35,-36,9,-34,]),'VAR':([0,2,3,4,5,6,7,8,25,47,48,58,82,117,130,131,133,139,140,141,142,143,144,146,150,151,152,154,158,159,160,163,164,166,168,],[11,11,-4,-5,-6,-7,-8,-9,-3,86,86,-12,-13,86,11,-10,-11,11,-27,-28,-29,-30,-31,-33,-14,11,-16,-32,11,11,-15,-35,-36,11,-34,]),'ID':([0,2,3,4,5,6,7,8,9,11,13,18,19,20,22,25,26,30,31,36,41,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,82,85,86,89,113,115,130,131,133,139,140,141,142,143,144,146,148,149,150,151,152,154,158,159,160,163,164,166,168,],[10,10,-4,-5,-6,-7,-8,-9,17,21,23,28,28,28,28,-3,28,28,28,28,28,-12,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-13,118,119,28,28,28,147,-10,-11,147,-27,-28,-29,-30,-31,-33,28,28,-14,147,-16,-32,147,147,-15,-35,-36,147,-34,]),'FUNCTION':([0,2,3,4,5,6,7,8,25,58,82,131,133,150,152,160,],[13,13,-4,-5,-6,-7,-8,-9,-3,-12,-13,-10,-11,-14,-16,-15,]),'COMMENT':([0,2,3,4,5,6,7,8,25,58,82,130,131,133,139,140,141,142,143,144,146,150,151,152,154,158,159,160,163,164,166,168,],[14,14,-4,-5,-6,-7,-8,-9,-3,-12,-13,14,-10,-11,14,-27,-28,-29,-30,-31,-33,-14,14,-16,-32,14,14,-15,-35,-36,14,-34,]),'$end':([1,2,3,4,5,6,7,8,16,25,58,82,131,133,150,152,160,],[0,-2,-4,-5,-6,-7,-8,-9,-1,-3,-12,-13,-10,-11,-14,-16,-15,]),'ASSIGN':([10,12,50,51,53,54,55,56,57,78,81,88,123,147,],[18,22,89,-37,-39,-40,-41,-42,-43,-57,115,-58,-38,18,]),'LSQUARE':([10,15,18,19,20,22,26,27,28,30,31,35,36,41,45,52,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,89,90,113,115,126,128,129,145,147,148,149,],[19,26,41,41,41,41,41,52,19,41,41,26,41,41,52,90,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-21,41,41,90,41,41,52,52,52,26,19,41,41,]),'LPAREN':([10,18,19,20,22,23,24,26,28,30,31,36,41,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,89,113,115,147,148,149,],[20,36,36,36,36,47,48,36,20,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,20,36,36,]),'MAIN':([13,],[24,]),'STRING_LITERAL':([14,18,19,20,22,26,30,31,36,41,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,89,113,115,148,149,],[25,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'COLON':([17,21,116,118,119,],[27,45,126,128,129,]),'NOT':([18,19,20,22,26,30,31,36,41,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,89,113,115,148,149,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'MINUS':([18,19,20,22,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,80,88,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,121,124,125,148,149,155,156,],[30,30,30,30,30,-79,60,30,30,-75,-76,-77,-78,30,-50,-51,-52,-53,30,60,60,60,60,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-74,-73,60,60,-57,-21,30,-58,30,-59,-60,-61,-62,-63,-64,60,60,60,60,60,60,60,60,-80,-54,30,30,60,60,60,30,30,60,60,]),'INTEGER_LITERAL':([18,19,20,22,26,30,31,36,41,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,89,113,115,148,149,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FLOAT_LITERAL':([18,19,20,22,26,30,31,36,41,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,89,113,115,148,149,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'BOOL_LITERAL':([18,19,20,22,26,30,31,36,41,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,89,113,115,148,149,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'IF':([25,58,82,130,131,133,139,140,141,142,143,144,146,151,154,158,159,163,164,166,168,],[-3,-12,-13,148,-10,-11,148,-27,-28,-29,-30,-31,-33,148,-32,148,148,-35,-36,148,-34,]),'WHILE':([25,58,82,130,131,133,139,140,141,142,143,144,146,151,154,158,159,163,164,166,168,],[-3,-12,-13,149,-10,-11,149,-27,-28,-29,-30,-31,-33,149,-32,149,149,-35,-36,149,-34,]),'RBRACE':([25,58,82,131,133,137,138,139,140,141,142,143,144,146,153,154,157,161,162,163,164,167,168,],[-3,-12,-13,-10,-11,152,-24,-26,-27,-28,-29,-30,-31,-33,-25,-32,160,163,164,-35,-36,168,-34,]),'INT_TYPE':([27,45,52,90,126,128,129,],[53,53,92,92,53,53,53,]),'FLOAT_TYPE':([27,45,52,90,126,128,129,],[54,54,93,93,54,54,54,]),'STRING_TYPE':([27,45,52,90,126,128,129,],[55,55,94,94,55,55,55,]),'BOOL_TYPE':([27,45,52,90,126,128,129,],[56,56,95,95,56,56,56,]),'VOID_TYPE':([27,45,52,90,126,128,129,],[57,57,96,96,57,57,57,]),'SEMICOLON':([28,29,32,33,34,35,37,38,39,40,46,51,53,54,55,56,57,73,74,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,123,125,134,145,],[-79,58,-75,-76,-77,-78,-50,-51,-52,-53,82,-37,-39,-40,-41,-42,-43,-74,-73,-57,-21,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-80,-54,131,-38,133,150,154,]),'PLUS':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,73,74,75,77,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,124,125,155,156,],[-79,59,-75,-76,-77,-78,-50,-51,-52,-53,59,59,59,59,-74,-73,59,59,-57,-21,-58,-59,-60,-61,-62,-63,-64,59,59,59,59,59,59,59,59,-80,-54,59,59,59,59,59,]),'TIMES':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,73,74,75,77,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,124,125,155,156,],[-79,61,-75,-76,-77,-78,-50,-51,-52,-53,61,61,61,61,61,-73,61,61,-57,-21,-58,61,61,-61,-62,-63,-64,61,61,61,61,61,61,61,61,-80,-54,61,61,61,61,61,]),'DIVIDE':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,73,74,75,77,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,124,125,155,156,],[-79,62,-75,-76,-77,-78,-50,-51,-52,-53,62,62,62,62,62,-73,62,62,-57,-21,-58,62,62,-61,-62,-63,-64,62,62,62,62,62,62,62,62,-80,-54,62,62,62,62,62,]),'MOD':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,73,74,75,77,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,124,125,155,156,],[-79,63,-75,-76,-77,-78,-50,-51,-52,-53,63,63,63,63,63,-73,63,63,-57,-21,-58,63,63,-61,-62,-63,-64,63,63,63,63,63,63,63,63,-80,-54,63,63,63,63,63,]),'POWER':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,73,74,75,77,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,124,125,155,156,],[-79,64,-75,-76,-77,-78,-50,-51,-52,-53,64,64,64,64,64,-73,64,64,-57,-21,-58,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-80,-54,64,64,64,64,64,]),'EQUAL':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,73,74,75,77,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,124,125,155,156,],[-79,65,-75,-76,-77,-78,-50,-51,-52,-53,65,65,65,65,-74,-73,65,65,-57,-21,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,65,65,-80,-54,65,65,65,65,65,]),'NOT_EQUAL':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,73,74,75,77,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,124,125,155,156,],[-79,66,-75,-76,-77,-78,-50,-51,-52,-53,66,66,66,66,-74,-73,66,66,-57,-21,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,66,66,-80,-54,66,66,66,66,66,]),'GREATER_THAN':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,73,74,75,77,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,124,125,155,156,],[-79,67,-75,-76,-77,-78,-50,-51,-52,-53,67,67,67,67,-74,-73,67,67,-57,-21,-58,-59,-60,-61,-62,-63,-64,67,67,-67,-68,-69,-70,67,67,-80,-54,67,67,67,67,67,]),'GREATER_THAN_EQUAL':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,73,74,75,77,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,124,125,155,156,],[-79,68,-75,-76,-77,-78,-50,-51,-52,-53,68,68,68,68,-74,-73,68,68,-57,-21,-58,-59,-60,-61,-62,-63,-64,68,68,-67,-68,-69,-70,68,68,-80,-54,68,68,68,68,68,]),'LESS_THAN':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,73,74,75,77,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,124,125,155,156,],[-79,69,-75,-76,-77,-78,-50,-51,-52,-53,69,69,69,69,-74,-73,69,69,-57,-21,-58,-59,-60,-61,-62,-63,-64,69,69,-67,-68,-69,-70,69,69,-80,-54,69,69,69,69,69,]),'LESS_THAN_EQUAL':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,73,74,75,77,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,124,125,155,156,],[-79,70,-75,-76,-77,-78,-50,-51,-52,-53,70,70,70,70,-74,-73,70,70,-57,-21,-58,-59,-60,-61,-62,-63,-64,70,70,-67,-68,-69,-70,70,70,-80,-54,70,70,70,70,70,]),'AND':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,73,74,75,77,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,124,125,155,156,],[-79,71,-75,-76,-77,-78,-50,-51,-52,-53,71,71,71,71,-74,-73,71,71,-57,-21,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,71,-80,-54,71,71,71,71,71,]),'OR':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,73,74,75,77,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,121,124,125,155,156,],[-79,72,-75,-76,-77,-78,-50,-51,-52,-53,72,72,72,72,-74,-73,72,72,-57,-21,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-80,-54,72,72,72,72,72,]),'RSQUARE':([28,32,33,34,35,37,38,39,40,42,49,73,74,76,77,78,79,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,122,124,132,],[-79,-75,-76,-77,-78,-50,-51,-52,-53,78,88,-74,-73,112,-56,-57,-21,-58,123,-45,-46,-47,-48,-49,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-80,-54,132,-55,-44,]),'COMMA':([28,32,33,34,35,37,38,39,40,44,51,53,54,55,56,57,73,74,76,77,78,79,84,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,123,124,135,136,],[-79,-75,-76,-77,-78,-50,-51,-52,-53,80,-37,-39,-40,-41,-42,-43,-74,-73,113,-56,-57,-21,117,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-80,-54,-38,-55,-19,-20,]),'RPAREN':([28,32,33,34,35,37,38,39,40,43,44,51,53,54,55,56,57,73,74,75,78,79,83,84,87,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,123,127,135,136,],[-79,-75,-76,-77,-78,-50,-51,-52,-53,79,-23,-37,-39,-40,-41,-42,-43,-74,-73,111,-57,-21,116,-18,120,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-80,-54,-22,-38,-17,-19,-20,]),'LBRACE':([28,32,33,34,35,37,38,39,40,51,53,54,55,56,57,73,74,78,79,88,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,120,123,134,155,156,165,],[-79,-75,-76,-77,-78,-50,-51,-52,-53,-37,-39,-40,-41,-42,-43,-74,-73,-57,-21,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-80,-54,130,-38,151,158,159,166,]),'ELSE':([163,],[165,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main_block_sequence':([0,2,],[1,16,]),'main_block':([0,2,],[2,2,]),'constant_declaration':([0,2,130,139,151,158,159,166,],[3,3,140,140,140,140,140,140,]),'variable_declaration':([0,2,130,139,151,158,159,166,],[4,4,141,141,141,141,141,141,]),'var_const_update':([0,2,130,139,151,158,159,166,],[5,5,142,142,142,142,142,142,]),'function_declaration':([0,2,],[6,6,]),'main_function':([0,2,],[7,7,]),'comment':([0,2,130,139,151,158,159,166,],[8,8,146,146,146,146,146,146,]),'arrayaccess':([0,2,18,19,20,22,26,30,31,36,41,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,89,113,115,130,139,148,149,151,158,159,166,],[12,12,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,12,12,34,34,12,12,12,12,]),'function_call':([0,2,18,19,20,22,26,30,31,36,41,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,89,113,115,130,139,148,149,151,158,159,166,],[15,15,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,145,145,35,35,145,145,145,145,]),'expression':([18,19,20,22,26,30,31,36,41,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,89,113,115,148,149,],[29,42,44,46,49,73,74,75,77,97,98,99,100,101,102,103,104,105,106,107,108,109,110,44,121,124,125,155,156,]),'typeliterals':([18,19,20,22,26,30,31,36,41,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,89,113,115,148,149,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'arrayliterals':([18,19,20,22,26,30,31,36,41,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,89,113,115,148,149,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'function_param_list_call':([20,80,],[43,114,]),'types':([27,45,126,128,129,],[50,81,134,135,136,]),'defaulttype':([27,45,126,128,129,],[51,51,51,51,51,]),'array_values':([41,],[76,]),'function_param_list':([47,48,117,],[83,87,127,]),'parameter':([47,48,117,],[84,84,84,]),'arraytype':([52,90,],[91,122,]),'function_body':([130,151,],[137,157,]),'block_sequence':([130,139,151,158,159,166,],[138,153,138,161,162,167,]),'block':([130,139,151,158,159,166,],[139,139,139,139,139,139,]),'if_block':([130,139,151,158,159,166,],[143,143,143,143,143,143,]),'while_block':([130,139,151,158,159,166,],[144,144,144,144,144,144,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main_block_sequence","S'",1,None,None,None),
  ('main_block_sequence -> main_block main_block_sequence','main_block_sequence',2,'p_main_block_sequence','rules.py',110),
  ('main_block_sequence -> main_block','main_block_sequence',1,'p_main_block_sequence','rules.py',111),
  ('comment -> COMMENT STRING_LITERAL','comment',2,'p_comment','rules.py',118),
  ('main_block -> constant_declaration','main_block',1,'p_main_block','rules.py',123),
  ('main_block -> variable_declaration','main_block',1,'p_main_block','rules.py',124),
  ('main_block -> var_const_update','main_block',1,'p_main_block','rules.py',125),
  ('main_block -> function_declaration','main_block',1,'p_main_block','rules.py',126),
  ('main_block -> main_function','main_block',1,'p_main_block','rules.py',127),
  ('main_block -> comment','main_block',1,'p_main_block','rules.py',128),
  ('constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON','constant_declaration',7,'p_constant_declaration','rules.py',135),
  ('variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration','rules.py',140),
  ('var_const_update -> ID ASSIGN expression SEMICOLON','var_const_update',4,'p_var_const_update','rules.py',145),
  ('var_const_update -> arrayaccess ASSIGN expression SEMICOLON','var_const_update',4,'p_var_const_update','rules.py',146),
  ('function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON','function_declaration',8,'p_function_declaration','rules.py',151),
  ('function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE','function_declaration',10,'p_function_declaration','rules.py',152),
  ('main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE','main_function',8,'p_main_function','rules.py',159),
  ('function_param_list -> parameter COMMA function_param_list','function_param_list',3,'p_function_param_list','rules.py',163),
  ('function_param_list -> parameter','function_param_list',1,'p_function_param_list','rules.py',164),
  ('parameter -> VAL ID COLON types','parameter',4,'p_parameter','rules.py',171),
  ('parameter -> VAR ID COLON types','parameter',4,'p_parameter','rules.py',172),
  ('function_call -> ID LPAREN function_param_list_call RPAREN','function_call',4,'p_function_call','rules.py',181),
  ('function_param_list_call -> expression COMMA function_param_list_call','function_param_list_call',3,'p_function_param_list_call','rules.py',186),
  ('function_param_list_call -> expression','function_param_list_call',1,'p_function_param_list_call','rules.py',187),
  ('function_body -> block_sequence','function_body',1,'p_function_body','rules.py',195),
  ('block_sequence -> block block_sequence','block_sequence',2,'p_block_sequence','rules.py',200),
  ('block_sequence -> block','block_sequence',1,'p_block_sequence','rules.py',201),
  ('block -> constant_declaration','block',1,'p_block','rules.py',208),
  ('block -> variable_declaration','block',1,'p_block','rules.py',209),
  ('block -> var_const_update','block',1,'p_block','rules.py',210),
  ('block -> if_block','block',1,'p_block','rules.py',211),
  ('block -> while_block','block',1,'p_block','rules.py',212),
  ('block -> function_call SEMICOLON','block',2,'p_block','rules.py',213),
  ('block -> comment','block',1,'p_block','rules.py',214),
  ('if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE','if_block',9,'p_if_block','rules.py',220),
  ('if_block -> IF expression LBRACE block_sequence RBRACE','if_block',5,'p_if_block','rules.py',221),
  ('while_block -> WHILE expression LBRACE block_sequence RBRACE','while_block',5,'p_while_block','rules.py',229),
  ('types -> defaulttype','types',1,'p_types','rules.py',235),
  ('types -> LSQUARE arraytype RSQUARE','types',3,'p_types','rules.py',236),
  ('defaulttype -> INT_TYPE','defaulttype',1,'p_defaultype','rules.py',240),
  ('defaulttype -> FLOAT_TYPE','defaulttype',1,'p_defaultype','rules.py',241),
  ('defaulttype -> STRING_TYPE','defaulttype',1,'p_defaultype','rules.py',242),
  ('defaulttype -> BOOL_TYPE','defaulttype',1,'p_defaultype','rules.py',243),
  ('defaulttype -> VOID_TYPE','defaulttype',1,'p_defaultype','rules.py',244),
  ('arraytype -> LSQUARE arraytype RSQUARE','arraytype',3,'p_arraytype','rules.py',248),
  ('arraytype -> INT_TYPE','arraytype',1,'p_arraytype','rules.py',249),
  ('arraytype -> FLOAT_TYPE','arraytype',1,'p_arraytype','rules.py',250),
  ('arraytype -> STRING_TYPE','arraytype',1,'p_arraytype','rules.py',251),
  ('arraytype -> BOOL_TYPE','arraytype',1,'p_arraytype','rules.py',252),
  ('arraytype -> VOID_TYPE','arraytype',1,'p_arraytype','rules.py',253),
  ('typeliterals -> INTEGER_LITERAL','typeliterals',1,'p_typeliterals','rules.py',262),
  ('typeliterals -> FLOAT_LITERAL','typeliterals',1,'p_typeliterals','rules.py',263),
  ('typeliterals -> STRING_LITERAL','typeliterals',1,'p_typeliterals','rules.py',264),
  ('typeliterals -> BOOL_LITERAL','typeliterals',1,'p_typeliterals','rules.py',265),
  ('arrayliterals -> LSQUARE array_values RSQUARE','arrayliterals',3,'p_arrayliterals','rules.py',270),
  ('array_values -> array_values COMMA expression','array_values',3,'p_array_values','rules.py',274),
  ('array_values -> expression','array_values',1,'p_array_values','rules.py',275),
  ('arrayaccess -> ID LSQUARE expression RSQUARE','arrayaccess',4,'p_arrayaccess','rules.py',291),
  ('arrayaccess -> function_call LSQUARE expression RSQUARE','arrayaccess',4,'p_arrayaccess','rules.py',292),
  ('expression -> expression PLUS expression','expression',3,'p_expression','rules.py',296),
  ('expression -> expression MINUS expression','expression',3,'p_expression','rules.py',297),
  ('expression -> expression TIMES expression','expression',3,'p_expression','rules.py',298),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','rules.py',299),
  ('expression -> expression MOD expression','expression',3,'p_expression','rules.py',300),
  ('expression -> expression POWER expression','expression',3,'p_expression','rules.py',301),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','rules.py',302),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression','rules.py',303),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression','rules.py',304),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression','rules.py',305),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression','rules.py',306),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression','rules.py',307),
  ('expression -> expression AND expression','expression',3,'p_expression','rules.py',308),
  ('expression -> expression OR expression','expression',3,'p_expression','rules.py',309),
  ('expression -> NOT expression','expression',2,'p_expression','rules.py',310),
  ('expression -> MINUS expression','expression',2,'p_expression','rules.py',311),
  ('expression -> typeliterals','expression',1,'p_expression','rules.py',312),
  ('expression -> arrayliterals','expression',1,'p_expression','rules.py',313),
  ('expression -> arrayaccess','expression',1,'p_expression','rules.py',314),
  ('expression -> function_call','expression',1,'p_expression','rules.py',315),
  ('expression -> ID','expression',1,'p_expression','rules.py',316),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','rules.py',317),
]
