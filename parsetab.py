
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftCOMMArightASSIGNleftORleftANDnonassocEQUALNOT_EQUALnonassocGREATER_THANGREATER_THAN_EQUALLESS_THANLESS_THAN_EQUALleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSrightPOWERrightNOTleftLPARENRPARENAND ASSIGN BOOL_LITERAL BOOL_TYPE CHAR_LITERAL CHAR_TYPE COLON COMMA COMMENT DIVIDE ELSE EQUAL FLOAT_LITERAL FLOAT_TYPE FUNCTION GREATER_THAN GREATER_THAN_EQUAL ID IF INTEGER_LITERAL INT_TYPE LBRACE LESS_THAN LESS_THAN_EQUAL LPAREN LSQUARE MAIN MINUS MOD NOT NOT_EQUAL OR PLUS POWER RBRACE RPAREN RSQUARE SEMICOLON STRING_LITERAL STRING_TYPE TIMES VAL VAR VOID_TYPE WHILEprogram : main_block_sequence main_block_sequence : main_block main_block_sequence\n\t                        | main_blockcomment : COMMENT STRING_LITERALmain_block : constant_declaration\n     | variable_declaration \n     | var_const_update\n\t | function_declaration \n     | main_function\n     | comment\n\tconstant_declaration : VAL ID COLON types ASSIGN expression SEMICOLONvariable_declaration : VAR ID COLON types ASSIGN expression SEMICOLONvar_const_update :  ID ASSIGN expression SEMICOLON\n                        | arrayaccess ASSIGN expression SEMICOLONfunction_declaration : FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON\n    |  FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACEmain_function : FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACEfunction_param_list : function_param_list_aux\n                           |function_param_list_aux : parameter COMMA function_param_list_aux\n                            | parameter parameter : VAL ID COLON types\n                  | VAR ID COLON typesfunction_call : ID LPAREN function_param_list_call RPAREN \n                     | ID LPAREN RPAREN \n    function_param_list_call : expression COMMA function_param_list_call\n                                | expressionfunction_body : block_sequenceblock_sequence : block block_sequence\n\t | blockblock : constant_declaration\n     | variable_declaration \n     | var_const_update\n\t | if_block\n\t | while_block\n\t | function_call SEMICOLON\n     | comment\n\tif_block : IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE\n\t            | IF expression LBRACE block_sequence RBRACE \n\twhile_block : WHILE expression LBRACE block_sequence RBRACEtypes : defaulttype\n            | LSQUARE arraytype RSQUAREdefaulttype : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOL_TYPE\n            | VOID_TYPE\n            | CHAR_TYPEarraytype : LSQUARE arraytype RSQUARE\n            | INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOL_TYPE\n            | VOID_TYPE\n            expression : ID arrayaccess : ID LSQUARE expression RSQUARE arrayaccess2 \n                    | function_call LSQUARE expression RSQUARE arrayaccess2arrayaccess2 : LSQUARE expression RSQUARE arrayaccess2\n                    | expression : INTEGER_LITERAL\n                  | MINUS INTEGER_LITERAL %prec UMINUSexpression : FLOAT_LITERAL\n                  | MINUS FLOAT_LITERAL %prec UMINUSexpression : STRING_LITERALexpression : BOOL_LITERALexpression : CHAR_LITERALexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression POWER expression\n                  | expression EQUAL expression\n                  | expression NOT_EQUAL expression\n                  | expression GREATER_THAN expression\n                  | expression GREATER_THAN_EQUAL expression\n                  | expression LESS_THAN expression\n                  | expression LESS_THAN_EQUAL expression\n                  | expression AND expression\n                  | expression OR expression\n                  | NOT expression\n                  | function_call\n                  | arrayaccess\n                  | LPAREN expression RPAREN'
    
_lr_action_items = {'VAL':([0,3,4,5,6,7,8,9,26,47,48,59,82,118,132,133,136,142,143,144,145,146,147,149,154,155,156,158,162,163,164,167,168,170,172,],[10,10,-5,-6,-7,-8,-9,-10,-4,86,86,-13,-14,86,10,-11,-12,10,-31,-32,-33,-34,-35,-37,-15,10,-17,-36,10,10,-16,-39,-40,10,-38,]),'VAR':([0,3,4,5,6,7,8,9,26,47,48,59,82,118,132,133,136,142,143,144,145,146,147,149,154,155,156,158,162,163,164,167,168,170,172,],[12,12,-5,-6,-7,-8,-9,-10,-4,87,87,-13,-14,87,12,-11,-12,12,-31,-32,-33,-34,-35,-37,-15,12,-17,-36,12,12,-16,-39,-40,12,-38,]),'ID':([0,3,4,5,6,7,8,9,10,12,14,19,20,21,23,26,27,37,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,82,86,87,90,113,116,132,133,136,142,143,144,145,146,147,149,151,152,154,155,156,158,162,163,164,167,168,170,172,],[11,11,-5,-6,-7,-8,-9,-10,18,22,24,29,29,29,29,-4,29,29,29,-13,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-14,119,120,29,29,29,150,-11,-12,150,-31,-32,-33,-34,-35,-37,29,29,-15,150,-17,-36,150,150,-16,-39,-40,150,-38,]),'FUNCTION':([0,3,4,5,6,7,8,9,26,59,82,133,136,154,156,164,],[14,14,-5,-6,-7,-8,-9,-10,-4,-13,-14,-11,-12,-15,-17,-16,]),'COMMENT':([0,3,4,5,6,7,8,9,26,59,82,132,133,136,142,143,144,145,146,147,149,154,155,156,158,162,163,164,167,168,170,172,],[15,15,-5,-6,-7,-8,-9,-10,-4,-13,-14,15,-11,-12,15,-31,-32,-33,-34,-35,-37,-15,15,-17,-36,15,15,-16,-39,-40,15,-38,]),'$end':([1,2,3,4,5,6,7,8,9,17,26,59,82,133,136,154,156,164,],[0,-1,-3,-5,-6,-7,-8,-9,-10,-2,-4,-13,-14,-11,-12,-15,-17,-16,]),'ASSIGN':([11,13,50,51,53,54,55,56,57,58,78,81,89,114,122,125,135,150,153,],[19,23,90,-41,-43,-44,-45,-46,-47,-48,-59,116,-59,-56,-57,-42,-59,19,-58,]),'LSQUARE':([11,16,28,29,38,43,45,52,78,79,89,91,128,130,131,135,148,150,],[20,27,52,20,27,-25,52,91,113,-24,113,91,52,52,52,113,27,20,]),'LPAREN':([11,19,20,21,23,24,25,27,29,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,90,113,116,150,151,152,],[21,40,40,40,40,47,48,40,21,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,21,40,40,]),'MAIN':([14,],[25,]),'STRING_LITERAL':([15,19,20,21,23,27,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,90,113,116,151,152,],[26,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'COLON':([18,22,117,119,120,],[28,45,128,130,131,]),'INTEGER_LITERAL':([19,20,21,23,27,32,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,90,113,116,151,152,],[31,31,31,31,31,74,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'MINUS':([19,20,21,23,27,29,30,31,33,34,35,36,37,38,39,40,41,43,44,46,49,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,89,90,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,123,126,127,135,151,152,153,159,160,],[32,32,32,32,32,-55,61,-60,-62,-64,-65,-66,32,-82,-83,32,61,-25,61,61,61,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-61,-63,-81,61,-59,-24,32,-59,32,-67,-68,-69,-70,-71,-72,61,61,61,61,61,61,61,61,-84,32,-56,32,-57,61,61,61,-59,32,32,-58,61,61,]),'FLOAT_LITERAL':([19,20,21,23,27,32,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,90,113,116,151,152,],[33,33,33,33,33,75,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'BOOL_LITERAL':([19,20,21,23,27,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,90,113,116,151,152,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'CHAR_LITERAL':([19,20,21,23,27,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,90,113,116,151,152,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'NOT':([19,20,21,23,27,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,90,113,116,151,152,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'RPAREN':([21,29,31,33,34,35,36,38,39,42,43,44,47,48,51,53,54,55,56,57,58,74,75,76,77,78,79,83,84,85,88,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,122,125,129,135,138,139,153,],[43,-55,-60,-62,-64,-65,-66,-82,-83,79,-25,-27,-19,-19,-41,-43,-44,-45,-46,-47,-48,-61,-63,-81,112,-59,-24,117,-18,-21,121,-59,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-84,-56,-26,-57,-42,-20,-59,-22,-23,-58,]),'IF':([26,59,82,132,133,136,142,143,144,145,146,147,149,155,158,162,163,167,168,170,172,],[-4,-13,-14,151,-11,-12,151,-31,-32,-33,-34,-35,-37,151,-36,151,151,-39,-40,151,-38,]),'WHILE':([26,59,82,132,133,136,142,143,144,145,146,147,149,155,158,162,163,167,168,170,172,],[-4,-13,-14,152,-11,-12,152,-31,-32,-33,-34,-35,-37,152,-36,152,152,-39,-40,152,-38,]),'RBRACE':([26,59,82,133,136,140,141,142,143,144,145,146,147,149,157,158,161,165,166,167,168,171,172,],[-4,-13,-14,-11,-12,156,-28,-30,-31,-32,-33,-34,-35,-37,-29,-36,164,167,168,-39,-40,172,-38,]),'INT_TYPE':([28,45,52,91,128,130,131,],[53,53,93,93,53,53,53,]),'FLOAT_TYPE':([28,45,52,91,128,130,131,],[54,54,94,94,54,54,54,]),'STRING_TYPE':([28,45,52,91,128,130,131,],[55,55,95,95,55,55,55,]),'BOOL_TYPE':([28,45,52,91,128,130,131,],[56,56,96,96,56,56,56,]),'VOID_TYPE':([28,45,52,91,128,130,131,],[57,57,97,97,57,57,57,]),'CHAR_TYPE':([28,45,128,130,131,],[58,58,58,58,58,]),'SEMICOLON':([29,30,31,33,34,35,36,38,39,43,46,51,53,54,55,56,57,58,74,75,76,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,125,127,135,137,148,153,],[-55,59,-60,-62,-64,-65,-66,-82,-83,-25,82,-41,-43,-44,-45,-46,-47,-48,-61,-63,-81,-59,-24,-59,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-84,-56,-57,133,-42,136,-59,154,158,-58,]),'PLUS':([29,30,31,33,34,35,36,38,39,41,43,44,46,49,74,75,76,77,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,126,127,135,153,159,160,],[-55,60,-60,-62,-64,-65,-66,-82,-83,60,-25,60,60,60,-61,-63,-81,60,-59,-24,-59,-67,-68,-69,-70,-71,-72,60,60,60,60,60,60,60,60,-84,-56,-57,60,60,60,-59,-58,60,60,]),'TIMES':([29,30,31,33,34,35,36,38,39,41,43,44,46,49,74,75,76,77,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,126,127,135,153,159,160,],[-55,62,-60,-62,-64,-65,-66,-82,-83,62,-25,62,62,62,-61,-63,-81,62,-59,-24,-59,62,62,-69,-70,-71,-72,62,62,62,62,62,62,62,62,-84,-56,-57,62,62,62,-59,-58,62,62,]),'DIVIDE':([29,30,31,33,34,35,36,38,39,41,43,44,46,49,74,75,76,77,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,126,127,135,153,159,160,],[-55,63,-60,-62,-64,-65,-66,-82,-83,63,-25,63,63,63,-61,-63,-81,63,-59,-24,-59,63,63,-69,-70,-71,-72,63,63,63,63,63,63,63,63,-84,-56,-57,63,63,63,-59,-58,63,63,]),'MOD':([29,30,31,33,34,35,36,38,39,41,43,44,46,49,74,75,76,77,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,126,127,135,153,159,160,],[-55,64,-60,-62,-64,-65,-66,-82,-83,64,-25,64,64,64,-61,-63,-81,64,-59,-24,-59,64,64,-69,-70,-71,-72,64,64,64,64,64,64,64,64,-84,-56,-57,64,64,64,-59,-58,64,64,]),'POWER':([29,30,31,33,34,35,36,38,39,41,43,44,46,49,74,75,76,77,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,126,127,135,153,159,160,],[-55,65,-60,-62,-64,-65,-66,-82,-83,65,-25,65,65,65,-61,-63,-81,65,-59,-24,-59,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-84,-56,-57,65,65,65,-59,-58,65,65,]),'EQUAL':([29,30,31,33,34,35,36,38,39,41,43,44,46,49,74,75,76,77,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,126,127,135,153,159,160,],[-55,66,-60,-62,-64,-65,-66,-82,-83,66,-25,66,66,66,-61,-63,-81,66,-59,-24,-59,-67,-68,-69,-70,-71,-72,None,None,-75,-76,-77,-78,66,66,-84,-56,-57,66,66,66,-59,-58,66,66,]),'NOT_EQUAL':([29,30,31,33,34,35,36,38,39,41,43,44,46,49,74,75,76,77,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,126,127,135,153,159,160,],[-55,67,-60,-62,-64,-65,-66,-82,-83,67,-25,67,67,67,-61,-63,-81,67,-59,-24,-59,-67,-68,-69,-70,-71,-72,None,None,-75,-76,-77,-78,67,67,-84,-56,-57,67,67,67,-59,-58,67,67,]),'GREATER_THAN':([29,30,31,33,34,35,36,38,39,41,43,44,46,49,74,75,76,77,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,126,127,135,153,159,160,],[-55,68,-60,-62,-64,-65,-66,-82,-83,68,-25,68,68,68,-61,-63,-81,68,-59,-24,-59,-67,-68,-69,-70,-71,-72,68,68,None,None,None,None,68,68,-84,-56,-57,68,68,68,-59,-58,68,68,]),'GREATER_THAN_EQUAL':([29,30,31,33,34,35,36,38,39,41,43,44,46,49,74,75,76,77,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,126,127,135,153,159,160,],[-55,69,-60,-62,-64,-65,-66,-82,-83,69,-25,69,69,69,-61,-63,-81,69,-59,-24,-59,-67,-68,-69,-70,-71,-72,69,69,None,None,None,None,69,69,-84,-56,-57,69,69,69,-59,-58,69,69,]),'LESS_THAN':([29,30,31,33,34,35,36,38,39,41,43,44,46,49,74,75,76,77,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,126,127,135,153,159,160,],[-55,70,-60,-62,-64,-65,-66,-82,-83,70,-25,70,70,70,-61,-63,-81,70,-59,-24,-59,-67,-68,-69,-70,-71,-72,70,70,None,None,None,None,70,70,-84,-56,-57,70,70,70,-59,-58,70,70,]),'LESS_THAN_EQUAL':([29,30,31,33,34,35,36,38,39,41,43,44,46,49,74,75,76,77,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,126,127,135,153,159,160,],[-55,71,-60,-62,-64,-65,-66,-82,-83,71,-25,71,71,71,-61,-63,-81,71,-59,-24,-59,-67,-68,-69,-70,-71,-72,71,71,None,None,None,None,71,71,-84,-56,-57,71,71,71,-59,-58,71,71,]),'AND':([29,30,31,33,34,35,36,38,39,41,43,44,46,49,74,75,76,77,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,126,127,135,153,159,160,],[-55,72,-60,-62,-64,-65,-66,-82,-83,72,-25,72,72,72,-61,-63,-81,72,-59,-24,-59,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,72,-84,-56,-57,72,72,72,-59,-58,72,72,]),'OR':([29,30,31,33,34,35,36,38,39,41,43,44,46,49,74,75,76,77,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,123,126,127,135,153,159,160,],[-55,73,-60,-62,-64,-65,-66,-82,-83,73,-25,73,73,73,-61,-63,-81,73,-59,-24,-59,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-84,-56,-57,73,73,73,-59,-58,73,73,]),'RSQUARE':([29,31,33,34,35,36,38,39,41,43,49,74,75,76,78,79,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,124,126,134,135,153,],[-55,-60,-62,-64,-65,-66,-82,-83,78,-25,89,-61,-63,-81,-59,-24,-59,125,-50,-51,-52,-53,-54,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-84,-56,-57,134,135,-49,-59,-58,]),'COMMA':([29,31,33,34,35,36,38,39,43,44,51,53,54,55,56,57,58,74,75,76,78,79,85,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,122,125,135,138,139,153,],[-55,-60,-62,-64,-65,-66,-82,-83,-25,80,-41,-43,-44,-45,-46,-47,-48,-61,-63,-81,-59,-24,118,-59,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-84,-56,-57,-42,-59,-22,-23,-58,]),'LBRACE':([29,31,33,34,35,36,38,39,43,51,53,54,55,56,57,58,74,75,76,78,79,89,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,121,122,125,135,137,153,159,160,169,],[-55,-60,-62,-64,-65,-66,-82,-83,-25,-41,-43,-44,-45,-46,-47,-48,-61,-63,-81,-59,-24,-59,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-84,-56,132,-57,-42,-59,155,-58,162,163,170,]),'ELSE':([167,],[169,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'main_block_sequence':([0,3,],[2,17,]),'main_block':([0,3,],[3,3,]),'constant_declaration':([0,3,132,142,155,162,163,170,],[4,4,143,143,143,143,143,143,]),'variable_declaration':([0,3,132,142,155,162,163,170,],[5,5,144,144,144,144,144,144,]),'var_const_update':([0,3,132,142,155,162,163,170,],[6,6,145,145,145,145,145,145,]),'function_declaration':([0,3,],[7,7,]),'main_function':([0,3,],[8,8,]),'comment':([0,3,132,142,155,162,163,170,],[9,9,149,149,149,149,149,149,]),'arrayaccess':([0,3,19,20,21,23,27,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,90,113,116,132,142,151,152,155,162,163,170,],[13,13,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,13,13,39,39,13,13,13,13,]),'function_call':([0,3,19,20,21,23,27,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,90,113,116,132,142,151,152,155,162,163,170,],[16,16,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,148,148,38,38,148,148,148,148,]),'expression':([19,20,21,23,27,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,90,113,116,151,152,],[30,41,44,46,49,76,77,98,99,100,101,102,103,104,105,106,107,108,109,110,111,44,123,126,127,159,160,]),'function_param_list_call':([21,80,],[42,115,]),'types':([28,45,128,130,131,],[50,81,137,138,139,]),'defaulttype':([28,45,128,130,131,],[51,51,51,51,51,]),'function_param_list':([47,48,],[83,88,]),'function_param_list_aux':([47,48,118,],[84,84,129,]),'parameter':([47,48,118,],[85,85,85,]),'arraytype':([52,91,],[92,124,]),'arrayaccess2':([78,89,135,],[114,122,153,]),'function_body':([132,155,],[140,161,]),'block_sequence':([132,142,155,162,163,170,],[141,157,141,165,166,171,]),'block':([132,142,155,162,163,170,],[142,142,142,142,142,142,]),'if_block':([132,142,155,162,163,170,],[146,146,146,146,146,146,]),'while_block':([132,142,155,162,163,170,],[147,147,147,147,147,147,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> main_block_sequence','program',1,'p_program','rules.py',119),
  ('main_block_sequence -> main_block main_block_sequence','main_block_sequence',2,'p_main_block_sequence','rules.py',124),
  ('main_block_sequence -> main_block','main_block_sequence',1,'p_main_block_sequence','rules.py',125),
  ('comment -> COMMENT STRING_LITERAL','comment',2,'p_comment','rules.py',132),
  ('main_block -> constant_declaration','main_block',1,'p_main_block','rules.py',137),
  ('main_block -> variable_declaration','main_block',1,'p_main_block','rules.py',138),
  ('main_block -> var_const_update','main_block',1,'p_main_block','rules.py',139),
  ('main_block -> function_declaration','main_block',1,'p_main_block','rules.py',140),
  ('main_block -> main_function','main_block',1,'p_main_block','rules.py',141),
  ('main_block -> comment','main_block',1,'p_main_block','rules.py',142),
  ('constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON','constant_declaration',7,'p_constant_declaration','rules.py',149),
  ('variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration','rules.py',154),
  ('var_const_update -> ID ASSIGN expression SEMICOLON','var_const_update',4,'p_var_const_update','rules.py',159),
  ('var_const_update -> arrayaccess ASSIGN expression SEMICOLON','var_const_update',4,'p_var_const_update','rules.py',160),
  ('function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON','function_declaration',8,'p_function_declaration','rules.py',165),
  ('function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE','function_declaration',10,'p_function_declaration','rules.py',166),
  ('main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE','main_function',8,'p_main_function','rules.py',173),
  ('function_param_list -> function_param_list_aux','function_param_list',1,'p_function_param_list','rules.py',177),
  ('function_param_list -> <empty>','function_param_list',0,'p_function_param_list','rules.py',178),
  ('function_param_list_aux -> parameter COMMA function_param_list_aux','function_param_list_aux',3,'p_function_param_list_aux','rules.py',185),
  ('function_param_list_aux -> parameter','function_param_list_aux',1,'p_function_param_list_aux','rules.py',186),
  ('parameter -> VAL ID COLON types','parameter',4,'p_parameter','rules.py',196),
  ('parameter -> VAR ID COLON types','parameter',4,'p_parameter','rules.py',197),
  ('function_call -> ID LPAREN function_param_list_call RPAREN','function_call',4,'p_function_call','rules.py',206),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','rules.py',207),
  ('function_param_list_call -> expression COMMA function_param_list_call','function_param_list_call',3,'p_function_param_list_call','rules.py',216),
  ('function_param_list_call -> expression','function_param_list_call',1,'p_function_param_list_call','rules.py',217),
  ('function_body -> block_sequence','function_body',1,'p_function_body','rules.py',228),
  ('block_sequence -> block block_sequence','block_sequence',2,'p_block_sequence','rules.py',233),
  ('block_sequence -> block','block_sequence',1,'p_block_sequence','rules.py',234),
  ('block -> constant_declaration','block',1,'p_block','rules.py',241),
  ('block -> variable_declaration','block',1,'p_block','rules.py',242),
  ('block -> var_const_update','block',1,'p_block','rules.py',243),
  ('block -> if_block','block',1,'p_block','rules.py',244),
  ('block -> while_block','block',1,'p_block','rules.py',245),
  ('block -> function_call SEMICOLON','block',2,'p_block','rules.py',246),
  ('block -> comment','block',1,'p_block','rules.py',247),
  ('if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE','if_block',9,'p_if_block','rules.py',253),
  ('if_block -> IF expression LBRACE block_sequence RBRACE','if_block',5,'p_if_block','rules.py',254),
  ('while_block -> WHILE expression LBRACE block_sequence RBRACE','while_block',5,'p_while_block','rules.py',263),
  ('types -> defaulttype','types',1,'p_types','rules.py',268),
  ('types -> LSQUARE arraytype RSQUARE','types',3,'p_types','rules.py',269),
  ('defaulttype -> INT_TYPE','defaulttype',1,'p_defaultype','rules.py',276),
  ('defaulttype -> FLOAT_TYPE','defaulttype',1,'p_defaultype','rules.py',277),
  ('defaulttype -> STRING_TYPE','defaulttype',1,'p_defaultype','rules.py',278),
  ('defaulttype -> BOOL_TYPE','defaulttype',1,'p_defaultype','rules.py',279),
  ('defaulttype -> VOID_TYPE','defaulttype',1,'p_defaultype','rules.py',280),
  ('defaulttype -> CHAR_TYPE','defaulttype',1,'p_defaultype','rules.py',281),
  ('arraytype -> LSQUARE arraytype RSQUARE','arraytype',3,'p_arraytype','rules.py',285),
  ('arraytype -> INT_TYPE','arraytype',1,'p_arraytype','rules.py',286),
  ('arraytype -> FLOAT_TYPE','arraytype',1,'p_arraytype','rules.py',287),
  ('arraytype -> STRING_TYPE','arraytype',1,'p_arraytype','rules.py',288),
  ('arraytype -> BOOL_TYPE','arraytype',1,'p_arraytype','rules.py',289),
  ('arraytype -> VOID_TYPE','arraytype',1,'p_arraytype','rules.py',290),
  ('expression -> ID','expression',1,'p_identifier','rules.py',299),
  ('arrayaccess -> ID LSQUARE expression RSQUARE arrayaccess2','arrayaccess',5,'p_arrayaccess','rules.py',304),
  ('arrayaccess -> function_call LSQUARE expression RSQUARE arrayaccess2','arrayaccess',5,'p_arrayaccess','rules.py',305),
  ('arrayaccess2 -> LSQUARE expression RSQUARE arrayaccess2','arrayaccess2',4,'p_arrayaccess2','rules.py',309),
  ('arrayaccess2 -> <empty>','arrayaccess2',0,'p_arrayaccess2','rules.py',310),
  ('expression -> INTEGER_LITERAL','expression',1,'p_integer_literal','rules.py',320),
  ('expression -> MINUS INTEGER_LITERAL','expression',2,'p_integer_literal','rules.py',321),
  ('expression -> FLOAT_LITERAL','expression',1,'p_float_literal','rules.py',328),
  ('expression -> MINUS FLOAT_LITERAL','expression',2,'p_float_literal','rules.py',329),
  ('expression -> STRING_LITERAL','expression',1,'p_string_literal','rules.py',336),
  ('expression -> BOOL_LITERAL','expression',1,'p_bool_literal','rules.py',340),
  ('expression -> CHAR_LITERAL','expression',1,'p_char_literal','rules.py',344),
  ('expression -> expression PLUS expression','expression',3,'p_expression','rules.py',348),
  ('expression -> expression MINUS expression','expression',3,'p_expression','rules.py',349),
  ('expression -> expression TIMES expression','expression',3,'p_expression','rules.py',350),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','rules.py',351),
  ('expression -> expression MOD expression','expression',3,'p_expression','rules.py',352),
  ('expression -> expression POWER expression','expression',3,'p_expression','rules.py',353),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','rules.py',354),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression','rules.py',355),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression','rules.py',356),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression','rules.py',357),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression','rules.py',358),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression','rules.py',359),
  ('expression -> expression AND expression','expression',3,'p_expression','rules.py',360),
  ('expression -> expression OR expression','expression',3,'p_expression','rules.py',361),
  ('expression -> NOT expression','expression',2,'p_expression','rules.py',362),
  ('expression -> function_call','expression',1,'p_expression','rules.py',363),
  ('expression -> arrayaccess','expression',1,'p_expression','rules.py',364),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','rules.py',365),
]
