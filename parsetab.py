
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALNOT_EQUALleftGREATER_THANGREATER_THAN_EQUALLESS_THANLESS_THAN_EQUALleftPLUSMINUSleftTIMESDIVIDEMODrightPOWERrightNOTleftLPARENRPARENAND ASSIGN BOOL_LITERAL BOOL_TYPE COLON COMMA COMMENT DIVIDE ELSE EQUAL FALSE FLOAT_LITERAL FLOAT_TYPE FUNCTION GREATER_THAN GREATER_THAN_EQUAL ID IF INTEGER_LITERAL INT_TYPE LBRACE LESS_THAN LESS_THAN_EQUAL LPAREN LSQUARE MINUS MOD NOT NOT_EQUAL OR PLUS POWER RBRACE RPAREN RSQUARE SEMICOLON STRING_LITERAL STRING_TYPE THEN TIMES TRUE VAL VAR VOID_TYPE WHILEtype : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOL_TYPEexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression POWER expression\n                  | expression EQUAL expression\n                  | expression NOT_EQUAL expression\n                  | expression GREATER_THAN expression\n                  | expression GREATER_THAN_EQUAL expression\n                  | expression LESS_THAN expression\n                  | expression LESS_THAN_EQUAL expression\n                  | expression AND expression\n                  | expression OR expression\n                  | NOT expression\n                  | INTEGER_LITERAL\n                  | FLOAT_LITERAL\n                  | STRING_LITERAL\n                  | BOOL_LITERAL\n                  | ID\n                  | LPAREN expression RPARENconstant_declaration : VAL ID COLON type ASSIGN expression SEMICOLONvariable_declaration : VAR ID COLON type ASSIGN expression SEMICOLONfunction_declaration : FUNCTION ID LPAREN function_param_list RPAREN COLON type SEMICOLON\n    |  FUNCTION ID LPAREN function_param_list RPAREN COLON type LBRACE function_body RBRACEfunction_param_list : parameter COMMA function_param_list\n    | parameter parameter : VAL ID COLON type\n    | VAR ID COLON typefunction_call : ID LPAREN function_param_list_call RPAREN SEMICOLON\n    function_param_list_call : ID COMMA function_param_list_call\n    | IDfunction_body : block_sequenceblock_sequence : block SEMICOLON block_sequence\n\t | blockblock : constant_declaration\n     | variable_declaration\n\t | if_block\n\t | while_block\n\t | function_call\n\t |\n\tif_block : IF expression LBRACE block RBRACE LBRACE ELSE block RBRACE\n\t| IF expression THEN block ELSE block\n\twhile_block : WHILE expression LBRACE block RBRACE'
    
_lr_action_items = {'INT_TYPE':([0,],[2,]),'FLOAT_TYPE':([0,],[3,]),'STRING_TYPE':([0,],[4,]),'BOOL_TYPE':([0,],[5,]),'$end':([1,2,3,4,5,],[0,-1,-2,-3,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'type':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> type","S'",1,None,None,None),
  ('type -> INT_TYPE','type',1,'p_type','tokens.py',136),
  ('type -> FLOAT_TYPE','type',1,'p_type','tokens.py',137),
  ('type -> STRING_TYPE','type',1,'p_type','tokens.py',138),
  ('type -> BOOL_TYPE','type',1,'p_type','tokens.py',139),
  ('expression -> expression PLUS expression','expression',3,'p_expression','tokens.py',143),
  ('expression -> expression MINUS expression','expression',3,'p_expression','tokens.py',144),
  ('expression -> expression TIMES expression','expression',3,'p_expression','tokens.py',145),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','tokens.py',146),
  ('expression -> expression MOD expression','expression',3,'p_expression','tokens.py',147),
  ('expression -> expression POWER expression','expression',3,'p_expression','tokens.py',148),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','tokens.py',149),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression','tokens.py',150),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression','tokens.py',151),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression','tokens.py',152),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression','tokens.py',153),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression','tokens.py',154),
  ('expression -> expression AND expression','expression',3,'p_expression','tokens.py',155),
  ('expression -> expression OR expression','expression',3,'p_expression','tokens.py',156),
  ('expression -> NOT expression','expression',2,'p_expression','tokens.py',157),
  ('expression -> INTEGER_LITERAL','expression',1,'p_expression','tokens.py',158),
  ('expression -> FLOAT_LITERAL','expression',1,'p_expression','tokens.py',159),
  ('expression -> STRING_LITERAL','expression',1,'p_expression','tokens.py',160),
  ('expression -> BOOL_LITERAL','expression',1,'p_expression','tokens.py',161),
  ('expression -> ID','expression',1,'p_expression','tokens.py',162),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','tokens.py',163),
  ('constant_declaration -> VAL ID COLON type ASSIGN expression SEMICOLON','constant_declaration',7,'p_constant_declaration','tokens.py',199),
  ('variable_declaration -> VAR ID COLON type ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration','tokens.py',204),
  ('function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON type SEMICOLON','function_declaration',8,'p_function_declaration','tokens.py',209),
  ('function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON type LBRACE function_body RBRACE','function_declaration',10,'p_function_declaration','tokens.py',210),
  ('function_param_list -> parameter COMMA function_param_list','function_param_list',3,'p_function_param_list','tokens.py',218),
  ('function_param_list -> parameter','function_param_list',1,'p_function_param_list','tokens.py',219),
  ('parameter -> VAL ID COLON type','parameter',4,'p_parameter','tokens.py',226),
  ('parameter -> VAR ID COLON type','parameter',4,'p_parameter','tokens.py',227),
  ('function_call -> ID LPAREN function_param_list_call RPAREN SEMICOLON','function_call',5,'p_function_call','tokens.py',232),
  ('function_param_list_call -> ID COMMA function_param_list_call','function_param_list_call',3,'p_function_param_list_call','tokens.py',237),
  ('function_param_list_call -> ID','function_param_list_call',1,'p_function_param_list_call','tokens.py',238),
  ('function_body -> block_sequence','function_body',1,'p_function_body','tokens.py',246),
  ('block_sequence -> block SEMICOLON block_sequence','block_sequence',3,'p_block_sequence','tokens.py',250),
  ('block_sequence -> block','block_sequence',1,'p_block_sequence','tokens.py',251),
  ('block -> constant_declaration','block',1,'p_block','tokens.py',258),
  ('block -> variable_declaration','block',1,'p_block','tokens.py',259),
  ('block -> if_block','block',1,'p_block','tokens.py',260),
  ('block -> while_block','block',1,'p_block','tokens.py',261),
  ('block -> function_call','block',1,'p_block','tokens.py',262),
  ('block -> <empty>','block',0,'p_block','tokens.py',263),
  ('if_block -> IF expression LBRACE block RBRACE LBRACE ELSE block RBRACE','if_block',9,'p_if_block','tokens.py',269),
  ('if_block -> IF expression THEN block ELSE block','if_block',6,'p_if_block','tokens.py',270),
  ('while_block -> WHILE expression LBRACE block RBRACE','while_block',5,'p_while_block','tokens.py',278),
]
