
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftCOMMArightASSIGNleftORleftANDnonassocEQUALNOT_EQUALnonassocGREATER_THANGREATER_THAN_EQUALLESS_THANLESS_THAN_EQUALleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSrightPOWERrightNOTleftLPARENRPARENAND ASSIGN BOOL_LITERAL BOOL_TYPE CHAR_LITERAL CHAR_TYPE COLON COMMA COMMENT DIVIDE ELSE EQUAL FLOAT_LITERAL FLOAT_TYPE FUNCTION GREATER_THAN GREATER_THAN_EQUAL ID IF INTEGER_LITERAL INT_TYPE LBRACE LESS_THAN LESS_THAN_EQUAL LPAREN LSQUARE MAIN MINUS MOD NOT NOT_EQUAL OR PLUS POWER RBRACE RPAREN RSQUARE SEMICOLON STRING_LITERAL STRING_TYPE TIMES VAL VAR VOID_TYPE WHILEprogram : main_block_sequence main_block_sequence : main_block main_block_sequence\n\t                        | main_blockcomment : COMMENT STRING_LITERALmain_block : constant_declaration\n     | variable_declaration \n     | var_const_update\n\t | function_declaration \n     | main_function\n     | comment\n\tconstant_declaration : VAL ID COLON types ASSIGN expression SEMICOLONvariable_declaration : VAR ID COLON types ASSIGN expression SEMICOLONvar_const_update :  ID ASSIGN expression SEMICOLON\n                        | arrayaccess ASSIGN expression SEMICOLONfunction_declaration : FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON\n    |  FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACEmain_function : FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACEfunction_param_list : parameter COMMA function_param_list\n    | parameter parameter : VAL ID COLON types\n                    | VAR ID COLON typesfunction_call : ID LPAREN function_param_list_call RPAREN \n                     | ID LPAREN RPAREN \n    function_param_list_call : expression COMMA function_param_list_call\n    | expressionfunction_body : block_sequenceblock_sequence : block block_sequence\n\t | blockblock : constant_declaration\n     | variable_declaration \n     | var_const_update\n\t | if_block\n\t | while_block\n\t | function_call SEMICOLON\n     | comment\n\tif_block : IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE\n\t| IF expression LBRACE block_sequence RBRACE \n\twhile_block : WHILE expression LBRACE block_sequence RBRACEtypes : defaulttype\n            | LSQUARE arraytype RSQUAREdefaulttype : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOL_TYPE\n            | VOID_TYPE\n            | CHAR_TYPEarraytype : LSQUARE arraytype RSQUARE\n            | INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOL_TYPE\n            | VOID_TYPE\n            arrayaccess : ID LSQUARE expression RSQUARE\n                    | function_call LSQUARE expression RSQUAREexpression : ID expression : INTEGER_LITERALexpression : FLOAT_LITERALexpression : STRING_LITERALexpression : BOOL_LITERALexpression : CHAR_LITERALexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression POWER expression\n                  | expression EQUAL expression\n                  | expression NOT_EQUAL expression\n                  | expression GREATER_THAN expression\n                  | expression GREATER_THAN_EQUAL expression\n                  | expression LESS_THAN expression\n                  | expression LESS_THAN_EQUAL expression\n                  | expression AND expression\n                  | expression OR expression\n                  | NOT expression\n                  | MINUS expression %prec UMINUS\n                  | arrayaccess\n                  | function_call\n                  | LPAREN expression RPAREN'
    
_lr_action_items = {'VAL':([0,3,4,5,6,7,8,9,26,47,48,59,81,114,126,127,129,135,136,137,138,139,140,142,146,147,148,150,154,155,156,159,160,162,164,],[10,10,-5,-6,-7,-8,-9,-10,-4,84,84,-13,-14,84,10,-11,-12,10,-29,-30,-31,-32,-33,-35,-15,10,-17,-34,10,10,-16,-37,-38,10,-36,]),'VAR':([0,3,4,5,6,7,8,9,26,47,48,59,81,114,126,127,129,135,136,137,138,139,140,142,146,147,148,150,154,155,156,159,160,162,164,],[12,12,-5,-6,-7,-8,-9,-10,-4,85,85,-13,-14,85,12,-11,-12,12,-29,-30,-31,-32,-33,-35,-15,12,-17,-34,12,12,-16,-37,-38,12,-36,]),'ID':([0,3,4,5,6,7,8,9,10,12,14,19,20,21,23,26,27,36,37,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,81,84,85,88,112,126,127,129,135,136,137,138,139,140,142,144,145,146,147,148,150,154,155,156,159,160,162,164,],[11,11,-5,-6,-7,-8,-9,-10,18,22,24,29,29,29,29,-4,29,29,29,29,-13,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-14,115,116,29,29,143,-11,-12,143,-29,-30,-31,-32,-33,-35,29,29,-15,143,-17,-34,143,143,-16,-37,-38,143,-36,]),'FUNCTION':([0,3,4,5,6,7,8,9,26,59,81,127,129,146,148,156,],[14,14,-5,-6,-7,-8,-9,-10,-4,-13,-14,-11,-12,-15,-17,-16,]),'COMMENT':([0,3,4,5,6,7,8,9,26,59,81,126,127,129,135,136,137,138,139,140,142,146,147,148,150,154,155,156,159,160,162,164,],[15,15,-5,-6,-7,-8,-9,-10,-4,-13,-14,15,-11,-12,15,-29,-30,-31,-32,-33,-35,-15,15,-17,-34,15,15,-16,-37,-38,15,-36,]),'$end':([1,2,3,4,5,6,7,8,9,17,26,59,81,127,129,146,148,156,],[0,-1,-3,-5,-6,-7,-8,-9,-10,-2,-4,-13,-14,-11,-12,-15,-17,-16,]),'ASSIGN':([11,13,50,51,53,54,55,56,57,58,77,80,87,120,143,],[19,23,88,-39,-41,-42,-43,-44,-45,-46,-53,112,-54,-40,19,]),'LSQUARE':([11,16,28,29,39,43,45,52,78,89,122,124,125,141,143,],[20,27,52,20,27,-23,52,89,-22,89,52,52,52,27,20,]),'LPAREN':([11,19,20,21,23,24,25,27,29,36,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,88,112,143,144,145,],[21,40,40,40,40,47,48,40,21,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,21,40,40,]),'MAIN':([14,],[25,]),'STRING_LITERAL':([15,19,20,21,23,27,36,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,88,112,144,145,],[26,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'COLON':([18,22,113,115,116,],[28,45,122,124,125,]),'INTEGER_LITERAL':([19,20,21,23,27,36,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,88,112,144,145,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'FLOAT_LITERAL':([19,20,21,23,27,36,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,88,112,144,145,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'BOOL_LITERAL':([19,20,21,23,27,36,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,88,112,144,145,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'CHAR_LITERAL':([19,20,21,23,27,36,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,88,112,144,145,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'NOT':([19,20,21,23,27,36,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,88,112,144,145,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'MINUS':([19,20,21,23,27,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,46,49,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,88,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,118,121,144,145,151,152,],[36,36,36,36,36,-55,61,-56,-57,-58,-59,-60,36,36,-77,-78,36,61,-23,61,61,61,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-76,-75,61,-53,-22,36,-54,36,-61,-62,-63,-64,-65,-66,61,61,61,61,61,61,61,61,-79,36,61,61,36,36,61,61,]),'RPAREN':([21,29,31,32,33,34,35,38,39,42,43,44,51,53,54,55,56,57,58,74,75,76,77,78,82,83,86,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,131,132,],[43,-55,-56,-57,-58,-59,-60,-77,-78,78,-23,-25,-39,-41,-42,-43,-44,-45,-46,-76,-75,110,-53,-22,113,-19,117,-54,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-79,-24,-40,-18,-20,-21,]),'IF':([26,59,81,126,127,129,135,136,137,138,139,140,142,147,150,154,155,159,160,162,164,],[-4,-13,-14,144,-11,-12,144,-29,-30,-31,-32,-33,-35,144,-34,144,144,-37,-38,144,-36,]),'WHILE':([26,59,81,126,127,129,135,136,137,138,139,140,142,147,150,154,155,159,160,162,164,],[-4,-13,-14,145,-11,-12,145,-29,-30,-31,-32,-33,-35,145,-34,145,145,-37,-38,145,-36,]),'RBRACE':([26,59,81,127,129,133,134,135,136,137,138,139,140,142,149,150,153,157,158,159,160,163,164,],[-4,-13,-14,-11,-12,148,-26,-28,-29,-30,-31,-32,-33,-35,-27,-34,156,159,160,-37,-38,164,-36,]),'INT_TYPE':([28,45,52,89,122,124,125,],[53,53,91,91,53,53,53,]),'FLOAT_TYPE':([28,45,52,89,122,124,125,],[54,54,92,92,54,54,54,]),'STRING_TYPE':([28,45,52,89,122,124,125,],[55,55,93,93,55,55,55,]),'BOOL_TYPE':([28,45,52,89,122,124,125,],[56,56,94,94,56,56,56,]),'VOID_TYPE':([28,45,52,89,122,124,125,],[57,57,95,95,57,57,57,]),'CHAR_TYPE':([28,45,122,124,125,],[58,58,58,58,58,]),'SEMICOLON':([29,30,31,32,33,34,35,38,39,43,46,51,53,54,55,56,57,58,74,75,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,120,121,130,141,],[-55,59,-56,-57,-58,-59,-60,-77,-78,-23,81,-39,-41,-42,-43,-44,-45,-46,-76,-75,-53,-22,-54,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-79,127,-40,129,146,150,]),'PLUS':([29,30,31,32,33,34,35,38,39,41,43,44,46,49,74,75,76,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,121,151,152,],[-55,60,-56,-57,-58,-59,-60,-77,-78,60,-23,60,60,60,-76,-75,60,-53,-22,-54,-61,-62,-63,-64,-65,-66,60,60,60,60,60,60,60,60,-79,60,60,60,60,]),'TIMES':([29,30,31,32,33,34,35,38,39,41,43,44,46,49,74,75,76,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,121,151,152,],[-55,62,-56,-57,-58,-59,-60,-77,-78,62,-23,62,62,62,-76,-75,62,-53,-22,-54,62,62,-63,-64,-65,-66,62,62,62,62,62,62,62,62,-79,62,62,62,62,]),'DIVIDE':([29,30,31,32,33,34,35,38,39,41,43,44,46,49,74,75,76,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,121,151,152,],[-55,63,-56,-57,-58,-59,-60,-77,-78,63,-23,63,63,63,-76,-75,63,-53,-22,-54,63,63,-63,-64,-65,-66,63,63,63,63,63,63,63,63,-79,63,63,63,63,]),'MOD':([29,30,31,32,33,34,35,38,39,41,43,44,46,49,74,75,76,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,121,151,152,],[-55,64,-56,-57,-58,-59,-60,-77,-78,64,-23,64,64,64,-76,-75,64,-53,-22,-54,64,64,-63,-64,-65,-66,64,64,64,64,64,64,64,64,-79,64,64,64,64,]),'POWER':([29,30,31,32,33,34,35,38,39,41,43,44,46,49,74,75,76,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,121,151,152,],[-55,65,-56,-57,-58,-59,-60,-77,-78,65,-23,65,65,65,65,-75,65,-53,-22,-54,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-79,65,65,65,65,]),'EQUAL':([29,30,31,32,33,34,35,38,39,41,43,44,46,49,74,75,76,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,121,151,152,],[-55,66,-56,-57,-58,-59,-60,-77,-78,66,-23,66,66,66,-76,-75,66,-53,-22,-54,-61,-62,-63,-64,-65,-66,None,None,-69,-70,-71,-72,66,66,-79,66,66,66,66,]),'NOT_EQUAL':([29,30,31,32,33,34,35,38,39,41,43,44,46,49,74,75,76,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,121,151,152,],[-55,67,-56,-57,-58,-59,-60,-77,-78,67,-23,67,67,67,-76,-75,67,-53,-22,-54,-61,-62,-63,-64,-65,-66,None,None,-69,-70,-71,-72,67,67,-79,67,67,67,67,]),'GREATER_THAN':([29,30,31,32,33,34,35,38,39,41,43,44,46,49,74,75,76,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,121,151,152,],[-55,68,-56,-57,-58,-59,-60,-77,-78,68,-23,68,68,68,-76,-75,68,-53,-22,-54,-61,-62,-63,-64,-65,-66,68,68,None,None,None,None,68,68,-79,68,68,68,68,]),'GREATER_THAN_EQUAL':([29,30,31,32,33,34,35,38,39,41,43,44,46,49,74,75,76,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,121,151,152,],[-55,69,-56,-57,-58,-59,-60,-77,-78,69,-23,69,69,69,-76,-75,69,-53,-22,-54,-61,-62,-63,-64,-65,-66,69,69,None,None,None,None,69,69,-79,69,69,69,69,]),'LESS_THAN':([29,30,31,32,33,34,35,38,39,41,43,44,46,49,74,75,76,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,121,151,152,],[-55,70,-56,-57,-58,-59,-60,-77,-78,70,-23,70,70,70,-76,-75,70,-53,-22,-54,-61,-62,-63,-64,-65,-66,70,70,None,None,None,None,70,70,-79,70,70,70,70,]),'LESS_THAN_EQUAL':([29,30,31,32,33,34,35,38,39,41,43,44,46,49,74,75,76,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,121,151,152,],[-55,71,-56,-57,-58,-59,-60,-77,-78,71,-23,71,71,71,-76,-75,71,-53,-22,-54,-61,-62,-63,-64,-65,-66,71,71,None,None,None,None,71,71,-79,71,71,71,71,]),'AND':([29,30,31,32,33,34,35,38,39,41,43,44,46,49,74,75,76,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,121,151,152,],[-55,72,-56,-57,-58,-59,-60,-77,-78,72,-23,72,72,72,-76,-75,72,-53,-22,-54,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,72,-79,72,72,72,72,]),'OR':([29,30,31,32,33,34,35,38,39,41,43,44,46,49,74,75,76,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,121,151,152,],[-55,73,-56,-57,-58,-59,-60,-77,-78,73,-23,73,73,73,-76,-75,73,-53,-22,-54,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-79,73,73,73,73,]),'RSQUARE':([29,31,32,33,34,35,38,39,41,43,49,74,75,77,78,87,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,119,128,],[-55,-56,-57,-58,-59,-60,-77,-78,77,-23,87,-76,-75,-53,-22,-54,120,-48,-49,-50,-51,-52,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-79,128,-47,]),'COMMA':([29,31,32,33,34,35,38,39,43,44,51,53,54,55,56,57,58,74,75,77,78,83,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,120,131,132,],[-55,-56,-57,-58,-59,-60,-77,-78,-23,79,-39,-41,-42,-43,-44,-45,-46,-76,-75,-53,-22,114,-54,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-79,-40,-20,-21,]),'LBRACE':([29,31,32,33,34,35,38,39,43,51,53,54,55,56,57,58,74,75,77,78,87,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,117,120,130,151,152,161,],[-55,-56,-57,-58,-59,-60,-77,-78,-23,-39,-41,-42,-43,-44,-45,-46,-76,-75,-53,-22,-54,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-79,126,-40,147,154,155,162,]),'ELSE':([159,],[161,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'main_block_sequence':([0,3,],[2,17,]),'main_block':([0,3,],[3,3,]),'constant_declaration':([0,3,126,135,147,154,155,162,],[4,4,136,136,136,136,136,136,]),'variable_declaration':([0,3,126,135,147,154,155,162,],[5,5,137,137,137,137,137,137,]),'var_const_update':([0,3,126,135,147,154,155,162,],[6,6,138,138,138,138,138,138,]),'function_declaration':([0,3,],[7,7,]),'main_function':([0,3,],[8,8,]),'comment':([0,3,126,135,147,154,155,162,],[9,9,142,142,142,142,142,142,]),'arrayaccess':([0,3,19,20,21,23,27,36,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,88,112,126,135,144,145,147,154,155,162,],[13,13,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,13,13,38,38,13,13,13,13,]),'function_call':([0,3,19,20,21,23,27,36,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,88,112,126,135,144,145,147,154,155,162,],[16,16,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,141,141,39,39,141,141,141,141,]),'expression':([19,20,21,23,27,36,37,40,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,88,112,144,145,],[30,41,44,46,49,74,75,76,96,97,98,99,100,101,102,103,104,105,106,107,108,109,44,118,121,151,152,]),'function_param_list_call':([21,79,],[42,111,]),'types':([28,45,122,124,125,],[50,80,130,131,132,]),'defaulttype':([28,45,122,124,125,],[51,51,51,51,51,]),'function_param_list':([47,48,114,],[82,86,123,]),'parameter':([47,48,114,],[83,83,83,]),'arraytype':([52,89,],[90,119,]),'function_body':([126,147,],[133,153,]),'block_sequence':([126,135,147,154,155,162,],[134,149,134,157,158,163,]),'block':([126,135,147,154,155,162,],[135,135,135,135,135,135,]),'if_block':([126,135,147,154,155,162,],[139,139,139,139,139,139,]),'while_block':([126,135,147,154,155,162,],[140,140,140,140,140,140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> main_block_sequence','program',1,'p_program','rules.py',119),
  ('main_block_sequence -> main_block main_block_sequence','main_block_sequence',2,'p_main_block_sequence','rules.py',124),
  ('main_block_sequence -> main_block','main_block_sequence',1,'p_main_block_sequence','rules.py',125),
  ('comment -> COMMENT STRING_LITERAL','comment',2,'p_comment','rules.py',132),
  ('main_block -> constant_declaration','main_block',1,'p_main_block','rules.py',137),
  ('main_block -> variable_declaration','main_block',1,'p_main_block','rules.py',138),
  ('main_block -> var_const_update','main_block',1,'p_main_block','rules.py',139),
  ('main_block -> function_declaration','main_block',1,'p_main_block','rules.py',140),
  ('main_block -> main_function','main_block',1,'p_main_block','rules.py',141),
  ('main_block -> comment','main_block',1,'p_main_block','rules.py',142),
  ('constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON','constant_declaration',7,'p_constant_declaration','rules.py',149),
  ('variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration','rules.py',154),
  ('var_const_update -> ID ASSIGN expression SEMICOLON','var_const_update',4,'p_var_const_update','rules.py',159),
  ('var_const_update -> arrayaccess ASSIGN expression SEMICOLON','var_const_update',4,'p_var_const_update','rules.py',160),
  ('function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON','function_declaration',8,'p_function_declaration','rules.py',165),
  ('function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE','function_declaration',10,'p_function_declaration','rules.py',166),
  ('main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE','main_function',8,'p_main_function','rules.py',173),
  ('function_param_list -> parameter COMMA function_param_list','function_param_list',3,'p_function_param_list','rules.py',177),
  ('function_param_list -> parameter','function_param_list',1,'p_function_param_list','rules.py',178),
  ('parameter -> VAL ID COLON types','parameter',4,'p_parameter','rules.py',188),
  ('parameter -> VAR ID COLON types','parameter',4,'p_parameter','rules.py',189),
  ('function_call -> ID LPAREN function_param_list_call RPAREN','function_call',4,'p_function_call','rules.py',198),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','rules.py',199),
  ('function_param_list_call -> expression COMMA function_param_list_call','function_param_list_call',3,'p_function_param_list_call','rules.py',208),
  ('function_param_list_call -> expression','function_param_list_call',1,'p_function_param_list_call','rules.py',209),
  ('function_body -> block_sequence','function_body',1,'p_function_body','rules.py',220),
  ('block_sequence -> block block_sequence','block_sequence',2,'p_block_sequence','rules.py',225),
  ('block_sequence -> block','block_sequence',1,'p_block_sequence','rules.py',226),
  ('block -> constant_declaration','block',1,'p_block','rules.py',233),
  ('block -> variable_declaration','block',1,'p_block','rules.py',234),
  ('block -> var_const_update','block',1,'p_block','rules.py',235),
  ('block -> if_block','block',1,'p_block','rules.py',236),
  ('block -> while_block','block',1,'p_block','rules.py',237),
  ('block -> function_call SEMICOLON','block',2,'p_block','rules.py',238),
  ('block -> comment','block',1,'p_block','rules.py',239),
  ('if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE','if_block',9,'p_if_block','rules.py',245),
  ('if_block -> IF expression LBRACE block_sequence RBRACE','if_block',5,'p_if_block','rules.py',246),
  ('while_block -> WHILE expression LBRACE block_sequence RBRACE','while_block',5,'p_while_block','rules.py',254),
  ('types -> defaulttype','types',1,'p_types','rules.py',260),
  ('types -> LSQUARE arraytype RSQUARE','types',3,'p_types','rules.py',261),
  ('defaulttype -> INT_TYPE','defaulttype',1,'p_defaultype','rules.py',268),
  ('defaulttype -> FLOAT_TYPE','defaulttype',1,'p_defaultype','rules.py',269),
  ('defaulttype -> STRING_TYPE','defaulttype',1,'p_defaultype','rules.py',270),
  ('defaulttype -> BOOL_TYPE','defaulttype',1,'p_defaultype','rules.py',271),
  ('defaulttype -> VOID_TYPE','defaulttype',1,'p_defaultype','rules.py',272),
  ('defaulttype -> CHAR_TYPE','defaulttype',1,'p_defaultype','rules.py',273),
  ('arraytype -> LSQUARE arraytype RSQUARE','arraytype',3,'p_arraytype','rules.py',277),
  ('arraytype -> INT_TYPE','arraytype',1,'p_arraytype','rules.py',278),
  ('arraytype -> FLOAT_TYPE','arraytype',1,'p_arraytype','rules.py',279),
  ('arraytype -> STRING_TYPE','arraytype',1,'p_arraytype','rules.py',280),
  ('arraytype -> BOOL_TYPE','arraytype',1,'p_arraytype','rules.py',281),
  ('arraytype -> VOID_TYPE','arraytype',1,'p_arraytype','rules.py',282),
  ('arrayaccess -> ID LSQUARE expression RSQUARE','arrayaccess',4,'p_arrayaccess','rules.py',292),
  ('arrayaccess -> function_call LSQUARE expression RSQUARE','arrayaccess',4,'p_arrayaccess','rules.py',293),
  ('expression -> ID','expression',1,'p_identifier','rules.py',297),
  ('expression -> INTEGER_LITERAL','expression',1,'p_integer_literal','rules.py',308),
  ('expression -> FLOAT_LITERAL','expression',1,'p_float_literal','rules.py',312),
  ('expression -> STRING_LITERAL','expression',1,'p_string_literal','rules.py',316),
  ('expression -> BOOL_LITERAL','expression',1,'p_bool_literal','rules.py',320),
  ('expression -> CHAR_LITERAL','expression',1,'p_char_literal','rules.py',324),
  ('expression -> expression PLUS expression','expression',3,'p_expression','rules.py',328),
  ('expression -> expression MINUS expression','expression',3,'p_expression','rules.py',329),
  ('expression -> expression TIMES expression','expression',3,'p_expression','rules.py',330),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','rules.py',331),
  ('expression -> expression MOD expression','expression',3,'p_expression','rules.py',332),
  ('expression -> expression POWER expression','expression',3,'p_expression','rules.py',333),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','rules.py',334),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression','rules.py',335),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression','rules.py',336),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression','rules.py',337),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression','rules.py',338),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression','rules.py',339),
  ('expression -> expression AND expression','expression',3,'p_expression','rules.py',340),
  ('expression -> expression OR expression','expression',3,'p_expression','rules.py',341),
  ('expression -> NOT expression','expression',2,'p_expression','rules.py',342),
  ('expression -> MINUS expression','expression',2,'p_expression','rules.py',343),
  ('expression -> arrayaccess','expression',1,'p_expression','rules.py',344),
  ('expression -> function_call','expression',1,'p_expression','rules.py',345),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','rules.py',346),
]
