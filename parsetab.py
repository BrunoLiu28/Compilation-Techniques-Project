
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'main_block_sequenceleftORleftANDleftEQUALNOT_EQUALleftGREATER_THANGREATER_THAN_EQUALLESS_THANLESS_THAN_EQUALleftPLUSMINUSleftTIMESDIVIDEMODrightPOWERrightNOTleftLPARENRPARENAND ASSIGN BOOL_LITERAL BOOL_TYPE COLON COMMA COMMENT DIVIDE ELSE EQUAL FLOAT_LITERAL FLOAT_TYPE FUNCTION GREATER_THAN GREATER_THAN_EQUAL ID IF INTEGER_LITERAL INT_TYPE LBRACE LESS_THAN LESS_THAN_EQUAL LPAREN LSQUARE MAIN MINUS MOD NOT NOT_EQUAL OR PLUS POWER RBRACE RPAREN RSQUARE SEMICOLON STRING_LITERAL STRING_TYPE TIMES VAL VAR VOID_TYPE WHILEmain_block_sequence : main_block main_block_sequence\n\t                        | main_blockcomment : COMMENT STRING_LITERALmain_block : constant_declaration\n     | variable_declaration \n     | var_const_update\n\t | function_declaration \n     | main_function\n     | comment\n\tconstant_declaration : VAL ID COLON types ASSIGN expression SEMICOLONvariable_declaration : VAR ID COLON types ASSIGN expression SEMICOLONvar_const_update :  ID ASSIGN expression SEMICOLON\n                        | arrayaccess ASSIGN expression SEMICOLONfunction_declaration : FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON\n    |  FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACEmain_function : FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACEfunction_param_list : parameter COMMA function_param_list\n    | parameter parameter : VAL ID COLON types\n                    | VAR ID COLON typesfunction_call : ID LPAREN function_param_list_call RPAREN \n    function_param_list_call : expression COMMA function_param_list_call\n    | expressionfunction_body : block_sequenceblock_sequence : block block_sequence\n\t | blockblock : constant_declaration\n     | variable_declaration \n     | var_const_update\n\t | if_block\n\t | while_block\n\t | function_call SEMICOLON\n     | comment\n\tif_block : IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE\n\t| IF expression LBRACE block_sequence RBRACE \n\twhile_block : WHILE expression LBRACE block_sequence RBRACEtypes : defaulttype\n            | arraytypedefaulttype : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOL_TYPE\n            | VOID_TYPEarraytype : LSQUARE arraytype RSQUARE\n            | defaulttype\n            typeliterals : INTEGER_LITERAL\n                  | FLOAT_LITERAL\n                  | STRING_LITERAL\n                  | BOOL_LITERALarrayliterals : LSQUARE array_values RSQUAREarray_values : array_values COMMA expression\n                    | expressionarrayaccess : ID LSQUARE expression RSQUARE\n                    | function_call LSQUARE expression RSQUAREexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression POWER expression\n                  | expression EQUAL expression\n                  | expression NOT_EQUAL expression\n                  | expression GREATER_THAN expression\n                  | expression GREATER_THAN_EQUAL expression\n                  | expression LESS_THAN expression\n                  | expression LESS_THAN_EQUAL expression\n                  | expression AND expression\n                  | expression OR expression\n                  | NOT expression\n                  | MINUS expression\n                  | typeliterals\n                  | arrayliterals\n                  | arrayaccess\n                  | function_call\n                  | ID\n                  | LPAREN expression RPAREN'
    
_lr_action_items = {'VAL':([0,2,3,4,5,6,7,8,25,47,48,59,83,113,125,126,127,133,134,135,136,137,138,140,144,145,146,148,152,153,154,157,158,160,162,],[9,9,-4,-5,-6,-7,-8,-9,-3,86,86,-12,-13,86,9,-10,-11,9,-27,-28,-29,-30,-31,-33,-14,9,-16,-32,9,9,-15,-35,-36,9,-34,]),'VAR':([0,2,3,4,5,6,7,8,25,47,48,59,83,113,125,126,127,133,134,135,136,137,138,140,144,145,146,148,152,153,154,157,158,160,162,],[11,11,-4,-5,-6,-7,-8,-9,-3,87,87,-12,-13,87,11,-10,-11,11,-27,-28,-29,-30,-31,-33,-14,11,-16,-32,11,11,-15,-35,-36,11,-34,]),'ID':([0,2,3,4,5,6,7,8,9,11,13,18,19,20,22,25,26,30,31,36,41,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,83,86,87,90,109,111,125,126,127,133,134,135,136,137,138,140,142,143,144,145,146,148,152,153,154,157,158,160,162,],[10,10,-4,-5,-6,-7,-8,-9,17,21,23,28,28,28,28,-3,28,28,28,28,28,-12,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-13,114,115,28,28,28,141,-10,-11,141,-27,-28,-29,-30,-31,-33,28,28,-14,141,-16,-32,141,141,-15,-35,-36,141,-34,]),'FUNCTION':([0,2,3,4,5,6,7,8,25,59,83,126,127,144,146,154,],[13,13,-4,-5,-6,-7,-8,-9,-3,-12,-13,-10,-11,-14,-16,-15,]),'COMMENT':([0,2,3,4,5,6,7,8,25,59,83,125,126,127,133,134,135,136,137,138,140,144,145,146,148,152,153,154,157,158,160,162,],[14,14,-4,-5,-6,-7,-8,-9,-3,-12,-13,14,-10,-11,14,-27,-28,-29,-30,-31,-33,-14,14,-16,-32,14,14,-15,-35,-36,14,-34,]),'$end':([1,2,3,4,5,6,7,8,16,25,59,83,126,127,144,146,154,],[0,-2,-4,-5,-6,-7,-8,-9,-1,-3,-12,-13,-10,-11,-14,-16,-15,]),'ASSIGN':([10,12,50,51,52,53,54,55,56,57,79,82,89,118,141,],[18,22,90,-37,-38,-39,-40,-41,-42,-43,-53,111,-54,-44,18,]),'LSQUARE':([10,15,18,19,20,22,26,27,28,30,31,35,36,41,45,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,81,90,109,111,121,123,124,139,141,142,143,],[19,26,41,41,41,41,41,58,19,41,41,26,41,41,58,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-21,41,41,41,41,58,58,58,26,19,41,41,]),'LPAREN':([10,18,19,20,22,23,24,26,28,30,31,36,41,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,90,109,111,141,142,143,],[20,36,36,36,36,47,48,36,20,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,20,36,36,]),'MAIN':([13,],[24,]),'STRING_LITERAL':([14,18,19,20,22,26,30,31,36,41,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,90,109,111,142,143,],[25,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'COLON':([17,21,112,114,115,],[27,45,121,123,124,]),'NOT':([18,19,20,22,26,30,31,36,41,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,90,109,111,142,143,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'MINUS':([18,19,20,22,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,49,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,89,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,117,119,120,142,143,149,150,],[30,30,30,30,30,-75,61,30,30,-71,-72,-73,-74,30,-46,-47,-48,-49,30,61,61,61,61,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-70,-69,61,61,-53,-21,30,-54,30,-55,-56,-57,-58,-59,-60,61,61,61,61,61,61,61,61,-76,-50,30,30,61,61,61,30,30,61,61,]),'INTEGER_LITERAL':([18,19,20,22,26,30,31,36,41,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,90,109,111,142,143,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FLOAT_LITERAL':([18,19,20,22,26,30,31,36,41,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,90,109,111,142,143,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'BOOL_LITERAL':([18,19,20,22,26,30,31,36,41,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,90,109,111,142,143,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'IF':([25,59,83,125,126,127,133,134,135,136,137,138,140,145,148,152,153,157,158,160,162,],[-3,-12,-13,142,-10,-11,142,-27,-28,-29,-30,-31,-33,142,-32,142,142,-35,-36,142,-34,]),'WHILE':([25,59,83,125,126,127,133,134,135,136,137,138,140,145,148,152,153,157,158,160,162,],[-3,-12,-13,143,-10,-11,143,-27,-28,-29,-30,-31,-33,143,-32,143,143,-35,-36,143,-34,]),'RBRACE':([25,59,83,126,127,131,132,133,134,135,136,137,138,140,147,148,151,155,156,157,158,161,162,],[-3,-12,-13,-10,-11,146,-24,-26,-27,-28,-29,-30,-31,-33,-25,-32,154,157,158,-35,-36,162,-34,]),'INT_TYPE':([27,45,58,121,123,124,],[53,53,53,53,53,53,]),'FLOAT_TYPE':([27,45,58,121,123,124,],[54,54,54,54,54,54,]),'STRING_TYPE':([27,45,58,121,123,124,],[55,55,55,55,55,55,]),'BOOL_TYPE':([27,45,58,121,123,124,],[56,56,56,56,56,56,]),'VOID_TYPE':([27,45,58,121,123,124,],[57,57,57,57,57,57,]),'SEMICOLON':([28,29,32,33,34,35,37,38,39,40,46,51,52,53,54,55,56,57,74,75,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,118,120,128,139,],[-75,59,-71,-72,-73,-74,-46,-47,-48,-49,83,-37,-38,-39,-40,-41,-42,-43,-70,-69,-53,-21,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-76,-50,126,-44,127,144,148,]),'PLUS':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,74,75,76,78,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,119,120,149,150,],[-75,60,-71,-72,-73,-74,-46,-47,-48,-49,60,60,60,60,-70,-69,60,60,-53,-21,-54,-55,-56,-57,-58,-59,-60,60,60,60,60,60,60,60,60,-76,-50,60,60,60,60,60,]),'TIMES':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,74,75,76,78,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,119,120,149,150,],[-75,62,-71,-72,-73,-74,-46,-47,-48,-49,62,62,62,62,62,-69,62,62,-53,-21,-54,62,62,-57,-58,-59,-60,62,62,62,62,62,62,62,62,-76,-50,62,62,62,62,62,]),'DIVIDE':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,74,75,76,78,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,119,120,149,150,],[-75,63,-71,-72,-73,-74,-46,-47,-48,-49,63,63,63,63,63,-69,63,63,-53,-21,-54,63,63,-57,-58,-59,-60,63,63,63,63,63,63,63,63,-76,-50,63,63,63,63,63,]),'MOD':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,74,75,76,78,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,119,120,149,150,],[-75,64,-71,-72,-73,-74,-46,-47,-48,-49,64,64,64,64,64,-69,64,64,-53,-21,-54,64,64,-57,-58,-59,-60,64,64,64,64,64,64,64,64,-76,-50,64,64,64,64,64,]),'POWER':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,74,75,76,78,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,119,120,149,150,],[-75,65,-71,-72,-73,-74,-46,-47,-48,-49,65,65,65,65,65,-69,65,65,-53,-21,-54,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-76,-50,65,65,65,65,65,]),'EQUAL':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,74,75,76,78,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,119,120,149,150,],[-75,66,-71,-72,-73,-74,-46,-47,-48,-49,66,66,66,66,-70,-69,66,66,-53,-21,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,66,66,-76,-50,66,66,66,66,66,]),'NOT_EQUAL':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,74,75,76,78,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,119,120,149,150,],[-75,67,-71,-72,-73,-74,-46,-47,-48,-49,67,67,67,67,-70,-69,67,67,-53,-21,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,67,67,-76,-50,67,67,67,67,67,]),'GREATER_THAN':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,74,75,76,78,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,119,120,149,150,],[-75,68,-71,-72,-73,-74,-46,-47,-48,-49,68,68,68,68,-70,-69,68,68,-53,-21,-54,-55,-56,-57,-58,-59,-60,68,68,-63,-64,-65,-66,68,68,-76,-50,68,68,68,68,68,]),'GREATER_THAN_EQUAL':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,74,75,76,78,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,119,120,149,150,],[-75,69,-71,-72,-73,-74,-46,-47,-48,-49,69,69,69,69,-70,-69,69,69,-53,-21,-54,-55,-56,-57,-58,-59,-60,69,69,-63,-64,-65,-66,69,69,-76,-50,69,69,69,69,69,]),'LESS_THAN':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,74,75,76,78,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,119,120,149,150,],[-75,70,-71,-72,-73,-74,-46,-47,-48,-49,70,70,70,70,-70,-69,70,70,-53,-21,-54,-55,-56,-57,-58,-59,-60,70,70,-63,-64,-65,-66,70,70,-76,-50,70,70,70,70,70,]),'LESS_THAN_EQUAL':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,74,75,76,78,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,119,120,149,150,],[-75,71,-71,-72,-73,-74,-46,-47,-48,-49,71,71,71,71,-70,-69,71,71,-53,-21,-54,-55,-56,-57,-58,-59,-60,71,71,-63,-64,-65,-66,71,71,-76,-50,71,71,71,71,71,]),'AND':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,74,75,76,78,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,119,120,149,150,],[-75,72,-71,-72,-73,-74,-46,-47,-48,-49,72,72,72,72,-70,-69,72,72,-53,-21,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,72,-76,-50,72,72,72,72,72,]),'OR':([28,29,32,33,34,35,37,38,39,40,42,44,46,49,74,75,76,78,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,117,119,120,149,150,],[-75,73,-71,-72,-73,-74,-46,-47,-48,-49,73,73,73,73,-70,-69,73,73,-53,-21,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-76,-50,73,73,73,73,73,]),'RSQUARE':([28,32,33,34,35,37,38,39,40,42,49,53,54,55,56,57,74,75,77,78,79,80,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,118,119,],[-75,-71,-72,-73,-74,-46,-47,-48,-49,79,89,-39,-40,-41,-42,-43,-70,-69,108,-52,-53,-21,-54,118,-45,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-76,-50,-44,-51,]),'COMMA':([28,32,33,34,35,37,38,39,40,44,51,52,53,54,55,56,57,74,75,77,78,79,80,85,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,118,119,129,130,],[-75,-71,-72,-73,-74,-46,-47,-48,-49,81,-37,-38,-39,-40,-41,-42,-43,-70,-69,109,-52,-53,-21,113,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-76,-50,-44,-51,-19,-20,]),'RPAREN':([28,32,33,34,35,37,38,39,40,43,44,51,52,53,54,55,56,57,74,75,76,79,80,84,85,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,118,122,129,130,],[-75,-71,-72,-73,-74,-46,-47,-48,-49,80,-23,-37,-38,-39,-40,-41,-42,-43,-70,-69,107,-53,-21,112,-18,116,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-76,-50,-22,-44,-17,-19,-20,]),'LBRACE':([28,32,33,34,35,37,38,39,40,51,52,53,54,55,56,57,74,75,79,80,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,116,118,128,149,150,159,],[-75,-71,-72,-73,-74,-46,-47,-48,-49,-37,-38,-39,-40,-41,-42,-43,-70,-69,-53,-21,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-76,-50,125,-44,145,152,153,160,]),'ELSE':([157,],[159,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main_block_sequence':([0,2,],[1,16,]),'main_block':([0,2,],[2,2,]),'constant_declaration':([0,2,125,133,145,152,153,160,],[3,3,134,134,134,134,134,134,]),'variable_declaration':([0,2,125,133,145,152,153,160,],[4,4,135,135,135,135,135,135,]),'var_const_update':([0,2,125,133,145,152,153,160,],[5,5,136,136,136,136,136,136,]),'function_declaration':([0,2,],[6,6,]),'main_function':([0,2,],[7,7,]),'comment':([0,2,125,133,145,152,153,160,],[8,8,140,140,140,140,140,140,]),'arrayaccess':([0,2,18,19,20,22,26,30,31,36,41,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,90,109,111,125,133,142,143,145,152,153,160,],[12,12,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,12,12,34,34,12,12,12,12,]),'function_call':([0,2,18,19,20,22,26,30,31,36,41,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,90,109,111,125,133,142,143,145,152,153,160,],[15,15,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,139,139,35,35,139,139,139,139,]),'expression':([18,19,20,22,26,30,31,36,41,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,90,109,111,142,143,],[29,42,44,46,49,74,75,76,78,93,94,95,96,97,98,99,100,101,102,103,104,105,106,44,117,119,120,149,150,]),'typeliterals':([18,19,20,22,26,30,31,36,41,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,90,109,111,142,143,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'arrayliterals':([18,19,20,22,26,30,31,36,41,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,90,109,111,142,143,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'function_param_list_call':([20,81,],[43,110,]),'types':([27,45,121,123,124,],[50,82,128,129,130,]),'defaulttype':([27,45,58,121,123,124,],[51,51,92,51,51,51,]),'arraytype':([27,45,58,121,123,124,],[52,52,91,52,52,52,]),'array_values':([41,],[77,]),'function_param_list':([47,48,113,],[84,88,122,]),'parameter':([47,48,113,],[85,85,85,]),'function_body':([125,145,],[131,151,]),'block_sequence':([125,133,145,152,153,160,],[132,147,132,155,156,161,]),'block':([125,133,145,152,153,160,],[133,133,133,133,133,133,]),'if_block':([125,133,145,152,153,160,],[137,137,137,137,137,137,]),'while_block':([125,133,145,152,153,160,],[138,138,138,138,138,138,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main_block_sequence","S'",1,None,None,None),
  ('main_block_sequence -> main_block main_block_sequence','main_block_sequence',2,'p_main_block_sequence','rules.py',110),
  ('main_block_sequence -> main_block','main_block_sequence',1,'p_main_block_sequence','rules.py',111),
  ('comment -> COMMENT STRING_LITERAL','comment',2,'p_comment','rules.py',118),
  ('main_block -> constant_declaration','main_block',1,'p_main_block','rules.py',123),
  ('main_block -> variable_declaration','main_block',1,'p_main_block','rules.py',124),
  ('main_block -> var_const_update','main_block',1,'p_main_block','rules.py',125),
  ('main_block -> function_declaration','main_block',1,'p_main_block','rules.py',126),
  ('main_block -> main_function','main_block',1,'p_main_block','rules.py',127),
  ('main_block -> comment','main_block',1,'p_main_block','rules.py',128),
  ('constant_declaration -> VAL ID COLON types ASSIGN expression SEMICOLON','constant_declaration',7,'p_constant_declaration','rules.py',135),
  ('variable_declaration -> VAR ID COLON types ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration','rules.py',140),
  ('var_const_update -> ID ASSIGN expression SEMICOLON','var_const_update',4,'p_var_const_update','rules.py',145),
  ('var_const_update -> arrayaccess ASSIGN expression SEMICOLON','var_const_update',4,'p_var_const_update','rules.py',146),
  ('function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types SEMICOLON','function_declaration',8,'p_function_declaration','rules.py',151),
  ('function_declaration -> FUNCTION ID LPAREN function_param_list RPAREN COLON types LBRACE function_body RBRACE','function_declaration',10,'p_function_declaration','rules.py',152),
  ('main_function -> FUNCTION MAIN LPAREN function_param_list RPAREN LBRACE function_body RBRACE','main_function',8,'p_main_function','rules.py',159),
  ('function_param_list -> parameter COMMA function_param_list','function_param_list',3,'p_function_param_list','rules.py',163),
  ('function_param_list -> parameter','function_param_list',1,'p_function_param_list','rules.py',164),
  ('parameter -> VAL ID COLON types','parameter',4,'p_parameter','rules.py',171),
  ('parameter -> VAR ID COLON types','parameter',4,'p_parameter','rules.py',172),
  ('function_call -> ID LPAREN function_param_list_call RPAREN','function_call',4,'p_function_call','rules.py',181),
  ('function_param_list_call -> expression COMMA function_param_list_call','function_param_list_call',3,'p_function_param_list_call','rules.py',186),
  ('function_param_list_call -> expression','function_param_list_call',1,'p_function_param_list_call','rules.py',187),
  ('function_body -> block_sequence','function_body',1,'p_function_body','rules.py',195),
  ('block_sequence -> block block_sequence','block_sequence',2,'p_block_sequence','rules.py',200),
  ('block_sequence -> block','block_sequence',1,'p_block_sequence','rules.py',201),
  ('block -> constant_declaration','block',1,'p_block','rules.py',208),
  ('block -> variable_declaration','block',1,'p_block','rules.py',209),
  ('block -> var_const_update','block',1,'p_block','rules.py',210),
  ('block -> if_block','block',1,'p_block','rules.py',211),
  ('block -> while_block','block',1,'p_block','rules.py',212),
  ('block -> function_call SEMICOLON','block',2,'p_block','rules.py',213),
  ('block -> comment','block',1,'p_block','rules.py',214),
  ('if_block -> IF expression LBRACE block_sequence RBRACE ELSE LBRACE block_sequence RBRACE','if_block',9,'p_if_block','rules.py',220),
  ('if_block -> IF expression LBRACE block_sequence RBRACE','if_block',5,'p_if_block','rules.py',221),
  ('while_block -> WHILE expression LBRACE block_sequence RBRACE','while_block',5,'p_while_block','rules.py',229),
  ('types -> defaulttype','types',1,'p_types','rules.py',235),
  ('types -> arraytype','types',1,'p_types','rules.py',236),
  ('defaulttype -> INT_TYPE','defaulttype',1,'p_defaultype','rules.py',240),
  ('defaulttype -> FLOAT_TYPE','defaulttype',1,'p_defaultype','rules.py',241),
  ('defaulttype -> STRING_TYPE','defaulttype',1,'p_defaultype','rules.py',242),
  ('defaulttype -> BOOL_TYPE','defaulttype',1,'p_defaultype','rules.py',243),
  ('defaulttype -> VOID_TYPE','defaulttype',1,'p_defaultype','rules.py',244),
  ('arraytype -> LSQUARE arraytype RSQUARE','arraytype',3,'p_arraytype','rules.py',248),
  ('arraytype -> defaulttype','arraytype',1,'p_arraytype','rules.py',249),
  ('typeliterals -> INTEGER_LITERAL','typeliterals',1,'p_typeliterals','rules.py',257),
  ('typeliterals -> FLOAT_LITERAL','typeliterals',1,'p_typeliterals','rules.py',258),
  ('typeliterals -> STRING_LITERAL','typeliterals',1,'p_typeliterals','rules.py',259),
  ('typeliterals -> BOOL_LITERAL','typeliterals',1,'p_typeliterals','rules.py',260),
  ('arrayliterals -> LSQUARE array_values RSQUARE','arrayliterals',3,'p_arrayliterals','rules.py',265),
  ('array_values -> array_values COMMA expression','array_values',3,'p_array_values','rules.py',269),
  ('array_values -> expression','array_values',1,'p_array_values','rules.py',270),
  ('arrayaccess -> ID LSQUARE expression RSQUARE','arrayaccess',4,'p_arrayaccess','rules.py',286),
  ('arrayaccess -> function_call LSQUARE expression RSQUARE','arrayaccess',4,'p_arrayaccess','rules.py',287),
  ('expression -> expression PLUS expression','expression',3,'p_expression','rules.py',291),
  ('expression -> expression MINUS expression','expression',3,'p_expression','rules.py',292),
  ('expression -> expression TIMES expression','expression',3,'p_expression','rules.py',293),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','rules.py',294),
  ('expression -> expression MOD expression','expression',3,'p_expression','rules.py',295),
  ('expression -> expression POWER expression','expression',3,'p_expression','rules.py',296),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','rules.py',297),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression','rules.py',298),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression','rules.py',299),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression','rules.py',300),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression','rules.py',301),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression','rules.py',302),
  ('expression -> expression AND expression','expression',3,'p_expression','rules.py',303),
  ('expression -> expression OR expression','expression',3,'p_expression','rules.py',304),
  ('expression -> NOT expression','expression',2,'p_expression','rules.py',305),
  ('expression -> MINUS expression','expression',2,'p_expression','rules.py',306),
  ('expression -> typeliterals','expression',1,'p_expression','rules.py',307),
  ('expression -> arrayliterals','expression',1,'p_expression','rules.py',308),
  ('expression -> arrayaccess','expression',1,'p_expression','rules.py',309),
  ('expression -> function_call','expression',1,'p_expression','rules.py',310),
  ('expression -> ID','expression',1,'p_expression','rules.py',311),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','rules.py',312),
]
